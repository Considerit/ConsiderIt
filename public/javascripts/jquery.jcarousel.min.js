// Heavily modified from from http://jqueryfordesigners.com/jquery-infinite-carousel/

$j.fn.infiniteCarousel = function(o) {
    $ = $j; 

    o = $.extend({
        speed: 1000,
        vertical: false,
        total_items: 0,
        total_items_callback: false,
        items_per_page: 0,
        loading_from_ajax: false, 
        dim: 0,
        resetSizePerPage: false
    }, o || {});

    return this.each(function () {

        var $carousel = $(this).addClass('infiniteCarousel ' + (o.vertical ? 'vertical' : 'horizontal')).css(o.vertical ? 'height' : 'width', o.dim),
            $wrapper = $('.carousel', this).addClass('wrapper').css('overflow', 'hidden').css(o.vertical ? 'height' : 'width', o.dim-45),
            $slider = $wrapper.find('> ul'),
            $items = $slider.find('> li').css('position', 'relative'),
            currentPage = 1,
            pages = Math.ceil(totalItems() / o.items_per_page),
            first = 1,
            last = o.items_per_page; 
        
        if ( o.resetSizePerPage ) {
          if (o.vertical) { 
            $wrapper.innerHeight(itemHeight());
          } else {
            $wrapper.innerWidth(itemWidth());          
          }
        }

        if (o.vertical) { 
          $wrapper.scrollTop(0);          
        } else {
          $wrapper.scrollLeft(0);    
        }

        updatePagination(currentPage);

        var active_item = $items.filter('.active');
        if (active_item.length > 0) {
          gotoPage(Math.ceil(Math.max(1, active_item.index() / o.items_per_page)));
        }        
        
        function itemHeight() {
            var page_height = 0;          
            $items.slice(first - 1, last).each(function(){
              page_height += $j(this).outerHeight();
            }); 
            return page_height + (last-first) * 10;
        }

        function itemWidth() {
            var page_width = 0;          
            $items.slice(first - 1, last).each(function(){
              page_width += $j(this).outerWidth();
            }); 
            return page_width + (last-first) * 10;
        }

        function totalItems() {

          if ( o.total_items_callback ) {
            return o.total_items_callback($carousel);
          } else if ( $items.length > o.total_items) {
            o.total_items = $items.length;
          }
          return o.total_items;
        }

        function updatePagination(page){
          if ( page > 1 ) {
            $carousel.find('.back').show();
          } else {
            $carousel.find('.back').hide();
          }

          if ( last == $items.length && last < totalItems() ) {
            // if there are still items left to load and we're on the last loaded page
            var str = $carousel.find('.forward.ajax').show().parents('.button_to:first').attr('action'),
                next = page + 1;
            $carousel.find('.forward.ajax').parents('.button_to:first').attr('action', str.replace(/\b(page\=)[0-9]+\b/g, 'page=' + next));
            $carousel.find('.forward.not_ajax').hide();
          } else if ( page < pages ) {
            $carousel.find('.forward.ajax').hide();
            $carousel.find('.forward.not_ajax').show();
          } else {
            $carousel.find('.forward').hide();
          }          
        }
        function gotoPage(page) {
            if (page == currentPage) return;
            //for dynamic UL, new items may have been added
            $items = $slider.find('> li').css('position', 'relative');
            pages = Math.ceil(totalItems() / o.items_per_page);

            if ( page >= currentPage ) {
              first = last + 1;
              last = Math.min(last + o.items_per_page, totalItems());                
            } else {
              last = first - 1;
              first = Math.max(1, first - o.items_per_page);
            }

            updatePagination(page);

            $carousel.find('.curr_first').text(first);
            $carousel.find('.curr_last').text(last);

            currentPage = page;
            var properties = o.vertical ? {
              scrollTop : $j($items[first - 1]).position().top - $j($items[0]).position().top
            } : {
              scrollLeft : $j($items[first - 1]).offset().left - $j($items[0]).offset().left
            };

            if ( o.resetSizePerPage ) {
              properties['height'] = o.vertical ? itemHeight() : itemWidth();
            }

            $wrapper.filter(':not(:animated)').animate(properties, o.speed, function () {
              $j(this).parents('.infiniteCarousel').find('.back, .forward').removeAttr('disabled');
            });
            return false;
        }

        $(this).delegate('.back', 'click', function () {
          $j(this).parents('.infiniteCarousel').find('.back, .forward').attr('disabled', true);
          return gotoPage(currentPage - 1);                
        });

        $(this).delegate('.forward.not_ajax', 'click', function () {
          $j(this).parents('.infiniteCarousel').find('.back, .forward').attr('disabled', true);
          return gotoPage(currentPage + 1);
        });

        $(this).delegate('.forward.ajax', 'click', function () {
          $j(this).parents('.infiniteCarousel').find('.back, .forward').attr('disabled', true);
        });

        $(this).delegate('.arrow form', 'ajax:success', function (data, response, xhr) {
          var point_col = $j(this).parents('.points_other, .points_self, .points_board');

          point_col.find('.point_list').append(
            $j($j(response['points'])[0]).html()
          );

          $items = $slider.find('> li')
          pages = Math.ceil($items.length / o.items_per_page); 
          return gotoPage(currentPage + 1);
        });

    });  
};