// Heavily modified from from http://jqueryfordesigners.com/jquery-infinite-carousel/

$j.fn.infiniteCarousel = function(o) {
    $ = $j; 

    return this.each(function () {
        
        var data = $j(this).data('carousel');

        if ( data ) {
          if ( o.operation == 'refresh' ){
            refresh();
          } else {
            return;
          }
        } else {
          init(this);          
        }

        function init(carousel) {

          data = $.extend({
            speed: 1000,
            vertical: false,
            total_items: 0,
            total_items_callback: false,
            items_per_page: 0,
            loading_from_ajax: false, 
            dim: 0,
            resetSizePerPage: false,
            $carousel: $(carousel),
            $wrapper: $('.carousel', carousel),
            $slider: $('.carousel > ul', carousel),
            $items: $('.carousel > ul > li', carousel),
            currentPage: 1,
            first: 1
          }, o || {});

          data = $.extend({
            pages: Math.ceil(totalItems() / data.items_per_page),
            last: data.items_per_page                           
          }, data);

          data.$carousel
            .addClass('infiniteCarousel ' + (data.vertical ? 'vertical' : 'horizontal'))
            .css(data.vertical ? 'height' : 'width', data.dim);
          data.$wrapper
            .addClass('wrapper')
            .css('overflow', 'hidden').css(data.vertical ? 'height' : 'width', data.dim-45);
          data.$items
            .css('position', 'relative');

          /*
          if ( data.resetSizePerPage ) {
            if (data.vertical) { 
              data.$wrapper.innerHeight(itemHeight());
            } else {
              data.$wrapper.innerWidth(itemWidth());          
            }
          }

          if (data.vertical) { 
            data.$wrapper.scrollTop(0);          
          } else {
            data.$wrapper.scrollLeft(0);    
          }

          updatePagination(data.currentPage);
          */

          var active_item = data.$items.filter('.active');
          $j(carousel).data('carousel', data);

          if (active_item.length > 0) {
            gotoPage(Math.ceil(Math.max(1, active_item.index() / data.items_per_page)));
          } else {
            gotoPage(1);
          }
          
          $(carousel).delegate('.back', 'click', function () {
            $j(this).parents('.infiniteCarousel').find('.back, .forward').attr('disabled', true);
            return gotoPage(data.currentPage - 1);                
          });

          $(carousel).delegate('.forward.not_ajax', 'click', function () {
            $j(this).parents('.infiniteCarousel').find('.back, .forward').attr('disabled', true);
            return gotoPage(data.currentPage + 1);
          });

          /*
          $(carousel).delegate('.forward.ajax', 'click', function () {
            $j(this).parents('.infiniteCarousel').find('.back, .forward').attr('disabled', true);
            return false;
          }); */

          $(carousel).delegate('.arrow form', 'ajax:success', function (event, response, xhr) {
            var point_col = $j(this).parents('.points_other, .points_self, .points_board');

            point_col.find('.point_list').append(
              $j($j(response['points'])[0]).html()
            );

            data.$items = data.$slider.find('> li')
            data.pages = Math.ceil(data.$items.length / data.items_per_page); 
            return gotoPage(data.currentPage + 1);
          });           

        }

        function refresh() {
          // recount existing items
          // resize carousel
          data.$carousel.find('.total').text(o.total_items);
          gotoPage(data.currentPage);
          
        }
        
        function itemHeight() {
            var page_height = 0;          
            data.$items.slice(data.first - 1, data.last).each(function(){
              page_height += $j(this).outerHeight();
            }); 
            return page_height + (data.last-data.first) * 10;
        }

        function itemWidth() {
            var page_width = 0;          
            data.$items.slice(data.first - 1, data.last).each(function(){
              page_width += $j(this).outerWidth();
            }); 
            return page_width + (data.last-data.first) * 10;
        }

        function totalItems() {

          if ( data.total_items_callback ) {
            return data.total_items_callback(data.$carousel);
          } else if ( data.$items.length > data.total_items) {
            data.total_items = data.$items.length;
          }
          return data.total_items;
        }

        function updatePagination(page){
          if ( page > 1 ) {
            data.$carousel.find('.back').show();
          } else {
            data.$carousel.find('.back').hide();
          }

          if ( data.last >= data.$items.length - data.items_per_page && data.last < totalItems() && data.$items.length < totalItems() ) {
            // if there are still items left to load and we're on the data.last loaded page
            var str = data.$carousel.find('.forward.ajax').show().parents('.button_to:first').attr('action'),
                next = page + 1;
            data.$carousel.find('.forward.ajax').parents('.button_to:first').attr('action', str.replace(/\b(page\=)[0-9]+\b/g, 'page=' + next));
            data.$carousel.find('.forward.not_ajax').hide();
          } else if ( page < data.pages ) {
            data.$carousel.find('.forward.ajax').hide();
            data.$carousel.find('.forward.not_ajax').show();
          } else {
            data.$carousel.find('.forward').hide();
          }
        }

        function gotoPage(page) {
          //for dynamic UL, new items may have been added
          data.$items = data.$slider.find('> li').css('position', 'relative');
          data.pages = Math.ceil(totalItems() / data.items_per_page);

          if ( page > data.currentPage ) {
            data.first = data.last + 1;
            data.last = Math.min(data.last + data.items_per_page, totalItems());                
          } else if ( page < data.currentPage ){
            data.last = data.first - 1;
            data.first = Math.max(1, data.first - data.items_per_page);
          } else {
            data.first = data.first == 0 ? 1 : Math.min(data.first, totalItems());
            if ( totalItems() <= data.items_per_page ) {
              data.last = Math.min(totalItems(), data.items_per_page)
            } else {
              data.last = Math.min(data.last, totalItems());
            }
          }

          updatePagination(page);

          data.$carousel.find('.curr_first').text(data.first);
          data.$carousel.find('.curr_last').text(data.last);

          data.currentPage = page;
          var properties = data.$items.length == 0 ? {} : data.vertical ? {
            scrollTop : $j(data.$items[data.first - 1]).position().top - $j(data.$items[0]).position().top
          } : {
            scrollLeft : $j(data.$items[data.first - 1]).offset().left - $j(data.$items[0]).offset().left
          };


          if ( data.resetSizePerPage ) {
            properties['height'] = data.vertical ? itemHeight() : itemWidth();
            data.$wrapper.css('overflow', totalItems() <= data.items_per_page ? 'visible' : 'hidden');
          }

          data.$wrapper.filter(':not(:animated)').animate(properties, data.speed, function () {
            $j(this).parents('.infiniteCarousel').find('.back, .forward').removeAttr('disabled'); 
          });


          return false;
        }



    });  
};