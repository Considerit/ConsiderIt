%script{ :type => "text/template", :id => "tpl_comments_view" } 

  .point_discussion_heading
    Discussion

  %ul.point_comments

  .new_comment            

    (( if( is_logged_in ) { ))    
    %span.avatar.new_comment_avatar{ :id => "avatar-{{user.id}}", :alt => "{{user.get('name')}}'s profile picture"}
    (( } else { ))
    %span.avatar.new_comment_avatar
    (( } ))


    .new_comment_body

      (( if( comments_open) { ))

      %textarea.new_comment_body_field.is_counted{ :name => :body, :placeholder => 'Type your comment here...', :title => 'Type your comment here...' }
      %span.count
        1000

      (( if( is_logged_in ) { ))
      .new_comment_submit_wrap
        %span.new_comment_civility_reminder
          Thanks for being civil!

        %button.new_comment_submit.button{:action => "submit-comment"}
          Add comment

      (( } else { ))
      .login
        You must 
        = surround '' do 
          %a.login-signin{:'action' => 'login'}
            Sign In
        to leave a comment.
      (( } ))
      (( } else { ))
      This conversation has concluded.
      (( } ))


%script{ :type => "text/template", :id => "tpl_comment_view" }   
  

  %a.avatar.comment_avatar{ :id => "avatar-{{user.id}}", :alt => "{{user.name}}'s profile picture", :'data-id' => "{{user.id}}", :'action' => "user_profile_page", :tooltip => "user_profile"}

  .comment_body_wrap

    (( if( moderation_status == 0 ){ ))
    %i.fa.fa-exclamation-triangle
    %span.it
      This comment has been removed because it violates community guidelines. 
    ((} else { ))


    (( if( moderation_status == 2 ){ ))
    %i.fa.fa-flag
    %span.it
      This commenter has been asked to revise the following comment.
    (( } ))

    .comment_body
      {{body}}

    .comment_footer
      .comment_author
        &ndash; 
        %a{ :href => "{{Routes.profile_path(user.id)}}", :'data-id' => "{{user.id}}", :'action' => "user_profile_page", :tooltip => "user_profile"}
          {{ user.name }}

      .thank

        (( if(can_thank && !user_thanked){ ))
        %button.button{:action => 'thank-commenter'}
          thanks

        (( } else if(user_thanked){ ))

        %a.unthank{:action => 'unthank-commenter'}
          undo thank
        (( } )) 

      (( if(thanks.length > 0 ) { ))
      .thank_given      

        %ul
          (( thanks.each( function(thank){ ))
          %li.thanks_item
            %span.avatar{ :'action' => "user_profile_page", :'data-id' => "{{thank.get('user_id')}}", :id => "avatar-{{thank.get('user_id')}}", :class => "participant", :tooltip => "user_profile"}
          (( }); ))
        %span.given_thanks
          {{ thanks.length }} {{ thanks.length == 1 ? 'person says' : 'people say' }} thanks
      (( } ))


    (( } ))


