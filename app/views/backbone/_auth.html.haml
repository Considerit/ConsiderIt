
%script{ :type => "text/template", :id => "tpl_logged_out"}
  .m-login
    (( if(show_signin){ ))
    (( var also_register_class = show_register ? 'has_register' : ''; ))
    %a{:'data-target' => 'login', :class => "m-login-signin {{also_register_class}}"}
      Sign In
    (( } if(show_register){ ))
    %a.m-login-signup{:'data-target' => 'create_account'}
      Create Account
    (( } ))

%script{ :type => "text/template", :id => "tpl_logged_in"}

  .m-user-options
    .m-user-options-display
      %img{ :src => "{{ avatar }}", :alt => "your profile picture"}

      %a
        {{ name }} 

      %span.m-user-options-triangle
        &#x25BE;

    .m-user-options-menu-wrap

      %ul.m-user-options-menu
        %li
          %a.m-user-options-dashboard_link{:href => "{{Routes.profile_path(current_user.id)}}"}
            Profile
        %li
          %a.m-user-options-dashboard_link{:href => "{{Routes.edit_profile_path(id)}}", :'data-target' => 'edit_profile'}
            Edit Profile

        (( if(is_admin) { ))
        %li
          %a.m-user-options-dashboard_link.application{:href => "/dashboard/application", :'data-target' => 'app_settings'}
            App settings
        (( } ))

        (( if( can_moderate ) { ))
        %li
          %a.m-user-options-dashboard_link.moderate{:href => "{{Routes.dashboard_moderate_path()}}", :'data-target' => 'moderate'}
            Moderate
        (( } ))

        (( if( can_assess ) { ))
        %li
          %a.m-user-options-dashboard_link.assess{:href => "{{Routes.assessment_index_path()}}", :'data-target' => 'assess'}
            Assess
        (( } ))

        / (( if( is_analyst ) { ))
        / %li
        /   %a.m-user-options-dashboard_link.analyze{:href => "{{Routes.analytics_path()}}", :'data-target' => 'analyze'}
        /     Analyze
        / (( } ))

        - if Rails.env.development?
          %li
            = link_to 'Tune', '/newrelic', :target => "_blank"
        %li
          %a.m-user-options-logout
            Sign out
            

%script{ :type => "text/template", :id => "tpl_auth_options"}
  %ul.m-user-accounts-auth-options
    (( _.each(providers, function(provider) { ))
    (( var is_email = provider.name == 'email', dataTarget = is_email ? '' : 'third_party_auth', provider_label = is_email ? 'Good ol\' fashioned email' : provider.name; ))

    %li.m-user-accounts-login-option
      %button{ :'data-target' => "{{dataTarget}}", :class => "zocial {{provider.name}}", :'data-provider' => "{{provider.provider}}" }
        {{provider_label}}
      (( if(provider.fineprint) { ))
      .m-user-accounts-fineprint.m-fineprint-social
        {{provider.fineprint}}
      (( } ))

    (( }) ))

  .m-user-accounts-switch-method-wrapper

    (( if(fixed){ ))
    Please signin through {{providers[0].name}}, the option you previously chose.
    (( } else { ))
    %a.m-user-accounts-switch-method
      {{switch_label}}

      %span
        {{switch_prompt}}
      instead.
    (( } ))

%script{ :type => "text/template", :id => "tpl_signin_via_email"}
  = form_for :user, :url => user_session_path, :remote => true do |f|
    .m-user-accounts-form
      .m-user-accounts-form-fields-wrap

        (( if(fixed) { ))
        = f.hidden_field :email, :value => "{{email}}"
        .email_field.inlined.fixed
        (( } else { ))
        .email_field.inlined
          = f.label :email, 'Email'
          = f.email_field :email, :title => 'We need an email address, thanks.', :placeholder => "Your email address", :required => true, :class =>"h5-email"
        (( } ))
        .password_field.inlined
          = f.label :email, 'Password'              
          = f.password_field :password, :title => 'Password is required.', :placeholder => "Password",  :required => true
          %a.forget_password_prompt
            I forgot. Email me password instructions. 
            
      .m-user-accounts-finish-wrap
        = f.submit "Sign in!"



%script{ :type => "text/template", :id => "tpl_user_signin"}
  .m-user-accounts-auth-options-region
  .m-user-accounts-email-auth-region

%script{ :type => "text/template", :id => "tpl_new_user" }      
  .m-user-accounts-auth-options-region
  .m-user-accounts-complete-paperwork-form

%script{ :type => "text/template", :id => "tpl_user_complete_paperwork" }      
  = form_for :user, :url => user_registration_path, :remote => true, :multipart => true do |f|
    (( var csrfparam = $('meta[name="csrf-param"]').attr('content'), csrftoken = $('meta[name="csrf-token"]').attr('content'); ))
    %input{ :type => "hidden", :name => "{{ csrfparam }}", :value => "{{ csrftoken }}" }
    = f.hidden_field :registration_complete, :value => true

    .m-user-accounts-complete-paperwork-card
    .m-user-accounts-complete-paperwork-pledge
    .m-user-accounts-complete-paperwork-footer

%script{ :type => "text/template", :id => "tpl_user_paperwork_card" }      

  .m-user-accounts-form-fields-wrap
    .m-user-accounts-form-fields-text

      .name_field.inlined
        %input{ :id => "user_name", :name => "user[name]", :pattern => "^.{1,}", :placeholder => "Your name", :required => "required", :title => "Give yourself a name, please!", :type => "text"}

      (( if( fixed ) { ))
      %input{ :id => "user_email", :name => "user[email]", :type => "hidden"}
      .email_field.inlined.fixed
        {{ email }}
      (( } else { ))
      .email_field.inlined
        / = f.email_field :email, :title => 'We need an email address, thanks.', :placeholder => "Your email address", :required => true, :class =>"h5-email"

        %input{ :id => "user_email", :name => "user[email]", :placeholder => "Your email address", :required => "required", :title => "We need an email address, thanks.", :type => "email", :class => 'h5-email'}

      (( } ))

      .password_field.inlined
        / = f.password_field :password, :title => 'Password is required.', :placeholder => "Password",  :required => true

        %input{ :id => "user_password", :name => "user[password]", :placeholder => "Password", :required => "required", :title => "Password is required.", :type => "password"}


      .m-user-accounts-authorized-feedback{:'data-provider' => "{{auth_method}}" }
        %button{ :class => "zocial {{auth_method}} icon" }
        Registering via {{auth_method}}

      .m-user-accounts-pledge-taken
        &#10004; Civility pledge taken

    .avatar_field
      %input{:id => "user_avatar", :name => "user[avatar]", :title => "Upload a profile picture (optional)", :type => "file", :class => "customfile-input ui-state-valid"}

      .selected.hide

      .import_from_third_party
        %span
          Import pic from: 

        .import_from_third_parties
          - ['facebook', 'twitter'].each do |provider|
            %button{ :'data-target' => 'third_party_auth', :class => "zocial #{provider} icon import_from_third_party", :'data-provider' => "#{provider}" }

        %input{ :class => "avatar_url", :id => "user_avatar_url", :name => "user[avatar_url]", :type => "hidden", :value => "" }

    .clear

%script{ :type => "text/template", :id => "tpl_user_paperwork_pledge" }   
  %ol
    %li
      %input{:id => 'pledge1', :name => "pledge1", :type => "checkbox", :value =>"1", :title => "All participants must make this pledge to join"}
      %label{ :for => "pledge1"}
        I will not attack or mock other participants or groups.

    %li
      %input{:id => 'pledge2', :name => "pledge2", :type => "checkbox", :value =>"2", :title => "All participants must make this pledge to join"}
      %label{ :for => "pledge2"}
        I will speak only on behalf of myself, not an organization.

    %li
      %input{:id => 'pledge3', :name => "pledge3", :type => "checkbox", :value =>"3", :title => "All participants must make this pledge to join"}
      %label{ :for => "pledge3"}
        I will use only one account to participate.


%script{ :type => "text/template", :id => "tpl_user_paperwork_footer" }     

  %input{ :name => "commit", :type => "submit", :value => "Create my account!", :class => "ui-state-valid" }

  .m-user-accounts-tos
    %span
      Signing up acknowledges that you agree to the 
    %a.m-user-terms-show{:href => "/home/terms-of-use", :target => "_blank"}
      Terms of Use


%script{ :type => "text/template", :id => "tpl_user_reset_password" }

  = form_for(:user, :url => password_path(:user), :remote => true, :html => { :method => :put }) do |f|

    = f.hidden_field :reset_password_token, :value => "{{password_reset_token}}"

    %p
      = f.label :password, "New password"

    = f.password_field :password

    %p
      = f.label :password_confirmation, "Confirm new password" 
    = f.password_field :password_confirmation

    .m-user-accounts-finish-wrap
      = f.submit "Change my password and sign in", :class => 'button'