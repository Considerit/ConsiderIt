
- cache ['user_templates', current_tenant] do 

  - providers = [ ['google', user_omniauth_authorize_path(:google_oauth2)], ['facebook',user_omniauth_authorize_path(:facebook)], ['twitter',user_omniauth_authorize_path(:twitter, :x_auth_access_type => "read")] ]


  %script{ :type => "text/template", :id => "tpl_logged_out"}
    .m-login
      %a.m-login-signin
        Sign In
      %a.m-login-signup
        Create Account

  %script{ :type => "text/template", :id => "tpl_logged_in"}

    .m-user-options
      .m-user-options-display
        %img{ :src => "{{PaperClip.get_avatar_url(ConsiderIt.current_user, 'small')}}", :alt => "your profile picture"}

        %a
          {{ name }} 

        %span.m-user-options-triangle
          &#x25BE;

      .m-user-options-menu-wrap

        %ul.m-user-options-menu
          %li
            %a.m-user-options-dashboard_link{:'data-target' => 'profile'}
              Profile
          %li
            %a.m-user-options-dashboard_link{:'data-target' => 'edit_profile'}
              Edit Profile

          (( if(is_admin) { ))
          %li
            %a.m-user-options-dashboard_link.application{:'data-target' => 'app_settings'}
              App settings
          (( } ))

          (( if( (is_admin || is_moderator ) && ConsiderIt.current_tenant.get('enable_moderation') ) { ))
          %li
            %a.m-user-options-dashboard_link.moderate{:'data-target' => 'moderate'}
              Moderate
          (( } ))

          (( if( (is_admin || is_evaluator ) && ConsiderIt.current_tenant.get('assessment_enabled') ) { ))
          %li
            %a.m-user-options-dashboard_link.assess{:'data-target' => 'assess'}
              Assess
          (( } ))

          (( if( (is_admin || is_analyst ) ) { ))
          %li
            %a.m-user-options-dashboard_link.analyze{:'data-target' => 'analyze'}
              Analyze
          (( } ))

          - if Rails.env.development?
            %li
              = link_to 'Tune', '/newrelic', :target => "_blank"
          %li
            %a.m-user-options-logout
              Sign out


  %script{ :type => "text/template", :id => "tpl_user_tooltip" }
    .l-tooltip-title.l-tooltip-user-title
      .l-tooltip-user-name
        {{ user.get('name') }}
      .l-tooltip-user-joined
        joined {{ user.get('created_at').substring(0, user.get('created_at').indexOf('T')) }}

    .l-tooltip.l-tooltip-user

      .l-tooltip-user-metrics
        %ul
          - [ ['influence', 'metric_influence'], ['pros/cons', 'metric_points'], ['votes', 'metric_positions'], ['comments', 'metric_comments']  ].each do |label, attr|
            %li.l-tooltip-user-metric
              .l-tooltip-user-metric-number
                {{ user.get("#{attr}") }}
              .l-tooltip-user-metric-desc
                = label
      .l-tooltip-user-actions
        (( if(proposal) { ))
        %a.l-tooltip-user-action{ :href => "{{Routes.user_position_proposal_path(proposal.long_id, user.id)}}", :'data-target' => 'user_position_page', :'data-proposal-id' => "{{proposal.id}}", :'data-user-id' => "{{user.id}}" }
          Read their thoughts on this issue
        (( } ))
        %button.l-tooltip-user-action.l-tooltip-user-profile{ :'data-target' => 'user_profile_page', :'data-id' => "{{user.id}}" }
          View their profile



  %script{ :type => "text/template", :id => "tpl_limited_user_sign_in"}
    %a.m-user-accounts-cancel
      &#10006;

    .m-user-accounts-wrap.m-user-accounts-choose-method

      %h2.m-user-accounts-heading
        Welcome back, {{ConsiderIt.limited_user_email}}! Please sign in. 

      (( if(auth_method == 'email') { ))
      = form_for :user, :url => user_session_path, :remote => true do |f|

        .m-user-accounts-form
          .m-user-accounts-form-fields-wrap

            .m-user-accounts-form-fields-text

              .email_field.inlined
                = f.hidden_field :email, :value => "{{ConsiderIt.limited_user_email}}"

              .password_field.inlined
                = f.password_field :password, :title => 'Password is required.', :placeholder => "Password",  :required => true
                %a.forget_password_prompt
                  I forgot. Email me password instructions. 
                
          .m-user-accounts-finish-wrap

            = f.submit "Sign in!"

      (( } else { ))
      %ul.m-user-accounts-login-options
        - providers.each do |(provider, path)|
          (( var provider_class = "#{provider}" != auth_method ? 'hide' : ''; ))
          %li{ :class => "m-user-accounts-login-option {{ provider_class }}"} 
            %a{ :onclick => "javascript:openPopupWindow('#{path}')", :class => "zocial #{provider}", :'data-provider' => provider }
              #{provider.capitalize}
      (( } ))


  %script{ :type => "text/template", :id => "tpl_user_signin"}
    %a.m-user-accounts-cancel
      &#10006;

    .m-user-accounts-wrap.m-user-accounts-choose-method

      %h2.m-user-accounts-heading
        Welcome back! Select your sign in method below.

      %a.m-user-accounts-switch-method
        New here?

        %span
          Create Account

      %ul.m-user-accounts-login-options
        %li.m-user-accounts-login-option
          %a.email.zocial{:'data-provider' => 'email'}
            Old-fashioned email

        - providers.each do |(provider, path)|
          %li.m-user-accounts-login-option
            %a{ :onclick => "javascript:openPopupWindow('#{path}')", :class => "zocial #{provider}", :'data-provider' => provider }
              #{provider.capitalize}


    .m-user-accounts-wrap.m-user-accounts-complete.m-user-accounts-complete-signin

      = form_for :user, :url => user_session_path, :remote => true do |f|

        .m-user-accounts-form
          .m-user-accounts-form-fields-wrap

            .m-user-accounts-form-fields-text

              .email_field.inlined
                //= f.label :email, 'Member email'
                = f.email_field :email, :title => 'We need an email address, thanks.', :placeholder => "Your email address", :required => true, :class =>"h5-email"

              .password_field.inlined
                //= f.label :email, 'Password'
                = f.password_field :password, :title => 'Password is required.', :placeholder => "Password",  :required => true
                %a.forget_password_prompt
                  I forgot. Email me password instructions. 
                
              - providers.each do |(provider, path)|
                .m-user-accounts-authorized-feedback{:'data-provider' => "#{provider}" }

                  %a{ :class => "zocial #{provider} icon" }

                  Registering via #{provider}



          .m-user-accounts-finish-wrap

            = f.submit "Sign in!"
        



  - requires_pledge = current_tenant.requires_civility_pledge_on_registration
  %script{ :type => "text/template", :id => "tpl_new_user" }      
    %a.m-user-accounts-cancel
      &#10006;

    .m-user-accounts-wrap.m-user-accounts-choose-method

      %h2.m-user-accounts-heading
        Welcome! How do you want to register?

      %a.m-user-accounts-switch-method
        Returning?

        %span
          Sign In

      %ul.m-user-accounts-login-options
        %li.m-user-accounts-login-option
          %a.email.zocial{:'data-provider' => 'email'}
            Old-fashioned email
          .m-user-accounts-fineprint.m-fineprint-email
            Email confirmation step required

        - providers.each do |(provider, path)|
          %li.m-user-accounts-login-option
            %a{ :onclick => "javascript:openPopupWindow('#{path}')", :class => "zocial #{provider}", :'data-provider' => provider }
              #{provider.capitalize}
            - if provider == 'facebook'
              .m-user-accounts-fineprint.m-fineprint-social
                We don't post to your wall without permission


    .m-user-accounts-wrap.m-user-accounts-complete.m-user-accounts-complete-register

      //%h2.m-user-accounts-heading
      //  Complete your registration

      = form_for :user, :url => user_registration_path, :remote => true, :multipart => true do |f|
        .m-user-accounts-form
          .m-user-accounts-form-fields-wrap

            = image_tag current_theme_image_path("logo.png"), :class => "m-user-accounts-logo"

            .m-user-accounts-form-fields-text

              .name_field.inlined
                //= f.label :name, 'Member name'
                = f.text_field :name, :title => 'Give yourself a name, please!', :placeholder => "Your name",  :required => true, :class =>"", :pattern => "^.{1,}"

              .email_field.inlined
                //= f.label :email, 'Member email'
                = f.email_field :email, :title => 'We need an email address, thanks.', :placeholder => "Your email address", :required => true, :class =>"h5-email"

              .password_field.inlined
                //= f.label :email, 'Password'
                = f.password_field :password, :title => 'Password is required.', :placeholder => "Password",  :required => true


              .m-user-accounts-authorized-feedback{:'data-provider' => 'email'}
                %a.email.zocial.icon
                  
                Registering via email
                
              - providers.each do |(provider, path)|
                .m-user-accounts-authorized-feedback{:'data-provider' => "#{provider}" }

                  %a{ :class => "zocial #{provider} icon" }

                  Registering via #{provider}

              .m-user-accounts-pledge-taken
                &#10004; Civility pledge taken


            .avatar_field
              = f.file_field :avatar, :title => 'Upload a profile picture (optional)'
              .selected.hide
    
              .import_from_third_party
                %span
                  Import pic from: 

                .import_from_third_parties

                  %a{ :onclick => "javascript:openPopupWindow('#{user_omniauth_authorize_path(:facebook)}')", :class => "zocial facebook icon import_from_third_party", :'data-provider' => 'facebook' }

                  %a{ :onclick => "javascript:openPopupWindow('#{user_omniauth_authorize_path(:twitter)}')", :class => "zocial twitter icon import_from_third_party", :'data-provider' => 'twitter' }

                = f.hidden_field :avatar_url, :class => 'avatar_url'

            .clear

          .m-user-accounts-finish-wrap
            - if requires_pledge
              .m-user-accounts-pledge
                //.m-user-accounts-pledge-heading
                //  To participate, we ask for your pledge
                = render :partial => "users/registrations/pledge"

            = f.hidden_field :registration_complete, :value => true

            = f.submit "Create my account!"

            .m-user-accounts-tos
              %span
                Signing up acknowledges that you agree to the 
              %a.m-user-terms-show
                Terms of Use

              .m-user-the-terms-of-use
                = render :partial => "home/terms-of-use"



  %script{ :type => "text/template", :id => "tpl_new_limited_user" }      
    %a.m-user-accounts-cancel
      &#10006;

    .m-user-accounts-wrap.m-user-accounts-complete.m-user-accounts-complete-register

      %h2.m-user-accounts-heading
        Welcome, {{ConsiderIt.limited_user_email}}! Please create an account. 

      = form_for :user, :url => user_registration_path, :remote => true, :multipart => true do |f|
        .m-user-accounts-form
          .m-user-accounts-form-fields-wrap

            = image_tag current_theme_image_path("logo.png"), :class => "m-user-accounts-logo"

            .m-user-accounts-form-fields-text

              .name_field.inlined
                //= f.label :name, 'Member name'
                = f.text_field :name, :title => 'Give yourself a name, please!', :placeholder => "Your name",  :required => true, :class =>"", :pattern => "^.{1,}"

              .email_field.inlined
                //= f.label :email, 'Member email'
                {{ConsiderIt.limited_user_email}}
                = f.hidden_field :email, :value => "{{ConsiderIt.limited_user_email}}"

              .password_field.inlined
                //= f.label :email, 'Password'
                = f.password_field :password, :title => 'Password is required.', :placeholder => "Password",  :required => true

            .avatar_field
              = f.file_field :avatar, :title => 'Upload a profile picture (optional)'
              .selected.hide
    
              .import_from_third_party
                Import pic from: 

                .import_from_third_parties

                  %a{ :onclick => "javascript:openPopupWindow('#{user_omniauth_authorize_path(:facebook)}')", :class => "zocial facebook icon import_from_third_party", :'data-provider' => 'facebook' }

                  %a{ :onclick => "javascript:openPopupWindow('#{user_omniauth_authorize_path(:twitter)}')", :class => "zocial twitter icon import_from_third_party", :'data-provider' => 'twitter' }

                = f.hidden_field :avatar_url, :class => 'avatar_url'


            .clear

          .m-user-accounts-finish-wrap
            - if requires_pledge
              .m-user-accounts-pledge
                //.m-user-accounts-pledge-heading
                //  To participate, we ask for your pledge
                = render :partial => "users/registrations/pledge"

            = f.hidden_field :registration_complete, :value => true

            = f.submit "Create my account!"

            .m-user-accounts-tos
              Signing up acknowledges that you agree to the 
              %a
                Terms of Use.

  %script{ :type => "text/template", :id => "tpl_user_reset_password" }
    %a.m-user-accounts-cancel
      &#10006;

    .m-user-accounts-wrap

      %h2
        Change your password

      = form_for(:user, :url => password_path(:user), :remote => true, :html => { :method => :put }) do |f|

        = f.hidden_field :reset_password_token, :value => "{{password_reset_token}}"

        %p
          = f.label :password, "New password"

        = f.password_field :password

        %p
          = f.label :password_confirmation, "Confirm new password" 
        = f.password_field :password_confirmation

        .m-user-accounts-finish-wrap
          = f.submit "Change my password and sign in", :class => 'button'



  %script{ :type => "text/template", :id => "tpl_dashboard_container"}
    / %a.m-dashboard-close{ :'data-target' => "close_user_dashboard"}
    /   &#10006;

    .m-dashboard-sidebar


      %ul
        %li.m-dashboard_avatar
          %img{:src => "{{ avatar }}", :alt => "{{user.username}}'s profile picture"}
        %li
          %a.m-dashboard_link{:'data-target' => 'profile'}
            Profile

        (( if( is_self ) { ))
        %li
          %a.m-dashboard_link{:'data-target' => 'edit_profile'}
            Edit profile

        %li
          %a.m-dashboard_link{:'data-target' => 'account_settings'}
            Account settings
        %li
          %a.m-dashboard_link{:'data-target' => 'email_notifications'}        
            Email notifications        

        (( } ))

      %hr

      // if admin ...
      %ul
        (( if(is_admin) { ))
        %li
          %a.m-dashboard_link{:'data-target' => 'app_settings'}
            App settings

        %li
          %a.m-dashboard_link{:'data-target' => 'user_roles'}
            User roles

        (( } ))


        (( if( is_admin || is_manager ) { ))

        %li
          %a.m-dashboard_link{:'data-target' => 'manage_proposals'}
            Manage proposals

        (( } ))

        (( if( (is_admin || is_moderator ) && ConsiderIt.current_tenant.get('enable_moderation') ) { ))
        %li
          %a.m-dashboard_link{:'data-target' => 'moderate'}
            Moderate content
        (( } ))

        (( if( (is_admin || is_evaluator ) && ConsiderIt.current_tenant.get('assessment_enabled') ) { ))
        %li
          %a.m-dashboard_link{:'data-target' => 'assess'}
            Assess claims
        (( } ))

        (( if( is_admin || is_analyst ) { ))
        %li
          %a.m-dashboard_link{:'data-target' => 'analyze'}
            Analyze trends
        (( } ))

        (( if(is_admin) { ))
        %li
          %a.m-dashboard_link{:'data-target' => 'database'}
            Database

          // = link_to 'Database', rails_admin_path, :target => "_blank", :class => 'm-dashboard_link'
        (( } ))

        - if Rails.env.development?
          %li
            = link_to 'Tune', '/newrelic', :target => "_blank", :class => 'm-dashboard_link'

    .m-dashboard-content

    .clear

  %script{ :type => "text/template", :id => "tpl_dashboard_unauthorized"}

    .m-dashboard-heading
      %h2
        Not allowed!

      .m-dashboard-subheading
        Sorry, but only signed in users with proper authorization can access this functionality. 


  %script{ :type => "text/template", :id => "tpl_dashboard_profile"}
    (( var max_length_root = 35, max_length_content = 65; ))

    .m-dashboard-heading
      %h2
        {{ user.name }} 

      .m-dashboard-subheading
        (( if(user.bio && user.bio.length > 0) { ))
        {{ user.bio }} 
        (( } else { ))
        %span.empty
          No details provided
        (( } ))

        (( if ( is_self ) { ))
        = surround '(', ')' do
          %a.m-dashboard-profile-edit_profile{:'data-target' => 'edit_profile'}
            edit
        (( } ))

    .m-dashboard-profile-bio

    (( if(_.keys(influenced_users).length > 0){ ))
    .m-dashboard-profile-influence
      .m-dashboard-profile-influence-summary
        .m-dashboard-profile-influence-count
          {{ _.keys(influenced_users).length }}
        .m-dashboard-profile-influence-label
          Influence

      .m-dashboard-profile-influence-details
        .m-dashboard-profile-influence-description
          People influenced by {{ user.name }}'s pro & con considerations

        .m-dashboard-profile-influenced.l-group-container
          (( _.each(_.keys(influenced_users), function(p){ ))
          %span.avatar{ :'data-target' => "user_profile_page", :'data-id' => "{{p}}", :alt => "{{ConsiderIt.users[p].get('name')}}'s profile picture", :id => "avatar-{{p}}", :class => "participant", :style => "height:{{tile_size}}px; width:{{tile_size}}px;"}
          (( }); ))        
    (( } ))

    .m-dashboard-profile-activities

      %ul.m-dashboard-profile-activity-summaries
        %li
          %a.m-dashboard-profile-activity-summary{ :'data-target' => 'proposals'}
            %span.m-activity-summary-count
              {{ proposals.length }}
            %span.m-activity-summary-label
              Conversations

        %li
          %a.m-dashboard-profile-activity-summary{ :'data-target' => 'positions'}
            %span.m-activity-summary-count
              {{ positions.length }}
            %span.m-activity-summary-label
              Votes

        %li
          %a.m-dashboard-profile-activity-summary{ :'data-target' => 'points'}
            %span.m-activity-summary-count
              {{ points.length }}
            %span.m-activity-summary-label
              Pros & cons

        %li
          %a.m-dashboard-profile-activity-summary{ :'data-target' => 'comments'}
            %span.m-activity-summary-count
              {{ comments.length }}
            %span.m-activity-summary-label
              Comments

      .m-dashboard-profile-activity-block{ :'data-target' => 'proposals-details'}
        %h3
          Conversations started
        (( if(proposals.length > 0) { ))
        %table.table.table-condensed.table-striped
          %tbody
            (( _.each(proposals, function(proposal){ ))
            (( var proposal = proposal.proposal; ))
            %tr
              %td.m-dashboard-profile-activity-substance-wrap
                .m-dashboard-profile-activity-substance
                  {{ proposal.name }}
              %td.m-dashboard-profile-activity-action
                = link_to 'View and consider', "{{Routes.proposal_path(proposal.long_id)}}"
            (( }); ))
        (( } else { ))
        .m-dashboard-profile-activity-empty
          {{ConsiderIt.users[user_id].first_name}} has not put forward any proposals.
        (( } ))


      .m-dashboard-profile-activity-block{ :'data-target' => 'positions-details'}


        %h3
          Positions taken

        (( if(positions.length > 0){ ))
        %table.table.table-condensed.table-striped
          %tbody
            (( _.each(positions, function(position){ ))
            (( var position = position.position; ))
            (( var proposal = referenced_proposals[position.proposal_id].proposal; ))
            %tr
              %td.m-dashboard-profile-activity-substance-wrap
                .m-dashboard-profile-activity-substance
                  (( if( position.stance < -.05 ) { ))
                  Opposed
                  (( } else if( position.stance > .05 ) { ))
                  Supported
                  ((} else{ ))
                  Neutral / undecided
                  (( }))
                .m-dashboard-profile-activity-substance-context
                  Re: {{ proposal.name }}

              %td.m-dashboard-profile-activity-action
                = link_to 'See why', "{{Routes.user_position_proposal_path(proposal.long_id, user_id)}}"
            (( }); ))
        (( } else { ))
        .m-dashboard-profile-activity-empty
          {{ConsiderIt.users[user_id].first_name}} has not taken any positions.
        (( } ))

      .m-dashboard-profile-activity-block{ :'data-target' => 'points-details'}
        %h3
          Pro/con points written

        (( if(points.length > 0){ ))
        %table.table.table-condensed.table-striped
          %tbody
            (( _.each(points, function(point){ ))
            (( var point = point.point; ))
            (( var proposal = referenced_proposals[point.proposal_id].proposal; ))            
            %tr
              %td.m-dashboard-profile-activity-substance-wrap
                .m-dashboard-profile-activity-substance
                  {{ point.category}} {{ point.nutshell }}
                .m-dashboard-profile-activity-substance-context
                  Re: {{ proposal.name }}

                .m-dashboard-profile-activity-influence
                  This point has influenced {{influenced_users_by_point[point.id].length}} people
                .l-group-container
                  (( _.each(influenced_users_by_point[point.id], function(p){ ))
                  %span.avatar{ :'data-target' => "user_profile_page", :'data-id' => "{{p}}", :alt => "{{ConsiderIt.users[p].get('name')}}'s profile picture", :id => "avatar-{{p}}", :class => "participant", :style => "height:{{tile_size}}px; width:{{tile_size}}px;"}
                  (( }); ))   

              %td.m-dashboard-profile-activity-action
                = link_to 'Read and discuss', "{{Routes.proposal_point_path(proposal.long_id, point.id)}}"
            (( }); ))
        (( } else { ))
        .m-dashboard-profile-activity-empty
          {{ConsiderIt.users[user_id].first_name}} has not contributed any points.
        (( } ))

      .m-dashboard-profile-activity-block{ :'data-target' => 'comments-details'}
        %h3
          Comments

        (( if(comments.length > 0){ ))
        %table.table.table-condensed.table-striped
          %tbody
            (( _.each(comments, function(comment){ ))
            (( var comment = comment.comment; ))
            (( var point = referenced_points[comment.commentable_id].point; ))
            (( var proposal = referenced_proposals[point.proposal_id].proposal; ))
            %tr
              %td.m-dashboard-profile-activity-substance-wrap
                .m-dashboard-profile-activity-substance
                  {{ comment.body}}
                .m-dashboard-profile-activity-substance-context
                  Re: {{ point.is_pro ? 'Pro' : 'Con' }} point "{{ point.nutshell }}"
                .m-dashboard-profile-activity-substance-context
                  Re: {{ proposal.name }}
              %td.m-dashboard-profile-activity-action
                = link_to 'Join in', "{{Routes.proposal_point_path(proposal.long_id, point.id)}}", :anchor => "comment-{{comment.id}}"
            (( }); ))
        (( } else { ))
        .m-dashboard-profile-activity-empty
          {{ConsiderIt.users[user_id].first_name}} has not made any comments.
        (( } ))


  %script{ :type => "text/template", :id => "tpl_dashboard_edit_profile"}

    .m-dashboard-heading
      %h2
        Edit your Profile

      .m-dashboard-subheading
        Control the information that other people can see.


    = form_for(:user, :url => "{{ Routes.user_registration_path() }}", :method => :put, :remote => true, :html => { :multipart => true, :class => 'm-dashboard-edit-user' }) do |f|

      .field
        = f.label :name, "Name"
        = f.text_field :name, :pattern => "^.{1,}", :value => "{{ user.name }}"

      .field
        = f.label :bio, "About you"
        = f.text_area :bio, :rows => 5, :value => "{{ user.bio }}"
    
      .field
        = f.label :avatar, "Your picture" 
        %br
        = f.file_field :avatar, :title => 'Upload a profile picture'

      // .avatar
      //   %img{:src => "{{ avatar }}", :alt => "{{user.username}}'s profile picture"}


      .save_block
        = f.submit "Save changes", :class => 'button'


  %script{ :type => "text/template", :id => "tpl_dashboard_account_settings"}

    .m-dashboard-heading
      %h2
        Account Settings

      .m-dashboard-subheading
        Modify your authentication options.

    = form_for(:user, :url => "{{ Routes.user_registration_path() }}", :method => :put, :remote => true, :html => { :multipart => true, :class => 'm-dashboard-edit-user' }) do |f|

      .field
        = f.label :email, "Email address"
        = f.email_field :email, :value => "{{ user.email }}"
        .sublabel
          Your email will never be shared with other users or third parties

      (( if ( user.third_party_authenticated ) { ))
      .field
        Authorized via {{user.third_party_authenticated}}
      (( } else { ))
      .field
        = f.label :password, "New password"
        = f.password_field :password
      .field
        = f.label :password_confirmation, "Confirm new password" 
        = f.password_field :password_confirmation
      (( } ))

      .save_block
        = f.submit "Save changes", :class => 'button'

  %script{ :type => "text/template", :id => "tpl_dashboard_email_notifications"}

    .m-dashboard-heading
      %h2
        Email Notification Settings
      .m-dashboard-subheading
        Control when email updates are sent to {{ user.email }}
      

    .field
      = form_for :follows, :url => unfollow_path, :remote => true, :as => :follow, :html => { :class => 'm-dashboard-notifications-unfollow_all'} do |f|
        = f.hidden_field :user_id, :value => "{{user.id}}"
        = f.hidden_field :unsubscribe_all, :value => true
        = f.submit "Unsubscribe to all notifications", :class => 'button'

    .m-dashboard-notifications-followable_group
      .m-dashboard-heading
        %h2
          Site-wide notifications

        .m-dashboard-subheading
          Receive an email whenever a new conversation is started.

        (( var account_followerer = _.has(follows, 'Account') && _.has(follows['Account'], ConsiderIt.current_tenant.id ) && follows['Account'][ConsiderIt.current_tenant.id].follow; ))
        (( var submit_text = account_followerer ? 'Unsubscribe' : 'Subscribe'; ))
        = form_for :follows, :url => unfollow_path, :remote => true, :as => :follow, :html => {:class => "m-dashboard-notifications-unfollow"} do |f|
          = f.hidden_field :user_id, :value => "{{ user.id }}"
          = f.hidden_field :followable_type, :value => "Account"
          = f.hidden_field :followable_id, :value => "{{ ConsiderIt.current_tenant.id }}"  
          = f.hidden_field :follow, :value => "{{ !account_followerer }}"
          = f.submit "{{ submit_text }}", :class => 'button'      



    (( var followable_types = [ {label: 'Proposals', model: 'Proposal', explanation: 'When following a Proposal, you receive an email for each new pro/con point, as well as periodic email summaries of how the discussion is progressing.', attribute: 'name'}, {label: 'Points', model: 'Point', explanation: 'When following a pro or con point, you receive an email whenever someone comments on it', attribute: 'nutshell'}]; ))

    (( _.each( followable_types, function(followable_type){  ))
    .m-dashboard-notifications-followable_group
      .m-dashboard-heading
        %h2
          {{followable_type.label}}

        .m-dashboard-subheading
          {{followable_type.explanation}}

      .m-dashboard-notifications-table_wrap
        %table.table.table-condensed.table-striped
          %tbody
            (( var is_following = false; ))
            (( _.each( _.values(follows[followable_type.model]), function(obj){ ))

            (( if( obj.follow ){ ))
            (( is_following = true; ))

            (( var root_object = followable_objects[obj.followable_type][obj.followable_id][followable_type.model.toLowerCase()]; ))

            %tr.follow_row

              %td
                {{ root_object[followable_type.attribute] }}

              %td
                = form_for :follows, :url => unfollow_path, :remote => true, :as => :follow, :html => {:class => "m-dashboard-notifications-unfollow"} do |f|
                  = f.hidden_field :user_id, :value => "{{user.id}}"
                  = f.hidden_field :followable_type, :value => "{{obj.followable_type}}"
                  = f.hidden_field :followable_id, :value => "{{obj.followable_id}}"  
                  = f.submit "Unsubscribe", :class => 'button'

            (( } ))
            (( }); ))
            (( if( !is_following ){ ))
            Not following any {{followable_type.label}}
            (( } ))
    (( }); ))

