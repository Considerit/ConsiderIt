
###################
# Install dependencies
- name: Update system
  shell: /usr/bin/apt-get update --assume-yes
  sudo: True

- name: Upgrade system
  shell: /usr/bin/apt-get upgrade --assume-yes
  sudo: True


- name: Install system dependencies (takes awhile)
  shell: >
             export DEBIAN_FRONTEND=noninteractive && sudo -E apt-get -y install advancecomp autoconf automake bison build-essential 
             curl emacs23-nox exuberant-ctags gifsicle git-core imagemagick
             jpegoptim libcurl4-openssl-dev libjpeg-progs libmagickcore-dev
             libmagickwand-dev libmysqlclient-dev libreadline6 libreadline6-dev 
             libreadline-dev libssl-dev libncurses5-dev libtool libxml2-dev 
             libxslt1-dev memcached mysql-server openssl optipng nodejs npm
             pngcrush python-apt python-pip python-mysqldb unattended-upgrades
             unzip zlib1g zlib1g-dev
  sudo: True

- name: Install aws cli
  shell: pip install awscli
  sudo: True

###################
# Configure automatic security upgrades

- name: Install Unattended-upgrades config 1
  copy: src=files/auto_update_10periodic dest=/etc/apt/apt.conf.d/10periodic mode=744
  sudo: True
  when: code.environment == 'production'

- name: Install Unattended-upgrades config 2
  copy: src=files/auto_update_50unattended-upgrades dest=/etc/apt/apt.conf.d/50unattended-upgrades mode=744
  sudo: True
  when: code.environment == 'production'

###################
# Set up users

- name: Make home directory
  file: path=/home/{{user}} owner={{user}} state=directory
  sudo: False
  when: code.environment == 'production'

# - name: Proper ownership of home files
#   shell: "chown {{user}}:{{user}} {{app_home}} -R"

- name: Configure sudoers
  lineinfile: "dest=/etc/sudoers backup=yes state=present regexp='^%{{user}}' insertafter=EOF line='%{{user}} ALL=(ALL) ALL'"
  sudo: True
  when: code.environment == 'production'



###################
# Configure memcached

- name: Write memcached.conf
  template: src=files/memcached.cnf.j2 dest=/etc/memcached.conf mode=0644
  sudo: True
  when: code.environment == 'production'

- name: Restart memcached
  service: name=memcached state=started
  sudo: True
  when: code.environment == 'production'

###################
# Configure mysql

- name: Write mysqld.conf
  template: src=files/mysqld.cnf.j2 dest=/etc/mysql/conf.d/mysqld.cnf
  sudo: True
  notify:
    - Restart mysql

- name: Write mysql client.cnf
  template: src=files/mysql.client.cnf.j2 dest=/etc/mysql/conf.d/client.cnf
  sudo: True
  notify:
    - Restart mysql

- name: Start mysql service
  shell: 'service mysql restart'
  sudo: True

# - name: Change default pass for user root for mysql
#   mysql_user: name={{database.user}} password={{database.password}}
#   ignore_errors: yes
#   sudo: True

- name: Update default password for mysql
  shell: mysqladmin -u {{database.user}} password {{database.password}}
  ignore_errors: yes
  
- name: Create default database
  mysql_db: name={{database.name}} state=present login_user={{database.user}} login_password={{database.password}}
  sudo: True

###################
# Configure SSH

- name: Make .ssh directory
  file: path=~/.ssh owner={{user}} state=directory

- name: Create authorized_keys
  template: src=files/ssh/authorized_keys.j2 dest=~/.ssh/authorized_keys mode=400
  when: ssh.pubkeys

# THIS WILL FAIL UNLESS YOU HAVE ACCESS TO THE CONSIDERIT DROPBOX & ARE ON A MAC
- name: Make .ssh directory
  local_action: file path=files/ssh state=directory

# note: local_action's current working directory is the location of the top level playbook
- name: Copy github ssh deploy key from private considerit dropbox
  local_action: "shell cp -r ~/Dropbox/ConsiderIt/Local_dev_requirements/zansible/files/ssh/github files/ssh"

- name: Copy over Github private rsa deploy key
  copy: src=files/ssh/github/{{deploy_key}}_rsa dest=~/.ssh/{{deploy_key}}_rsa mode=700

- name: Add github ssh key to config file
  template: src=files/ssh/ssh_config.j2 dest=~/.ssh/config

- name: Add Github to known hosts
  shell: ssh-keyscan github.com >> ~/.ssh/known_hosts


####################
# Install Ruby

- name: Install rbenv
  git: repo=git://github.com/sstephenson/rbenv.git dest={{rbenv_path}}

- name: Create rbenv plugin directory
  file: path={{rbenv_path}}/plugins/ owner={{user}} group={{user}} state=directory

- name: Install ruby-build
  git: repo=git://github.com/sstephenson/ruby-build.git dest={{rbenv_path}}/plugins/ruby-build

- name: Add rbenv and shims to bashrc
  lineinfile: dest=~/.profile line='export RBENV_ROOT={{rbenv_path}}; export PATH="$RBENV_ROOT/bin:$PATH"; eval "$(rbenv init -)"' regexp=rbenv*

# - name: Add rbenv and shims to root bashrc
#   lineinfile: dest=/root/.profile line='export RBENV_ROOT={{rbenv_path}}; export PATH="$RBENV_ROOT/bin:$PATH"; eval "$(rbenv init -)"' regexp=rbenv*
#   sudo: True

# - name: Add rbenv and shims to skel profile
#   lineinfile: dest=/etc/skel/.profile line='export RBENV_ROOT={{rbenv_path}}; export PATH="$RBENV_ROOT/bin:$PATH"; eval "$(rbenv init -)"' regexp=rbenv*
#   sudo: True

- name: Get current ruby version
  shell: "{{source}} && {{path}} rbenv version | cut -f1 -d\" \""
  register: ruby_current_version

- name: Ruby Version check
  debug: >
    msg="current version of Ruby is {{ ruby_current_version.stdout }} while were looking for {{ ruby_version }}"

- name: Install ruby (4-7min)
  shell: "{{source}} && {{path}} rbenv install {{ruby_version}} && {{path}} rbenv global {{ruby_version}}"
  when: ruby_current_version.stdout != ruby_version
  async: 1000
  poll: 30

- name: Install bundler
  shell: "{{source}} && {{path}} gem install bundler --no-rdoc --no-ri && {{rbenv_home}}/rbenv rehash"



####################
# Install Passenger

- name: Install passenger
  shell: "{{source}} && {{path}} gem install passenger --no-rdoc --no-ri"
  when: code.environment == 'production'

- name: Rbenv rehash
  shell: "{{source}} && {{path}} rbenv rehash"
  when: code.environment == 'production'

- name: Install passenger nginx module
  shell: "{{source}} && passenger-install-nginx-module --auto --auto-download --prefix=/opt/nginx --extra-configure-flags=--with-http_ssl_module creates=/opt/nginx"
  sudo: True
  when: code.environment == 'production'

- name: Set Passenger Path
  shell: "{{source}} && passenger-config --root | cut -f1 -d\" \""
  register: passenger_root
  when: code.environment == 'production'

- name: Create passenger agents
  shell: "{{source}} && rake nginx chdir={{passenger_root.stdout}} creates={{passenger_root.stdout}}/agents/PassengerWatchdog"
  sudo: True # False #TODO: make sure it is ok to install under sudo
  when: code.environment == 'production'

################
# Install nginx

- name: Create /var/log
  file: path=/var/log/nginx owner=root state=directory
  sudo: True
  when: code.environment == 'production'

- name: Create /etc/nginx
  file: path=/etc/nginx owner=root state=directory
  sudo: True
  when: code.environment == 'production'

- name: Write nginx mime.types
  template: src=files/nginx.mime.types.j2 dest=/etc/nginx/mime.types
  sudo: True
  when: code.environment == 'production'

- name: Configure nginx as service
  template: src=files/nginx.init.j2 dest=/etc/init.d/nginx mode=0755
  sudo: True
  when: code.environment == 'production'

- name: Set Passenger Path
  shell: "{{source}} && passenger-config --root | cut -f1 -d\" \""
  register: passenger_root
  sudo: False
  when: code.environment == 'production'

- name: Write nginx.conf
  template: src=files/nginx.conf.j2 dest=/opt/nginx/conf/nginx.conf
  sudo: True
  notify:
    - Restart nginx
  when: code.environment == 'production'

- name: Make virtual hosts directory
  file: path=/etc/nginx/conf.d owner=root state=directory
  sudo: True
  when: code.environment == 'production'

- name: Create vhost for this site
  template: src=files/nginx.vhost.conf.j2 dest=/etc/nginx/conf.d/{{app_name}}.conf mode=0755
  sudo: True
  when: server.name is defined and code.environment == "production"

- name: Add nginx bootup script to bootup process
  shell: update-rc.d nginx defaults
  sudo: True
  notify:
    - Restart nginx
  when: code.environment == 'production'

# - name: Stop nginx service
#   service: name=nginx state=stopped pattern=nginx
#   sudo: True

# - name: Start nginx service and have it run during system startup
#   service: name=nginx state=started enabled=yes pattern=nginx
#   sudo: True



##############
# Useful shorts

- name: dev shortcuts
  lineinfile: "dest=/home//vagrant/.bashrc state=present line='cd /vagrant'"
  when: code.environment == 'development'

- lineinfile: "dest=/home/vagrant/.bashrc state=present line='s () { cd /vagrant; rails s -b 0.0.0.0; }'"
  when: code.environment == 'development'

- lineinfile: "dest=/home//vagrant/.bashrc state=present line='alias db=\"cd /vagrant; rails dbconsole -p\"'"
  when: code.environment == 'development'

- lineinfile: "dest=/home//vagrant/.bashrc state=present line='alias c=\"cd /vagrant; rails console\"'"
  when: code.environment == 'development'

