%script{ :type => "text/template", :id => "tpl_dashboard_moderate"}

  .dashboard-heading
    %h2
      Moderation Interface
      %span.launch_moderation_settings
        %a{ :action => 'launch-moderation-settings'} settings

    .dashboard-subheading
      Fail posts with personal attacks, or wildly off-topic/inappropriate material.        

  #moderation_tabs_region
  #moderation_content_region


%script{ :type => "text/template", :id => "tpl_moderate_tab"}
  (( if(_.size(classes_to_moderate) == 0){ ))
  .it
    There are no content types being moderated for this application. Change the moderation settings above if you wish to enable moderation. 
  (( } else { ))
  (( _.each(classes_to_moderate, function(mc, idx){  ))
  %a{:class => 'moderation-tab inactive', :class_name => "{{ mc }}"}
    %span.name
      {{ mc }}
    = surround '(', ')' do
      {{ unmoderated[mc] }}
  (( }); ))
  (( } ))


%script{ :type => "text/template", :id => "tpl_moderate_list_view"}

  .moderate-filters
    %span.moderate-filters-label
      Show: 
    %a.moderate-filter{:'action' => 'incomplete'}
      incomplete
    |
    %a.moderate-filter{:'action' => 'pass'}
      passing
    |
    %a.moderate-filter{:'action' => 'quarantine'}
      quarantined
    |
    %a.moderate-filter{:'action' => 'fail'}
      failed
    |
    %a.moderate-filter{:'action' => 'updated'}
      updated
    |
    %a.moderate-filter{:'action' => 'all'}
      all


  .moderate-content

%script{ :type => "text/template", :id => "tpl_moderate_item_view"}

  .moderatable-text-region

    .moderatable-fields
      (( _.each( moderated_fields, function(field) {  ))
      (( if( field && field.length > 0 ) { ))
      .moderatable-field
        {{ field.replace(/(<([^>]+)>)/ig,"") }}
      (( } ))              
      (( }); ))

    .meta
      %a.moderate-context_link{ :href => "{{ url }}"}
        {{ anchor }}

      (( if (user) { ))
      |
      %span.by
        moderated by {{ user.name }}
      (( } ))



  .moderatable-form-region
    = form_for :moderate, :url => "{{Routes.dashboard_moderate_create_path()}}", :method => :post, :remote => true, :html => { :class => 'moderate-form' } do |f|
      = f.hidden_field :moderatable_id, :value => "{{moderatable_id}}"
      = f.hidden_field :moderatable_type, :value => "{{moderatable_type}}"

      .moderatable-evaluation
        (( _.each(evaluation_options, function(option) { ))
        .moderatable-evaluation-option
          %input{ :id => "moderate_status_{{moderatable_id}}_{{option.val}}", :name => "moderate[status]", :type => "radio", :value => "{{option.val}}" }
          %label{ :for => "moderate_status_{{moderatable_id}}_{{option.val}}"}
            {{option.label}}
        (( }); ))


      = f.submit 'done', :class => 'hide'

    (( if( updated_since_last_evaluation ) { ))
    .moderate-updated
      Updated since last moderation
      .moderate-updated-fineprint
        Click the appropriate moderation, even if the evaluation hasn't changed
    (( } ))


    .moderatable-email
      %button.button
        Email content author

%script{ :type => "text/template", :id => 'tpl_dashboard_moderation_settings'}
  = form_for :account, :url => account_path, :remote => true, :method => :put, :html => { :class => 'dashboard-edit-account'} do |f|

    .field.l-expandable-option  
      = f.check_box :enable_moderation
      = f.label :enable_moderation, 'Enable Moderation'
      .sublabel
        Whether you wish to moderate user contributed content like comments and pro and con points. 

    .l-expandable-area
      - ['points', 'comments', 'proposals'].each do |model|
        %fieldset
          %legend
            #{model.capitalize} moderation settings

          .field          
            = f.radio_button "moderate_#{model}_mode", 0
            = f.label "moderate_#{model}_mode_0", "Do not moderate #{model.capitalize}"
          .field          
            = f.radio_button "moderate_#{model}_mode", 1
            = f.label "moderate_#{model}_mode_1", "Do not publicly post #{model.capitalize} until moderation"
          .field          
            = f.radio_button "moderate_#{model}_mode", 2
            = f.label "moderate_#{model}_mode_2", "Post #{model.capitalize} immediately, but withhold email notifications until moderation"
          .field          
            = f.radio_button "moderate_#{model}_mode", 3
            = f.label "moderate_#{model}_mode_3", "Post #{model.capitalize} immediately, catch bad ones afterwards"
    .save_block
      = f.submit 'Save', :class => 'button'
      %a.cancel{ :'action' => "dialog-close" }
        cancel  