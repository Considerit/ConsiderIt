{"version":3,"file":"index.umd.js","sources":["../src/utilities/index.ts","../src/forked-rebound/onFrame.js","../src/springSettings/index.ts","../src/forked-rebound/util.js","../src/forked-rebound/Loopers.js","../src/forked-rebound/Spring.js","../src/forked-rebound/SpringSystem.js","../src/flip/animateFlippedElements/spring/index.ts","../src/flip/animateFlippedElements/index.ts","../src/flip/getFlippedElementPositions/utilities.ts","../src/flip/index.ts","../src/flip/getFlippedElementPositions/getFlippedElementPositionsAfterUpdate/index.ts","../src/flip/animateUnflippedElements/index.ts","../src/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/index.ts","../src/Flipper.ts","../src/Spring/index.ts","../src/constants.ts"],"sourcesContent":["import { IndexableObject } from './types'\n\nexport const isNumber = (x: any) => typeof x === 'number'\n\nexport const isFunction = (x: any) => typeof x === 'function'\n\nexport const isObject = (x: any) =>\n  Object.prototype.toString.call(x) === '[object Object]'\n\nexport const toArray = (arrayLike: ArrayLike<any>) =>\n  Array.prototype.slice.apply(arrayLike)\n\nexport const getDuplicateValsAsStrings = (arr: string[]): string[] => {\n  const baseObj: IndexableObject = {}\n  const obj = arr.reduce((acc, curr) => {\n    acc[curr] = (acc[curr] || 0) + 1\n    return acc\n  }, baseObj)\n  return Object.keys(obj).filter(val => obj[val] > 1)\n}\n\n// tslint only likes this with a regular function, not an arrow function\nexport function assign(target: IndexableObject, ...args: IndexableObject[]) {\n  args.forEach(arg => {\n    if (!arg) {\n      return\n    }\n    // Skip over if undefined or null\n    for (const nextKey in arg) {\n      // Avoid bugs when hasOwnProperty is shadowed\n      if (Object.prototype.hasOwnProperty.call(arg, nextKey)) {\n        target[nextKey] = arg[nextKey]\n      }\n    }\n  })\n  return target\n}\n\nexport const tweenProp = (start: number, end: number, position: number) =>\n  start + (end - start) * position\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nlet _onFrame\nif (typeof window !== \"undefined\") {\n  _onFrame = window.requestAnimationFrame\n}\n\n_onFrame =\n  _onFrame ||\n  function(callback) {\n    window.setTimeout(callback, 1000 / 60)\n  }\n\nexport default _onFrame\n","import { isObject, assign } from '../utilities'\nimport { SpringPresets, SpringConfig, SpringOption } from './types'\n\n// adapted from\n// https://github.com/chenglou/react-motion/blob/master/src/presets.js\nexport const springPresets: SpringPresets = {\n  noWobble: { stiffness: 200, damping: 26 },\n  gentle: { stiffness: 120, damping: 14 },\n  veryGentle: { stiffness: 130, damping: 17 },\n  wobbly: { stiffness: 180, damping: 12 },\n  stiff: { stiffness: 260, damping: 26 }\n}\n\nfunction argIsSpringConfig(\n  arg: SpringConfig | keyof SpringPresets | undefined\n): arg is SpringConfig {\n  return isObject(arg)\n}\n\nexport const normalizeSpring = (\n  spring?: SpringConfig | keyof SpringPresets | any\n) => {\n  if (argIsSpringConfig(spring)) {\n    return spring\n  } else if (Object.keys(springPresets).indexOf(spring) > -1) {\n    return springPresets[spring]\n  } else {\n    return {}\n  }\n}\n\nexport const getSpringConfig = ({\n  flipperSpring,\n  flippedSpring\n}: { flipperSpring?: SpringOption; flippedSpring?: SpringOption } = {}) => {\n  return assign(\n    {},\n    springPresets.noWobble,\n    normalizeSpring(flipperSpring),\n    normalizeSpring(flippedSpring)\n  )\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nexport { default as onFrame } from './onFrame'\n\nconst start = Date.now()\nexport const performanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function'\n    ? () => performance.now()\n    : () => Date.now() - start\n\n// Lop off the first occurence of the reference in the Array.\nexport function removeFirst(array, item) {\n  const idx = array.indexOf(item)\n  idx !== -1 && array.splice(idx, 1)\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nimport { onFrame, performanceNow } from \"./util\"\n\n/**\n * Plays each frame of the SpringSystem on animation\n * timing loop. This is the default type of looper for a new spring system\n * as it is the most common when developing UI.\n * @public\n */\nexport class AnimationLooper {\n  run() {\n    onFrame(() => {\n      this.springSystem.loop(performanceNow())\n    })\n  }\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nimport { removeFirst } from './util'\n\nclass PhysicsState {\n  constructor() {\n    this.position = 0\n    this.velocity = 0\n  }\n}\n\nlet ID = 0\nconst MAX_DELTA_TIME_SEC = 0.064\nconst SOLVER_TIMESTEP_SEC = 0.001\n\n/**\n * Provides a model of a classical spring acting to\n * resolve a body to equilibrium. Springs have configurable\n * tension which is a force multipler on the displacement of the\n * spring from its rest point or `endValue` as defined by [Hooke's\n * law](http://en.wikipedia.org/wiki/Hooke's_law). Springs also have\n * configurable friction, which ensures that they do not oscillate\n * infinitely. When a Spring is displaced by updating it's resting\n * or `currentValue`, the SpringSystems that contain that Spring\n * will automatically start looping to solve for equilibrium. As each\n * timestep passes, `SpringListener` objects attached to the Spring\n * will be notified of the updates providing a way to drive an\n * animation off of the spring's resolution curve.\n * @public\n */\nclass Spring {\n  constructor(springSystem) {\n    this._id = `s${ID++}`\n    this._springSystem = springSystem\n\n    this.listeners = []\n    this._startValue = 0\n\n    this._currentState = new PhysicsState()\n    this._displacementFromRestThreshold = 0.001\n    this._endValue = 0\n    this._overshootClampingEnabled = false\n    this._previousState = new PhysicsState()\n    this._restSpeedThreshold = 0.001\n\n    this._tempState = new PhysicsState()\n    this._timeAccumulator = 0\n    this._wasAtRest = true\n    // hack from alex -- only call 1x\n    this._onActivateCalled\n    this._cachedSpringConfig = {}\n  }\n\n  getId() {\n    return this._id\n  }\n\n  /**\n   * Remove a Spring from simulation and clear its listeners.\n   * @public\n   */\n  destroy() {\n    this.listeners = []\n    this._springSystem.deregisterSpring(this)\n  }\n\n  /**\n   * Set the configuration values for this Spring. A SpringConfig\n   * contains the tension and friction values used to solve for the\n   * equilibrium of the Spring in the physics loop.\n   * @public\n   */\n  setSpringConfig(springConfig) {\n    this._springConfig = springConfig\n    return this\n  }\n  /**\n   * Retrieve the current value of the Spring.\n   * @public\n   */\n  getCurrentValue() {\n    return this._currentState.position\n  }\n\n  /**\n   * Get the absolute distance of the Spring from a given state value\n   */\n  getDisplacementDistanceForState(state) {\n    return Math.abs(this._endValue - state.position)\n  }\n\n  /**\n   * Set the endValue or resting position of the spring. If this\n   * value is different than the current value, the SpringSystem will\n   * be notified and will begin running its solver loop to resolve\n   * the Spring to equilibrium. Any listeners that are registered\n   * for onSpringEndStateChange will also be notified of this update\n   * immediately.\n   * @public\n   */\n\n  setEndValue(endValue) {\n    if (endValue === this._endValue) return this\n    this.prevEndValue = endValue\n    if (this._endValue === endValue && this.isAtRest()) {\n      return this\n    }\n    this._startValue = this.getCurrentValue()\n    this._endValue = endValue\n    this._springSystem.activateSpring(this.getId())\n    for (let i = 0, len = this.listeners.length; i < len; i++) {\n      const listener = this.listeners[i]\n      const onChange = listener.onSpringEndStateChange\n      onChange && onChange(this)\n    }\n    return this\n  }\n\n  /**\n   * Set the current velocity of the Spring, in pixels per second. As\n   * previously mentioned, this can be useful when you are performing\n   * a direct manipulation gesture. When a UI element is released you\n   * may call setVelocity on its animation Spring so that the Spring\n   * continues with the same velocity as the gesture ended with. The\n   * friction, tension, and displacement of the Spring will then\n   * govern its motion to return to rest on a natural feeling curve.\n   * @public\n   */\n  setVelocity(velocity) {\n    if (velocity === this._currentState.velocity) {\n      return this\n    }\n    this._currentState.velocity = velocity\n    this._springSystem.activateSpring(this.getId())\n    return this\n  }\n\n  setCurrentValue(currentValue) {\n    this._startValue = currentValue\n    this._currentState.position = currentValue\n    for (var i = 0, len = this.listeners.length; i < len; i++) {\n      var listener = this.listeners[i]\n      listener.onSpringUpdate && listener.onSpringUpdate(this)\n    }\n    return this\n  }\n\n  setAtRest() {\n    this._endValue = this._currentState.position\n    this._tempState.position = this._currentState.position\n    this._currentState.velocity = 0\n    return this\n  }\n\n  /**\n   * Enable overshoot clamping. This means that the Spring will stop\n   * immediately when it reaches its resting position regardless of\n   * any existing momentum it may have. This can be useful for certain\n   * types of animations that should not oscillate such as a scale\n   * down to 0 or alpha fade.\n   * @public\n   */\n  setOvershootClampingEnabled(enabled) {\n    this._overshootClampingEnabled = enabled\n    return this\n  }\n\n  /**\n   * Check if the Spring has gone past its end point by comparing\n   * the direction it was moving in when it started to the current\n   * position and end value.\n   * @public\n   */\n  isOvershooting() {\n    const start = this._startValue\n    const end = this._endValue\n    return (\n      this._springConfig.tension > 0 &&\n      ((start < end && this.getCurrentValue() > end) ||\n        (start > end && this.getCurrentValue() < end))\n    )\n  }\n\n  /**\n   * The main solver method for the Spring. It takes\n   * the current time and delta since the last time step and performs\n   * an RK4 integration to get the new position and velocity state\n   * for the Spring based on the tension, friction, velocity, and\n   * displacement of the Spring.\n   * @public\n   */\n  advance(time, realDeltaTime) {\n    let isAtRest = this.isAtRest()\n\n    if (isAtRest && this._wasAtRest) {\n      return\n    }\n\n    let adjustedDeltaTime = realDeltaTime\n    if (realDeltaTime > MAX_DELTA_TIME_SEC) {\n      adjustedDeltaTime = MAX_DELTA_TIME_SEC\n    }\n\n    this._timeAccumulator += adjustedDeltaTime\n\n    const tension = this._springConfig.tension\n    const friction = this._springConfig.friction\n    let position = this._currentState.position\n    let velocity = this._currentState.velocity\n    let tempPosition = this._tempState.position\n    let tempVelocity = this._tempState.velocity\n    let aVelocity\n    let aAcceleration\n    let bVelocity\n    let bAcceleration\n    let cVelocity\n    let cAcceleration\n    let dVelocity\n    let dAcceleration\n    let dxdt\n    let dvdt\n\n    while (this._timeAccumulator >= SOLVER_TIMESTEP_SEC) {\n      this._timeAccumulator -= SOLVER_TIMESTEP_SEC\n\n      if (this._timeAccumulator < SOLVER_TIMESTEP_SEC) {\n        this._previousState.position = position\n        this._previousState.velocity = velocity\n      }\n\n      aVelocity = velocity\n      aAcceleration =\n        tension * (this._endValue - tempPosition) - friction * velocity\n\n      tempPosition = position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5\n      tempVelocity = velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5\n      bVelocity = tempVelocity\n      bAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      tempPosition = position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5\n      tempVelocity = velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5\n      cVelocity = tempVelocity\n      cAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      tempPosition = position + cVelocity * SOLVER_TIMESTEP_SEC\n      tempVelocity = velocity + cAcceleration * SOLVER_TIMESTEP_SEC\n      dVelocity = tempVelocity\n      dAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      dxdt =\n        (1.0 / 6.0) * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity)\n      dvdt =\n        (1.0 / 6.0) *\n        (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration)\n\n      position += dxdt * SOLVER_TIMESTEP_SEC\n      velocity += dvdt * SOLVER_TIMESTEP_SEC\n    }\n\n    this._tempState.position = tempPosition\n    this._tempState.velocity = tempVelocity\n\n    this._currentState.position = position\n    this._currentState.velocity = velocity\n\n    if (this._timeAccumulator > 0) {\n      this._interpolate(this._timeAccumulator / SOLVER_TIMESTEP_SEC)\n    }\n\n    if (\n      this.isAtRest() ||\n      (this._overshootClampingEnabled && this.isOvershooting())\n    ) {\n      if (this._springConfig.tension > 0) {\n        this._startValue = this._endValue\n        this._currentState.position = this._endValue\n      } else {\n        this._endValue = this._currentState.position\n        this._startValue = this._endValue\n      }\n      this.setVelocity(0)\n      isAtRest = true\n    }\n\n    let notifyActivate = false\n    if (this._wasAtRest) {\n      this._wasAtRest = false\n      notifyActivate = true\n    }\n\n    let notifyAtRest = false\n    if (isAtRest) {\n      this._wasAtRest = true\n      notifyAtRest = true\n    }\n\n    this.notifyPositionUpdated(notifyActivate, notifyAtRest)\n  }\n\n  notifyPositionUpdated(notifyActivate, notifyAtRest) {\n    this.listeners.filter(Boolean).forEach(listener => {\n      if (\n        notifyActivate &&\n        listener.onSpringActivate &&\n        !this._onActivateCalled\n      ) {\n        listener.onSpringActivate(this)\n        this._onActivateCalled = true\n      }\n\n      if (listener.onSpringUpdate) {\n        listener.onSpringUpdate(this)\n      }\n\n      if (notifyAtRest && listener.onSpringAtRest) {\n        listener.onSpringAtRest(this)\n      }\n    })\n  }\n\n  /**\n   * Check if the SpringSystem should advance. Springs are advanced\n   * a final frame after they reach equilibrium to ensure that the\n   * currentValue is exactly the requested endValue regardless of the\n   * displacement threshold.\n   * @public\n   */\n  systemShouldAdvance() {\n    return !this.isAtRest() || !this.wasAtRest()\n  }\n\n  wasAtRest() {\n    return this._wasAtRest\n  }\n\n  /**\n   * Check if the Spring is atRest meaning that it's currentValue and\n   * endValue are the same and that it has no velocity. The previously\n   * described thresholds for speed and displacement define the bounds\n   * of this equivalence check. If the Spring has 0 tension, then it will\n   * be considered at rest whenever its absolute velocity drops below the\n   * restSpeedThreshold.\n   * @public\n   */\n  isAtRest() {\n    const isAtRest =\n      Math.abs(this._currentState.velocity) < this._restSpeedThreshold &&\n      (this.getDisplacementDistanceForState(this._currentState) <=\n        this._displacementFromRestThreshold ||\n        this._springConfig.tension === 0)\n    return isAtRest\n  }\n\n  _interpolate(alpha) {\n    this._currentState.position =\n      this._currentState.position * alpha +\n      this._previousState.position * (1 - alpha)\n    this._currentState.velocity =\n      this._currentState.velocity * alpha +\n      this._previousState.velocity * (1 - alpha)\n  }\n\n  addListener(newListener) {\n    this.listeners.push(newListener)\n    return this\n  }\n\n  addOneTimeListener(newListener) {\n    const oneTimeFunc = func => (...args) => {\n      func(...args)\n      this.removeListener(newListener)\n    }\n    Object.keys(newListener).forEach(key => {\n      newListener[key] = oneTimeFunc(newListener[key])\n    })\n    this.listeners.push(newListener)\n    return this\n  }\n\n  removeListener(listenerToRemove) {\n    removeFirst(this.listeners, listenerToRemove)\n    return this\n  }\n}\n\nexport default Spring\n","//\n/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\nimport { AnimationLooper } from './Loopers'\nimport Spring from './Spring'\nimport { removeFirst } from './util'\n\n/**\n * A set of Springs that all run on the same physics\n * timing loop. To get started with a Rebound animation, first\n * create a new SpringSystem and then add springs to it.\n * @public\n */\nclass SpringSystem {\n  constructor(looper) {\n    this.looper = looper || new AnimationLooper()\n    this.looper.springSystem = this\n\n    this.listeners = []\n    this._activeSprings = []\n    this._idleSpringIndices = []\n    this._isIdle = true\n    this._lastTimeMillis = -1\n    this._springRegistry = {}\n  }\n\n  /**\n   * Add a new spring to this SpringSystem. This Spring will now be solved for\n   * during the physics iteration loop. By default the spring will use the\n   * default Origami spring config with 40 tension and 7 friction, but you can\n   * also provide your own values here.\n   * @public\n   */\n  createSpring(tension, friction) {\n    return this.createSpringWithConfig({ tension, friction })\n  }\n  /**\n   * Add a spring with the provided SpringConfig.\n   * @public\n   */\n  createSpringWithConfig(springConfig) {\n    const spring = new Spring(this)\n    this.registerSpring(spring)\n    spring.setSpringConfig(springConfig)\n    return spring\n  }\n\n  /**\n   * Check if a SpringSystem is idle or active. If all of the Springs in the\n   * SpringSystem are at rest, i.e. the physics forces have reached equilibrium,\n   * then this method will return true.\n   * @public\n   */\n  getIsIdle() {\n    return this._isIdle\n  }\n\n  /**\n   * Manually add a spring to this system. This is called automatically\n   * if a Spring is created with SpringSystem#createSpring.\n   *\n   * This method sets the spring up in the registry so that it can be solved\n   * in the solver loop.\n   * @public\n   */\n  registerSpring(spring) {\n    this._springRegistry[spring.getId()] = spring\n  }\n\n  /**\n   * Deregister a spring with this SpringSystem. The SpringSystem will\n   * no longer consider this Spring during its integration loop once\n   * this is called. This is normally done automatically for you when\n   * you call Spring#destroy.\n   * @public\n   */\n  deregisterSpring(spring) {\n    removeFirst(this._activeSprings, spring)\n    delete this._springRegistry[spring.getId()]\n  }\n\n  advance(time, deltaTime) {\n    while (this._idleSpringIndices.length > 0) {\n      this._idleSpringIndices.pop()\n    }\n    this._activeSprings.filter(Boolean).forEach(spring => {\n      if (spring.systemShouldAdvance()) {\n        spring.advance(time / 1000.0, deltaTime / 1000.0)\n      } else {\n        this._idleSpringIndices.push(this._activeSprings.indexOf(spring))\n      }\n    })\n\n    while (this._idleSpringIndices.length > 0) {\n      const idx = this._idleSpringIndices.pop()\n      idx >= 0 && this._activeSprings.splice(idx, 1)\n    }\n  }\n\n  /**\n   * This is the main solver loop called to move the simulation\n   * forward through time. Before each pass in the solver loop\n   * onBeforeIntegrate is called on an any listeners that have\n   * registered themeselves with the SpringSystem. This gives you\n   * an opportunity to apply any constraints or adjustments to\n   * the springs that should be enforced before each iteration\n   * loop. Next the advance method is called to move each Spring in\n   * the systemShouldAdvance forward to the current time. After the\n   * integration step runs in advance, onAfterIntegrate is called\n   * on any listeners that have registered themselves with the\n   * SpringSystem. This gives you an opportunity to run any post\n   * integration constraints or adjustments on the Springs in the\n   * SpringSystem.\n   * @public\n   */\n  loop(currentTimeMillis) {\n    let listener\n    if (this._lastTimeMillis === -1) {\n      this._lastTimeMillis = currentTimeMillis - 1\n    }\n    const ellapsedMillis = currentTimeMillis - this._lastTimeMillis\n    this._lastTimeMillis = currentTimeMillis\n\n    let i = 0\n    const len = this.listeners.length\n    for (i = 0; i < len; i++) {\n      listener = this.listeners[i]\n      listener.onBeforeIntegrate && listener.onBeforeIntegrate(this)\n    }\n\n    this.advance(currentTimeMillis, ellapsedMillis)\n    if (this._activeSprings.length === 0) {\n      this._isIdle = true\n      this._lastTimeMillis = -1\n    }\n\n    for (i = 0; i < len; i++) {\n      listener = this.listeners[i]\n      listener.onAfterIntegrate && listener.onAfterIntegrate(this)\n    }\n\n    if (!this._isIdle) {\n      this.looper.run()\n    }\n  }\n\n  /**\n   * Used to notify the SpringSystem that a Spring has become displaced.\n   * The system responds by starting its solver loop up if it is currently idle.\n   */\n  activateSpring(springId) {\n    const spring = this._springRegistry[springId]\n    if (this._activeSprings.indexOf(spring) === -1) {\n      this._activeSprings.push(spring)\n    }\n    if (this.getIsIdle()) {\n      this._isIdle = false\n      this.looper.run()\n    }\n  }\n}\n\nexport default SpringSystem\n","import { SpringSystem } from '../../../forked-rebound'\nimport { StaggerConfigValue } from '../../../types'\nimport { FlipData, FlipDataArray } from '../types'\nimport {\n  SpringSystemInterface,\n  AddListenerArgs\n} from '../../../forked-rebound/types'\n\n// this should get created only 1x\nconst springSystem: SpringSystemInterface = new SpringSystem()\n\nexport const createSuspendedSpring = (flipData: FlipData) => {\n  const {\n    springConfig: { stiffness, damping, overshootClamping },\n    getOnUpdateFunc,\n    onAnimationEnd,\n    onSpringActivate\n  } = flipData\n\n  const spring = springSystem.createSpring(stiffness!, damping!)\n  spring.setOvershootClampingEnabled(!!overshootClamping)\n  const onSpringAtRest = () => {\n    // prevent SpringSystem from caching unused springs\n    spring.destroy()\n    onAnimationEnd()\n  }\n\n  const springConfig: AddListenerArgs = {\n    onSpringActivate,\n    onSpringAtRest,\n    onSpringUpdate: getOnUpdateFunc({\n      spring,\n      onAnimationEnd\n    })\n  }\n\n  spring.addListener(springConfig)\n  return spring\n}\n\nexport const createSpring = (flipped: FlipData) => {\n  const spring = createSuspendedSpring(flipped)\n  spring.setEndValue(1)\n  return spring\n}\n\nexport const normalizeSpeed = (speedConfig: number | undefined) => {\n  if (typeof speedConfig !== 'number') return 1.1\n  return 1 + Math.min(Math.max(speedConfig * 5, 0), 5)\n}\n\nexport const createStaggeredSprings = (\n  flippedArray: FlipDataArray,\n  staggerConfig: StaggerConfigValue = {}\n) => {\n  if (!flippedArray || !flippedArray.length) {\n    return\n  }\n\n  if (staggerConfig.reverse) {\n    flippedArray.reverse()\n  }\n\n  const normalizedSpeed = normalizeSpeed(staggerConfig.speed)\n\n  const nextThreshold = 1 / Math.max(Math.min(flippedArray.length, 100), 10)\n\n  const setEndValueFuncs = flippedArray\n    .map((flipped, i) => {\n      const cachedGetOnUpdate = flipped.getOnUpdateFunc\n\n      // modify the update function to adjust\n      // the end value of the trailing Flipped component\n      flipped.getOnUpdateFunc = args => {\n        const onUpdate = cachedGetOnUpdate(args)\n        return spring => {\n          let currentValue = spring.getCurrentValue()\n          // make sure trailing animations complete\n          currentValue =\n            currentValue < 0.01 ? 0 : currentValue > 0.99 ? 1 : currentValue\n\n          const updateTrailingAnimation = currentValue >= nextThreshold\n          if (updateTrailingAnimation) {\n            if (setEndValueFuncs[i + 1]) {\n              setEndValueFuncs[i + 1]!(\n                Math.max(Math.min(currentValue * normalizedSpeed, 1), 0)\n              )\n            }\n          }\n          // now call the actual update function\n          onUpdate(spring)\n        }\n      }\n      return flipped\n    })\n    .map(flipped => {\n      const spring = createSuspendedSpring(flipped)\n      if (!spring) {\n        return\n      }\n      return spring.setEndValue.bind(spring)\n    })\n    .filter(Boolean)\n\n  if (setEndValueFuncs[0]) {\n    setEndValueFuncs[0]!(1)\n  }\n}\n","import * as Rematrix from 'rematrix'\nimport { getSpringConfig } from '../../springSettings'\nimport {\n  toArray,\n  isFunction,\n  isNumber,\n  getDuplicateValsAsStrings,\n  assign,\n  tweenProp\n} from '../../utilities'\nimport * as constants from '../../constants'\nimport {\n  GetOnUpdateFunc,\n  OnUpdate,\n  Matrix,\n  InvertedChildren,\n  AnimateFlippedElementsArgs,\n  AnimatedVals,\n  FlipDataArray,\n  FlipData,\n  InitializeFlip\n} from './types'\nimport { BoundingClientRect } from '../getFlippedElementPositions/types'\nimport { FlippedIds } from '../types'\nimport { createSpring, createStaggeredSprings } from './spring'\nimport { IndexableObject } from '../../utilities/types'\nimport { FlipId } from '../../types'\n\n// 3d transforms were causing weird issues in chrome,\n// especially when opacity was also being tweened,\n// so convert to a 2d matrix\nexport const convertMatrix3dArrayTo2dArray = (matrix: Matrix): Matrix =>\n  [0, 1, 4, 5, 12, 13].map(index => matrix[index])\n\nexport const convertMatrix2dArrayToString = (matrix: Matrix) =>\n  `matrix(${matrix.join(', ')})`\n\nexport const invertTransformsForChildren = ({\n  invertedChildren,\n  matrix,\n  body\n}: {\n  matrix: Matrix\n  body: HTMLBodyElement\n  invertedChildren: InvertedChildren\n}) => {\n  invertedChildren.forEach(([child, childFlipConfig]) => {\n    if (!body.contains(child)) {\n      return\n    }\n    const scaleX = matrix[0]\n    const scaleY = matrix[3]\n    const translateX = matrix[4]\n    const translateY = matrix[5]\n\n    const inverseVals = { translateX: 0, translateY: 0, scaleX: 1, scaleY: 1 }\n    let transformString = ''\n    if (childFlipConfig.translate) {\n      inverseVals.translateX = -translateX / scaleX\n      inverseVals.translateY = -translateY / scaleY\n      transformString += `translate(${inverseVals.translateX}px, ${inverseVals.translateY}px)`\n    }\n    if (childFlipConfig.scale) {\n      inverseVals.scaleX = 1 / scaleX\n      inverseVals.scaleY = 1 / scaleY\n      transformString += ` scale(${inverseVals.scaleX}, ${inverseVals.scaleY})`\n    }\n    child.style.transform = transformString\n  })\n}\n\nexport const createApplyStylesFunc = ({\n  element,\n  invertedChildren,\n  body\n}: {\n  element: HTMLElement\n  invertedChildren: InvertedChildren\n  body: HTMLBodyElement\n}) => ({\n  matrix,\n  opacity,\n  forceMinVals\n}: {\n  matrix: Matrix\n  opacity?: number\n  forceMinVals?: boolean\n}) => {\n  if (isNumber(opacity)) {\n    element.style.opacity = opacity + ''\n  }\n\n  if (forceMinVals) {\n    element.style.minHeight = '1px'\n    element.style.minWidth = '1px'\n  }\n\n  if (!matrix) {\n    return\n  }\n\n  const stringTransform = convertMatrix2dArrayToString(matrix)\n\n  // always apply transform, even if identity,\n  // because identity might be the starting state in a FLIP\n  // transition, if the element's position is controlled by transforms\n  element.style.transform = stringTransform\n\n  if (invertedChildren) {\n    invertTransformsForChildren({\n      invertedChildren,\n      matrix,\n      body\n    })\n  }\n}\n\nexport const rectInViewport = ({\n  top,\n  bottom,\n  left,\n  right\n}: BoundingClientRect) => {\n  return (\n    top < window.innerHeight &&\n    bottom > 0 &&\n    left < window.innerWidth &&\n    right > 0\n  )\n}\n\nconst getInvertedChildren = (element: HTMLElement, id: string) =>\n  toArray(\n    element.querySelectorAll(`[${constants.DATA_INVERSE_FLIP_ID}=\"${id}\"]`)\n  )\n\nfunction extractFlipConfig(element: HTMLElement) {\n  const flipConfig = JSON.parse(element.dataset.flipConfig || '{}')\n  return flipConfig\n}\n\nexport default ({\n  flippedIds,\n  flipCallbacks,\n  inProgressAnimations,\n  flippedElementPositionsBeforeUpdate,\n  flippedElementPositionsAfterUpdate,\n  applyTransformOrigin,\n  spring,\n  getElement,\n  debug,\n  staggerConfig = {},\n  decisionData = {},\n  onComplete,\n  containerEl\n}: AnimateFlippedElementsArgs) => {\n  // the stuff below is used so we can return a promise that resolves when all FLIP animations have\n  // completed\n  let closureResolve: (flipIds: FlippedIds) => void\n\n  const flipCompletedPromise: Promise<FlippedIds> = new Promise(resolve => {\n    closureResolve = resolve\n  })\n  // hook for users of lib to attach logic when all flip animations have completed\n  if (onComplete) {\n    flipCompletedPromise.then(() => onComplete(containerEl, decisionData))\n  }\n  if (!flippedIds.length) {\n    return () => {\n      closureResolve!([])\n      return flipCompletedPromise\n    }\n  }\n\n  const completedAnimationIds: FlippedIds = []\n\n  const firstElement: HTMLElement = getElement(flippedIds[0])\n  // special handling for iframes\n  const body = firstElement\n    ? firstElement.ownerDocument!.querySelector('body')!\n    : document.querySelector('body')!\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (debug) {\n      // eslint-disable-next-line no-console\n      console.error(\n        '[react-flip-toolkit]\\nThe \"debug\" prop is set to true. All FLIP animations will return at the beginning of the transition.'\n      )\n    }\n  }\n\n  const duplicateFlipIds = getDuplicateValsAsStrings(flippedIds)\n  if (process.env.NODE_ENV !== 'production') {\n    if (duplicateFlipIds.length) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `[react-flip-toolkit]\\nThere are currently multiple elements with the same flipId on the page.\\nThe animation will only work if each Flipped component has a unique flipId.\\nDuplicate flipId${\n          duplicateFlipIds.length > 1 ? 's' : ''\n        }: ${duplicateFlipIds.join('\\n')}`\n      )\n    }\n  }\n\n  const flipDataArray: FlipDataArray = flippedIds\n\n    // take all the measurements we need\n    // and return an object with animation functions + necessary data\n    .map(id => {\n      const prevRect = flippedElementPositionsBeforeUpdate[id].rect\n      const currentRect = flippedElementPositionsAfterUpdate[id].rect\n      const prevOpacity = flippedElementPositionsBeforeUpdate[id].opacity\n      const currentOpacity = flippedElementPositionsAfterUpdate[id].opacity\n      const needsForcedMinVals = currentRect.width < 1 || currentRect.height < 1\n      const element = flippedElementPositionsAfterUpdate[id].element\n\n      // don't animate elements outside of the user's viewport\n      if (!rectInViewport(prevRect) && !rectInViewport(currentRect)) {\n        return false\n      }\n\n      // this might happen if we are rapidly adding & removing elements(?)\n      if (!element) {\n        return false\n      }\n\n      const flipConfig = extractFlipConfig(element)\n\n      const springConfig = getSpringConfig({\n        flipperSpring: spring,\n        flippedSpring: flipConfig.spring\n      })\n\n      const stagger =\n        flipConfig.stagger === true ? 'default' : flipConfig.stagger\n\n      const toReturn = {\n        element,\n        id,\n        stagger,\n        springConfig\n      }\n\n      if (flipCallbacks[id] && flipCallbacks[id].shouldFlip) {\n        const elementShouldFlip = flipCallbacks[id].shouldFlip!(\n          decisionData.previous,\n          decisionData.current\n        )\n        if (!elementShouldFlip) {\n          return false\n        }\n      }\n\n      // don't animate elements that didn't visibly change\n      // but possibly animate their children\n\n      const translateXDifference = Math.abs(prevRect.left - currentRect.left)\n      const translateYDifference = Math.abs(prevRect.top - currentRect.top)\n\n      const translateDifference = translateXDifference + translateYDifference\n\n      const scaleXDifference = Math.abs(prevRect.width - currentRect.width)\n      const scaleYDifference = Math.abs(prevRect.height - currentRect.height)\n\n      const scaleDifference = scaleXDifference + scaleYDifference\n\n      const opacityDifference = Math.abs(currentOpacity - prevOpacity)\n      const differenceTooSmall =\n        translateDifference < 0.5 &&\n        scaleDifference < 0.5 &&\n        opacityDifference < 0.01\n\n      const hiddenDueToDimensions =\n        (prevRect.height === 0 && currentRect.height === 0) ||\n        (prevRect.width === 0 && currentRect.width === 0)\n      if (hiddenDueToDimensions || differenceTooSmall) {\n        return false\n      }\n\n      const currentTransform = Rematrix.parse(\n        flippedElementPositionsAfterUpdate[id].transform\n      )\n\n      const toVals: AnimatedVals = { matrix: currentTransform }\n\n      const fromVals: AnimatedVals = { matrix: [] }\n      const transformsArray = [currentTransform]\n\n      // we're only going to animate the values that the child wants animated\n      if (flipConfig.translate) {\n        transformsArray.push(\n          Rematrix.translateX(prevRect.left - currentRect.left)\n        )\n        transformsArray.push(\n          Rematrix.translateY(prevRect.top - currentRect.top)\n        )\n      }\n      // going any smaller than 1px breaks transitions in Chrome\n      if (flipConfig.scale) {\n        transformsArray.push(\n          Rematrix.scaleX(\n            Math.max(prevRect.width, 1) / Math.max(currentRect.width, 1)\n          )\n        )\n        transformsArray.push(\n          Rematrix.scaleY(\n            Math.max(prevRect.height, 1) / Math.max(currentRect.height, 1)\n          )\n        )\n      }\n\n      if (flipConfig.opacity) {\n        fromVals.opacity = prevOpacity\n        toVals.opacity = currentOpacity\n      }\n\n      let invertedChildren: InvertedChildren = []\n\n      if (\n        !flipCallbacks[id] ||\n        !flipCallbacks[id].shouldInvert ||\n        flipCallbacks[id].shouldInvert!(\n          decisionData.previous,\n          decisionData.current\n        )\n      ) {\n        const invertedChildElements = getInvertedChildren(element, id)\n        invertedChildren = invertedChildElements.map(c => [\n          c,\n          extractFlipConfig(c)\n        ]) as InvertedChildren\n      }\n\n      fromVals.matrix = convertMatrix3dArrayTo2dArray(\n        transformsArray.reduce(Rematrix.multiply)\n      )\n\n      toVals.matrix = convertMatrix3dArrayTo2dArray(toVals.matrix)\n\n      const applyStyles = createApplyStylesFunc({\n        element,\n        invertedChildren,\n        body\n      })\n\n      let onComplete: () => void\n      if (flipCallbacks[id] && flipCallbacks[id].onComplete) {\n        // must cache or else this could cause an error\n        const cachedOnComplete = flipCallbacks[id].onComplete\n        onComplete = () => cachedOnComplete!(element, decisionData)\n      }\n\n      // this should be called when animation ends naturally\n      // but also when it is interrupted\n      // when it is called, the animation has already been cancelled\n      const onAnimationEnd = (isCancellation: boolean) => {\n        delete inProgressAnimations[id]\n        if (isFunction(onComplete)) {\n          onComplete()\n        }\n        // remove identity transform -- this should have no effect on layout\n        element.style.transform = ''\n        invertedChildren.forEach(([element]) => {\n          element.style.transform = ''\n        })\n        if (needsForcedMinVals && element) {\n          element.style.minHeight = ''\n          element.style.minWidth = ''\n        }\n        if (isCancellation) return\n\n        completedAnimationIds.push(id)\n\n        if (completedAnimationIds.length >= flipDataArray.length) {\n          // we can theoretically call multiple times since a promise only resolves 1x\n          // but that shouldnt happen\n          closureResolve(completedAnimationIds)\n        }\n      }\n\n      const animateOpacity =\n        isNumber(fromVals.opacity) &&\n        isNumber(toVals.opacity) &&\n        fromVals.opacity !== toVals.opacity\n\n      let onStartCalled = false\n\n      const getOnUpdateFunc: GetOnUpdateFunc = ({ spring, onAnimationEnd }) => {\n        inProgressAnimations[id] = {\n          destroy: spring.destroy.bind(spring),\n          onAnimationEnd\n        }\n        const onUpdate: OnUpdate = spring => {\n          if (flipCallbacks[id] && flipCallbacks[id].onSpringUpdate) {\n            flipCallbacks[id].onSpringUpdate!(spring.getCurrentValue())\n          }\n          // trigger the user provided onStart function\n          if (!onStartCalled) {\n            onStartCalled = true\n            if (flipCallbacks[id] && flipCallbacks[id].onStart) {\n              flipCallbacks[id].onStart!(element, decisionData)\n            }\n          }\n\n          const currentValue = spring.getCurrentValue()\n          if (!body.contains(element)) {\n            spring.destroy()\n            return\n          }\n\n          const vals: AnimatedVals = { matrix: [] }\n\n          vals.matrix = fromVals.matrix.map((fromVal, index) =>\n            tweenProp(fromVal, toVals.matrix[index], currentValue)\n          )\n\n          if (animateOpacity) {\n            vals.opacity = tweenProp(\n              fromVals.opacity!,\n              toVals.opacity!,\n              currentValue\n            )\n          }\n          applyStyles(vals)\n        }\n        return onUpdate\n      }\n\n      const initializeFlip: InitializeFlip = () => {\n        // before animating, immediately apply FLIP styles to prevent flicker\n        applyStyles({\n          matrix: fromVals.matrix,\n          opacity: animateOpacity ? fromVals.opacity : undefined,\n          forceMinVals: needsForcedMinVals\n        })\n\n        if (flipCallbacks[id] && flipCallbacks[id].onStartImmediate) {\n          flipCallbacks[id].onStartImmediate!(element, decisionData)\n        }\n        // and batch any other style updates if necessary\n        if (flipConfig.transformOrigin) {\n          element.style.transformOrigin = flipConfig.transformOrigin\n        } else if (applyTransformOrigin) {\n          element.style.transformOrigin = '0 0'\n        }\n\n        invertedChildren.forEach(([child, childFlipConfig]) => {\n          if (childFlipConfig.transformOrigin) {\n            child.style.transformOrigin = childFlipConfig.transformOrigin\n          } else if (applyTransformOrigin) {\n            child.style.transformOrigin = '0 0'\n          }\n        })\n      }\n\n      return assign({}, toReturn, {\n        stagger,\n        springConfig,\n        getOnUpdateFunc,\n        initializeFlip,\n        onAnimationEnd,\n        delayUntil: flipConfig.delayUntil\n      }) as FlipData\n    })\n    // filter out data for all non-animated elements first\n    .filter(Boolean) as FlipDataArray\n\n  flipDataArray.forEach(({ initializeFlip }) => initializeFlip())\n\n  if (debug) {\n    return () => {}\n  }\n\n  const elementIsFlipped = (flipId: FlipId) =>\n    flipDataArray.filter(f => f.id === flipId).length\n\n  const delayedFlip = flipDataArray.filter(\n    f => f.delayUntil && elementIsFlipped(f.delayUntil)\n  )\n\n  // key: flipId value: flip to delay until key is called\n  const delayUntilSprings = {} as IndexableObject\n  // key: flipId value: stagger to delay until key is called\n  const delayUntilStaggers = {} as IndexableObject\n  // key: stagger value: true\n  const delayedStaggerKeys = {} as IndexableObject\n\n  delayedFlip.forEach(flip => {\n    if (flip.stagger) {\n      delayedStaggerKeys[flip.stagger] = true\n      if (delayUntilStaggers[flip.delayUntil!])\n        delayUntilStaggers[flip.delayUntil!].push(flip.stagger)\n      else delayUntilStaggers[flip.delayUntil!] = [flip.stagger]\n    } else {\n      if (delayUntilSprings[flip.delayUntil!])\n        delayUntilSprings[flip.delayUntil!].push(flip)\n      else delayUntilSprings[flip.delayUntil!] = [flip]\n    }\n  })\n\n  const staggerDict = flipDataArray\n    .filter(flipData => flipData.stagger)\n    .reduce((acc, curr) => {\n      if (acc[curr.stagger]) {\n        acc[curr.stagger].push(curr)\n      } else {\n        acc[curr.stagger] = [curr]\n      }\n      return acc\n    }, {} as IndexableObject)\n\n  const immediateFlip = flipDataArray.filter(f => delayedFlip.indexOf(f) === -1)\n\n  immediateFlip.forEach(flipData => {\n    flipData.onSpringActivate = () => {\n      if (delayUntilSprings[flipData.id]) {\n        delayUntilSprings[flipData.id].forEach(createSpring)\n      }\n      if (delayUntilStaggers[flipData.id]) {\n        const uniqueStaggerKeys = Object.keys(\n          delayUntilStaggers[flipData.id].reduce(\n            (acc: IndexableObject, curr: string) =>\n              assign(acc, { [curr]: true }),\n            {}\n          )\n        )\n        uniqueStaggerKeys.forEach((staggerKey: string) => {\n          createStaggeredSprings(\n            staggerDict[staggerKey],\n            staggerConfig[staggerKey]\n          )\n        })\n      }\n    }\n  })\n\n  return () => {\n    // if there are no active FLIP animations, immediately resolve the\n    // returned promise\n    if (!flipDataArray.length) {\n      closureResolve([])\n    }\n    // animate non-staggered elements\n    immediateFlip\n      .filter(flipData => {\n        return !flipData.stagger\n      })\n      .forEach(createSpring)\n\n    // animate staggered elements\n    Object.keys(staggerDict).forEach(staggerKey => {\n      if (delayedStaggerKeys[staggerKey]) return\n      createStaggeredSprings(staggerDict[staggerKey], staggerConfig[staggerKey])\n    })\n    return flipCompletedPromise\n  }\n}\n","import { toArray, assign } from '../../utilities'\nimport * as constants from '../../constants'\nimport { BoundingClientRect } from './types'\n\nexport const addTupleToObject = <T>(\n  acc: Record<string, T>,\n  curr: [string, T]\n): Record<string, T> => assign(acc, { [curr[0]]: curr[1] })\n\nexport const getAllElements = (\n  element?: HTMLElement,\n  portalKey?: string\n): HTMLElement[] => {\n  if (portalKey) {\n    return toArray(\n      document.querySelectorAll(`[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]`)\n    )\n  } else {\n    return toArray(element!.querySelectorAll(`[${constants.DATA_FLIP_ID}]`))\n  }\n}\nexport const getRects = (\n  flippedElements: HTMLElement[]\n): [HTMLElement, BoundingClientRect][] => {\n  return flippedElements.map((child: HTMLElement): [\n    HTMLElement,\n    BoundingClientRect\n  ] => [child, child.getBoundingClientRect()])\n}\n","import animateUnflippedElements from './animateUnflippedElements'\nimport animateFlippedElements from './animateFlippedElements'\nimport getFlippedElementPositionsAfterUpdate from './getFlippedElementPositions/getFlippedElementPositionsAfterUpdate'\nimport * as constants from '../constants'\nimport { assign, toArray } from '../utilities'\nimport {\n  GetElement,\n  BaseFlipArgs,\n  OnFlipKeyUpdateArgs,\n  FlippedIds\n} from './types'\nimport { AnimateUnflippedElementsArgs } from './animateUnflippedElements/types'\nimport {\n  AnimateFlippedElementsArgs,\n  ScopedSelector\n} from './animateFlippedElements/types'\n\nconst createPortalScopedSelector = (portalKey: string) => (\n  selector: string\n) => {\n  return toArray(\n    document.querySelectorAll(\n      `[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]${selector}`\n    )\n  )\n}\nconst createFlipperScopedSelector = (containerEl: HTMLElement) => {\n  const tempFlipperId = Math.random().toFixed(5)\n  containerEl.dataset.flipperId = tempFlipperId\n\n  return (selector: string) => {\n    return toArray(\n      containerEl.querySelectorAll(\n        `[data-flipper-id=\"${tempFlipperId}\"] ${selector}`\n      )\n    )\n  }\n}\nconst createScopedSelector = ({\n  containerEl,\n  portalKey\n}: {\n  containerEl?: HTMLElement\n  portalKey?: string\n}): ScopedSelector => {\n  if (portalKey) {\n    return createPortalScopedSelector(portalKey)\n  } else if (containerEl) {\n    return createFlipperScopedSelector(containerEl)\n  } else {\n    return () => []\n  }\n}\n\nconst createGetElementFunc = (scopedSelector: ScopedSelector): GetElement => {\n  return (id: string) => {\n    return scopedSelector(`[${constants.DATA_FLIP_ID}=\"${id}\"]`)[0]\n  }\n}\n\nconst onFlipKeyUpdate = ({\n  cachedOrderedFlipIds = [],\n  inProgressAnimations = {},\n  flippedElementPositionsBeforeUpdate = {},\n  flipCallbacks = {},\n  containerEl,\n  applyTransformOrigin,\n  spring,\n  debug,\n  portalKey,\n  staggerConfig = {},\n  decisionData = {},\n  handleEnterUpdateDelete,\n  onComplete,\n  onStart\n}: OnFlipKeyUpdateArgs) => {\n  const flippedElementPositionsAfterUpdate = getFlippedElementPositionsAfterUpdate(\n    {\n      element: containerEl,\n      portalKey\n    }\n  )\n\n  const scopedSelector = createScopedSelector({\n    containerEl,\n    portalKey\n  })\n  const getElement = createGetElementFunc(scopedSelector)\n\n  const isFlipped = (id: string) =>\n    flippedElementPositionsBeforeUpdate[id] &&\n    flippedElementPositionsAfterUpdate[id]\n\n  const unflippedIds = Object.keys(flippedElementPositionsBeforeUpdate)\n    .concat(Object.keys(flippedElementPositionsAfterUpdate))\n    .filter(id => !isFlipped(id))\n\n  const baseArgs: BaseFlipArgs = {\n    flipCallbacks,\n    getElement,\n    flippedElementPositionsBeforeUpdate,\n    flippedElementPositionsAfterUpdate,\n    inProgressAnimations,\n    decisionData\n  }\n\n  const animateUnFlippedElementsArgs = assign({}, baseArgs, {\n    unflippedIds\n  }) as AnimateUnflippedElementsArgs\n\n  const {\n    hideEnteringElements,\n    animateEnteringElements,\n    animateExitingElements\n  } = animateUnflippedElements(animateUnFlippedElementsArgs)\n\n  const flippedIds: FlippedIds = cachedOrderedFlipIds.filter(isFlipped)\n  // @ts-ignore\n  const animateFlippedElementsArgs: AnimateFlippedElementsArgs = assign(\n    {},\n    baseArgs,\n    {\n      containerEl,\n      flippedIds,\n      applyTransformOrigin,\n      spring,\n      debug,\n      staggerConfig,\n      scopedSelector,\n      onComplete\n    }\n  )\n  if (onStart) onStart(containerEl, decisionData)\n\n  // the function handles putting flipped elements back in their original positions\n  // and returns another function to actually call the flip animation\n  const flip = animateFlippedElements(animateFlippedElementsArgs)\n\n  if (handleEnterUpdateDelete) {\n    handleEnterUpdateDelete({\n      hideEnteringElements,\n      animateEnteringElements,\n      animateExitingElements,\n      animateFlippedElements: flip\n    })\n  } else {\n    hideEnteringElements()\n    animateExitingElements().then(animateEnteringElements)\n    flip()\n  }\n}\n\nexport default onFlipKeyUpdate\n","import { addTupleToObject, getRects, getAllElements } from '../utilities'\nimport {\n  FlippedElementPositionsAfterUpdate,\n  FlippedElementPositionDatumAfterUpdate\n} from './types'\n\nconst getFlippedElementPositionsAfterUpdate = ({\n  element,\n  portalKey\n}: {\n  element: HTMLElement\n  portalKey?: string\n}): FlippedElementPositionsAfterUpdate => {\n  const positionArray = getRects(getAllElements(element, portalKey)).map(\n    ([child, childBCR]) => {\n      const computedStyle = window.getComputedStyle(child)\n      return [\n        child.dataset.flipId,\n        {\n          element: child,\n          rect: childBCR,\n          opacity: parseFloat(computedStyle.opacity!),\n          transform: computedStyle.transform\n        }\n      ]\n    }\n  ) as [string, FlippedElementPositionDatumAfterUpdate][]\n\n  return positionArray.reduce(addTupleToObject, {})\n}\n\nexport default getFlippedElementPositionsAfterUpdate\n","import { AnimateUnflippedElementsArgs, FragmentTuple } from './types'\n\nconst animateUnflippedElements = ({\n  unflippedIds,\n  flipCallbacks,\n  getElement,\n  flippedElementPositionsBeforeUpdate,\n  flippedElementPositionsAfterUpdate,\n  inProgressAnimations,\n  decisionData\n}: AnimateUnflippedElementsArgs) => {\n  const enteringElementIds = unflippedIds.filter(\n    id => flippedElementPositionsAfterUpdate[id]\n  )\n  const animatedEnteringElementIds = enteringElementIds.filter(\n    id => flipCallbacks[id] && flipCallbacks[id].onAppear\n  )\n\n  const animatedExitingElementIds = unflippedIds.filter(\n    id =>\n      flippedElementPositionsBeforeUpdate[id] &&\n      flipCallbacks[id] &&\n      flipCallbacks[id].onExit\n  )\n\n  const hideEnteringElements = () => {\n    animatedEnteringElementIds.forEach(id => {\n      const element = getElement(id)\n      if (element) {\n        element.style.opacity = '0'\n      }\n    })\n  }\n\n  const animateEnteringElements = () => {\n    animatedEnteringElementIds.forEach((id, i) => {\n      const element = getElement(id)\n      if (element) {\n        flipCallbacks[id].onAppear!(element, i, decisionData)\n      }\n    })\n  }\n\n  let closureResolve: () => void\n\n  const promiseToReturn: Promise<void> = new Promise(resolve => {\n    closureResolve = resolve\n  })\n\n  const fragmentTuples: FragmentTuple[] = []\n  let exitingElementCount = 0\n\n  const onExitCallbacks = animatedExitingElementIds.map((id, i) => {\n    const {\n      domDataForExitAnimations: {\n        element,\n        parent,\n        childPosition: { top, left, width, height }\n      }\n    } = flippedElementPositionsBeforeUpdate[id]\n    // insert back into dom\n    if (getComputedStyle(parent).position === 'static') {\n      parent.style.position = 'relative'\n    }\n    element.style.transform = 'matrix(1, 0, 0, 1, 0, 0)'\n    element.style.position = 'absolute'\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n    // taken out of the dom flow, the element might have lost these dimensions\n    element.style.height = height + 'px'\n    element.style.width = width + 'px'\n    let fragmentTuple: FragmentTuple | undefined = fragmentTuples.filter(\n      t => t[0] === parent\n    )[0]\n    if (!fragmentTuple) {\n      fragmentTuple = [parent, document.createDocumentFragment()]\n      fragmentTuples.push(fragmentTuple)\n    }\n    fragmentTuple[1].appendChild(element)\n\n    exitingElementCount += 1\n\n    const stop = () => {\n      try {\n        parent.removeChild(element)\n      } catch (DOMException) {\n        // the element is already gone\n      } finally {\n        exitingElementCount -= 1\n        if (exitingElementCount === 0) {\n          closureResolve()\n        }\n      }\n    }\n    // @ts-ignore\n    inProgressAnimations[id] = { stop }\n    return () => flipCallbacks[id].onExit!(element, i, stop, decisionData)\n  })\n\n  // now append all the fragments from the onExit callbacks\n  // (we use fragments for performance)\n  fragmentTuples.forEach(t => {\n    t[0].appendChild(t[1])\n  })\n\n  if (!onExitCallbacks.length) {\n    closureResolve!()\n  }\n\n  const animateExitingElements = () => {\n    onExitCallbacks.forEach(c => c())\n    return promiseToReturn\n  }\n\n  return {\n    hideEnteringElements,\n    animateEnteringElements,\n    animateExitingElements\n  }\n}\n\nexport default animateUnflippedElements\n","import { addTupleToObject, getAllElements, getRects } from '../utilities'\nimport * as constants from '../../../constants'\nimport { toArray, assign } from '../../../utilities'\nimport {\n  FlippedElementPositionsBeforeUpdateReturnVals,\n  FlippedElementPositionDatumBeforeUpdate,\n  GetFlippedElementPositionsBeforeUpdateArgs,\n  ParentBCRs,\n  ChildIdsToParentBCRs,\n  ChildIdsToParents\n} from './types'\nimport { InProgressAnimations } from '../../../types'\n\nexport const cancelInProgressAnimations = (\n  inProgressAnimations: InProgressAnimations,\n  animatingElements: HTMLElement[]\n) => {\n  Object.keys(inProgressAnimations).forEach(id => {\n    if (inProgressAnimations[id].destroy) {\n      inProgressAnimations[id].destroy!()\n    }\n    if (inProgressAnimations[id].onAnimationEnd) {\n      inProgressAnimations[id].onAnimationEnd!(true)\n    }\n    delete inProgressAnimations[id]\n  })\n  animatingElements.forEach(el => {\n    el.style.transform = ''\n    el.style.opacity = ''\n  })\n}\n\nconst getFlippedElementPositionsBeforeUpdate = ({\n  element,\n  flipCallbacks = {},\n  inProgressAnimations = {},\n  portalKey\n}: GetFlippedElementPositionsBeforeUpdateArgs): FlippedElementPositionsBeforeUpdateReturnVals => {\n  const flippedElements = getAllElements(element, portalKey)\n\n  const inverseFlippedElements = toArray(\n    element.querySelectorAll(`[${constants.DATA_INVERSE_FLIP_ID}]`)\n  )\n\n  const childIdsToParentBCRs: ChildIdsToParentBCRs = {}\n  const parentBCRs: ParentBCRs = []\n  const childIdsToParents: ChildIdsToParents = {}\n  // this is for exit animations so we can re-insert exiting elements in the\n  // DOM later\n  flippedElements\n    .filter(\n      el =>\n        flipCallbacks &&\n        flipCallbacks[el.dataset.flipId!] &&\n        flipCallbacks[el.dataset.flipId!].onExit\n    )\n    .forEach(el => {\n      let parent = el.parentNode as HTMLElement\n      // this won't work for IE11\n      if (el.closest) {\n        const exitContainer = el.closest(\n          `[${constants.DATA_EXIT_CONTAINER}]`\n        ) as HTMLElement\n        if (exitContainer) {\n          parent = exitContainer\n        }\n      }\n      let bcrIndex = parentBCRs.findIndex(n => n[0] === parent)\n      if (bcrIndex === -1) {\n        parentBCRs.push([parent, parent.getBoundingClientRect()])\n        bcrIndex = parentBCRs.length - 1\n      }\n      childIdsToParentBCRs[el.dataset.flipId!] = parentBCRs[bcrIndex][1]\n      childIdsToParents[el.dataset.flipId!] = parent\n    })\n\n  const filteredFlippedElements = getRects(flippedElements)\n\n  const flippedElementPositionsTupleArray: [\n    string,\n    FlippedElementPositionDatumBeforeUpdate\n  ][] = filteredFlippedElements.map(([child, childBCR]) => {\n    const domDataForExitAnimations = {}\n\n    // only cache extra data for exit animations\n    // if the element has an onExit listener\n    if (\n      flipCallbacks &&\n      flipCallbacks[child.dataset.flipId!] &&\n      flipCallbacks[child.dataset.flipId!].onExit\n    ) {\n      const parentBCR = childIdsToParentBCRs[child.dataset.flipId!]\n\n      assign(domDataForExitAnimations, {\n        element: child,\n        parent: childIdsToParents[child.dataset.flipId!],\n        childPosition: {\n          top: childBCR.top - parentBCR.top,\n          left: childBCR.left - parentBCR.left,\n          width: childBCR.width,\n          height: childBCR.height\n        }\n      })\n    }\n\n    return [\n      child.dataset.flipId!,\n      {\n        rect: childBCR,\n        opacity: parseFloat(window.getComputedStyle(child).opacity || '1'),\n        domDataForExitAnimations\n      }\n    ]\n  }) as [string, FlippedElementPositionDatumBeforeUpdate][]\n\n  const flippedElementPositions = flippedElementPositionsTupleArray.reduce(\n    addTupleToObject,\n    {}\n  )\n\n  // do this at the very end since we want to cache positions of elements\n  // while they are mid-transition\n  cancelInProgressAnimations(\n    inProgressAnimations,\n    flippedElements.concat(inverseFlippedElements)\n  )\n\n  return {\n    flippedElementPositions,\n    cachedOrderedFlipIds: filteredFlippedElements.map(\n      ([el]) => el.dataset.flipId!\n    )\n  }\n}\n\nexport default getFlippedElementPositionsBeforeUpdate\n","import onFlipKeyUpdate from './flip'\nimport getFlippedElementPositionsBeforeUpdate from './flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate'\nimport { assign } from './utilities'\nimport {\n  StaggerConfig,\n  HandleEnterUpdateDelete,\n  InProgressAnimations,\n  FlipCallbacks,\n  OnFlipperComplete,\n  FlippedProps,\n  OnFlipperStart\n} from './types'\nimport { SpringOption } from './springSettings/types'\nimport { FlippedElementPositionsBeforeUpdate } from './flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/types'\nimport { FlippedIds } from './flip/types'\n\ninterface Options {\n  element: HTMLElement\n  staggerConfig?: StaggerConfig\n  spring?: SpringOption\n  applyTransformOrigin?: boolean\n  handleEnterUpdateDelete?: HandleEnterUpdateDelete\n  debug?: boolean\n  onComplete?: OnFlipperComplete\n}\n\nclass Flipper {\n  private element!: HTMLElement\n  private staggerConfig!: StaggerConfig\n  private applyTransformOrigin = true\n  private handleEnterUpdateDelete!: HandleEnterUpdateDelete\n  private debug?: boolean\n  private spring!: SpringOption\n  private inProgressAnimations: InProgressAnimations\n  private flipCallbacks: FlipCallbacks\n  private snapshot!: {\n    flippedElementPositions: FlippedElementPositionsBeforeUpdate\n    cachedOrderedFlipIds: FlippedIds\n  }\n  private onComplete?: OnFlipperComplete\n  private onStart?: OnFlipperStart\n\n  constructor(options: Options) {\n    assign(this, options)\n\n    this.inProgressAnimations = {}\n    this.flipCallbacks = {}\n\n    this.recordBeforeUpdate = this.recordBeforeUpdate.bind(this)\n    this.update = this.update.bind(this)\n    this.addFlipped = this.addFlipped.bind(this)\n    this.addInverted = this.addInverted.bind(this)\n  }\n\n  recordBeforeUpdate() {\n    this.snapshot = getFlippedElementPositionsBeforeUpdate({\n      element: this.element,\n      flipCallbacks: this.flipCallbacks,\n      inProgressAnimations: this.inProgressAnimations\n    })\n  }\n  update(prevDecisionData: any, currentDecisionData: any) {\n    if (this.snapshot) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate: this.snapshot\n          .flippedElementPositions,\n        cachedOrderedFlipIds: this.snapshot.cachedOrderedFlipIds,\n        containerEl: this.element,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.applyTransformOrigin,\n        spring: this.spring,\n        debug: this.debug,\n        staggerConfig: this.staggerConfig,\n        handleEnterUpdateDelete: this.handleEnterUpdateDelete,\n        decisionData: {\n          previous: prevDecisionData,\n          current: currentDecisionData\n        },\n        onComplete: this.onComplete,\n        onStart: this.onStart\n      })\n      delete this.snapshot\n    }\n  }\n\n  addFlipped({\n    element,\n    flipId,\n    opacity,\n    translate,\n    scale,\n    transformOrigin,\n    spring,\n    stagger,\n    delayUntil,\n    onAppear,\n    onStart,\n    onSpringUpdate,\n    onComplete,\n    onExit,\n    shouldFlip,\n    shouldInvert\n  }: FlippedProps & { element: HTMLElement }) {\n    if (!element) {\n      throw new Error('no element provided')\n    }\n    if (!flipId) {\n      throw new Error('No flipId provided')\n    }\n    const flipConfig = {\n      scale,\n      translate,\n      opacity,\n      transformOrigin,\n      spring,\n      stagger,\n      delayUntil\n    }\n    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\n      assign(flipConfig, {\n        translate: true,\n        scale: true,\n        opacity: true\n      })\n    }\n    if (flipId) {\n      element.dataset.flipId = String(flipId)\n    }\n    element.dataset.flipConfig = JSON.stringify(flipConfig)\n    // finally, add callbacks\n    this.flipCallbacks[flipId] = {\n      shouldFlip,\n      shouldInvert,\n      onAppear,\n      onStart,\n      onSpringUpdate,\n      onComplete,\n      onExit\n    }\n  }\n\n  addInverted({\n    element,\n    parent,\n    opacity,\n    translate,\n    scale,\n    transformOrigin\n  }: {\n    element: HTMLElement\n    parent: HTMLElement\n    opacity: boolean\n    translate: boolean\n    scale: boolean\n    transformOrigin: string\n  }) {\n    if (!element) {\n      throw new Error('no element provided')\n    }\n    if (!parent) {\n      throw new Error('parent must be provided')\n    }\n\n    const inverseFlipId = parent.dataset.flipId\n    const flipConfig = {\n      scale,\n      translate,\n      opacity,\n      transformOrigin\n    }\n    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\n      assign(flipConfig, {\n        translate: true,\n        scale: true,\n        opacity: true\n      })\n    }\n    element.dataset.inverseFlipId = inverseFlipId\n    element.dataset.flipConfig = JSON.stringify(flipConfig)\n  }\n}\n\nexport default Flipper\n","// this is exclusively for users of the library to create their own enter + exit animations\nimport { SpringSystem } from '../forked-rebound'\nimport { SpringSystemInterface } from '../forked-rebound/types.d'\nimport { tweenProp, assign } from '../utilities'\nimport { normalizeSpring, springPresets } from '../springSettings'\nimport { SimpleSpringOptions } from './types'\nimport { SpringConfig } from '../springSettings/types'\n\n// this should get created only 1x\nconst springSystem: SpringSystemInterface = new SpringSystem()\n\n/**\n * A simple spring function for animating DOM properties.\n * Returns a function that will immediately cancel the in-progress animation.\n * */\nconst createSimpleSpring = ({\n  config,\n  values,\n  onUpdate,\n  delay = 0,\n  onComplete\n}: SimpleSpringOptions) => {\n  const { stiffness, damping, overshootClamping } = assign(\n    {},\n    springPresets.noWobble,\n    normalizeSpring(config)\n  ) as SpringConfig\n  const spring = springSystem.createSpring(stiffness!, damping!)\n  spring.setOvershootClampingEnabled(!!overshootClamping)\n  spring.addListener({\n    onSpringAtRest: spring => {\n      if (onComplete) onComplete()\n      spring.destroy()\n    },\n    onSpringUpdate: spring => {\n      const springVal = spring.getCurrentValue()\n      if (!values) return onUpdate(springVal)\n      const currentValues = Object.keys(values)\n        .map(value => [\n          value,\n          tweenProp(values[value][0], values[value][1], springVal)\n        ])\n        .reduce((acc, curr) => {\n          return Object.assign(acc, { [curr[0]]: curr[1] })\n        }, {})\n      onUpdate(currentValues)\n    }\n  })\n  if (delay) {\n    setTimeout(() => {\n      spring.setEndValue(1)\n    }, delay)\n  } else {\n    spring.setEndValue(1)\n  }\n  return spring\n}\n\nexport default createSimpleSpring\n","export const DATA_FLIP_ID = 'data-flip-id'\nexport const DATA_INVERSE_FLIP_ID = 'data-inverse-flip-id'\nexport const DATA_FLIP_COMPONENT_ID = 'data-flip-component-id'\nexport const DATA_FLIP_CONFIG = 'data-flip-config'\nexport const DATA_PORTAL_KEY = 'data-portal-key'\nexport const DATA_EXIT_CONTAINER = 'data-exit-container'\n"],"names":["isNumber","x","isFunction","isObject","Object","prototype","toString","call","toArray","arrayLike","Array","slice","apply","getDuplicateValsAsStrings","arr","obj","reduce","acc","curr","keys","filter","val","assign","target","forEach","arg","nextKey","hasOwnProperty","_onFrame","tweenProp","start","end","position","springPresets","noWobble","stiffness","damping","gentle","veryGentle","wobbly","stiff","normalizeSpring","spring","indexOf","window","requestAnimationFrame","callback","setTimeout","Date","now","performanceNow","performance","removeFirst","array","item","idx","splice","AnimationLooper","run","onFrame","_this","springSystem","loop","PhysicsState","this","velocity","ID","Spring","_id","_springSystem","listeners","_startValue","_currentState","_displacementFromRestThreshold","_endValue","_overshootClampingEnabled","_previousState","_restSpeedThreshold","_tempState","_timeAccumulator","_wasAtRest","_cachedSpringConfig","getId","destroy","deregisterSpring","setSpringConfig","springConfig","_springConfig","getCurrentValue","getDisplacementDistanceForState","state","Math","abs","setEndValue","endValue","prevEndValue","isAtRest","activateSpring","i","len","length","onChange","onSpringEndStateChange","setVelocity","setCurrentValue","currentValue","listener","onSpringUpdate","setAtRest","setOvershootClampingEnabled","enabled","isOvershooting","tension","advance","time","realDeltaTime","adjustedDeltaTime","aVelocity","aAcceleration","bVelocity","bAcceleration","cVelocity","cAcceleration","friction","tempPosition","tempVelocity","_interpolate","notifyActivate","notifyAtRest","notifyPositionUpdated","Boolean","onSpringActivate","_this2","_onActivateCalled","onSpringAtRest","systemShouldAdvance","wasAtRest","alpha","addListener","newListener","push","addOneTimeListener","key","func","removeListener","listenerToRemove","SpringSystem","looper","_activeSprings","_idleSpringIndices","_isIdle","_lastTimeMillis","_springRegistry","createSpring","createSpringWithConfig","registerSpring","getIsIdle","deltaTime","pop","currentTimeMillis","ellapsedMillis","onBeforeIntegrate","onAfterIntegrate","springId","createSuspendedSpring","flipData","overshootClamping","getOnUpdateFunc","onAnimationEnd","flipped","createStaggeredSprings","flippedArray","staggerConfig","reverse","speedConfig","normalizedSpeed","speed","min","max","nextThreshold","setEndValueFuncs","map","cachedGetOnUpdate","args","onUpdate","bind","convertMatrix3dArrayTo2dArray","matrix","index","rectInViewport","top","innerHeight","bottom","left","innerWidth","right","extractFlipConfig","element","JSON","parse","dataset","flipConfig","addTupleToObject","getAllElements","portalKey","document","querySelectorAll","getRects","flippedElements","child","getBoundingClientRect","onFlipKeyUpdate","cachedOrderedFlipIds","inProgressAnimations","flippedElementPositionsBeforeUpdate","flipCallbacks","containerEl","applyTransformOrigin","debug","decisionData","handleEnterUpdateDelete","onComplete","onStart","flippedElementPositionsAfterUpdate","childBCR","computedStyle","getComputedStyle","flipId","rect","opacity","parseFloat","transform","scopedSelector","selector","createPortalScopedSelector","tempFlipperId","random","toFixed","flipperId","createFlipperScopedSelector","createScopedSelector","getElement","id","createGetElementFunc","isFlipped","unflippedIds","concat","baseArgs","closureResolve","animatedEnteringElementIds","onAppear","animatedExitingElementIds","onExit","promiseToReturn","Promise","resolve","fragmentTuples","exitingElementCount","onExitCallbacks","domDataForExitAnimations","parent","childPosition","width","height","style","fragmentTuple","t","createDocumentFragment","appendChild","stop","removeChild","DOMException","hideEnteringElements","animateEnteringElements","animateExitingElements","c","animateUnflippedElements","animateFlippedElementsArgs","flippedIds","flip","flipCompletedPromise","then","completedAnimationIds","firstElement","body","ownerDocument","querySelector","flipDataArray","prevRect","currentRect","prevOpacity","currentOpacity","needsForcedMinVals","flippedSpring","flipperSpring","stagger","toReturn","shouldFlip","previous","current","translateDifference","scaleDifference","opacityDifference","currentTransform","Rematrix","toVals","fromVals","transformsArray","translate","scale","invertedChildren","shouldInvert","invertedChildElements","getInvertedChildren","applyStyles","forceMinVals","minHeight","minWidth","stringTransform","join","convertMatrix2dArrayToString","childFlipConfig","contains","scaleX","scaleY","translateY","inverseVals","translateX","transformString","invertTransformsForChildren","createApplyStylesFunc","cachedOnComplete","animateOpacity","onStartCalled","vals","fromVal","initializeFlip","undefined","onStartImmediate","transformOrigin","isCancellation","delayUntil","delayedFlip","f","delayUntilSprings","delayUntilStaggers","delayedStaggerKeys","staggerDict","immediateFlip","staggerKey","animateFlippedElements","getFlippedElementPositionsBeforeUpdate","inverseFlippedElements","childIdsToParentBCRs","parentBCRs","childIdsToParents","el","parentNode","closest","exitContainer","bcrIndex","findIndex","n","filteredFlippedElements","flippedElementPositions","parentBCR","animatingElements","cancelInProgressAnimations","Flipper","options","recordBeforeUpdate","update","addFlipped","addInverted","snapshot","prevDecisionData","currentDecisionData","Error","String","stringify","inverseFlipId","values","delay","config","springVal","currentValues","value"],"mappings":"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"}