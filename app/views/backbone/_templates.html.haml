
- cache ['templates', current_tenant] do
      

  %script{ :type => "text/template", :id => "tpl_breadcrumbs"}


    %a{ :href => '/', :title => "Go to homepage"}
      .css3_icon
        .css3_icon_home
        .css3_icon_chimney

    (( _.each(crumbs, function(crumb,idx) {  ))
    (( var name=crumb[0], loc=crumb[1]; ))

    %li.l-navigate-crumb
      %a{:href => "{{loc}}"}
        {{name}}
      (( if( idx != crumbs.length - 1) { ))
      \/
      (( } ))
    (( }); ))


  %script{ :type => "text/template", :id => "tpl_point_follows"}
    (( if( published && ConsiderIt.request('user:current:logged_in?') ) { ))

    (( var follows_class = already_follows ? 'hide' : ''; ))
    (( var unfollows_class = already_follows ? '' : 'hide'; ))
    %div{ :class => "follow {{ follows_class }}"}
      = form_for :follows, :url => "{{ Routes.follow_path() }}", :as => :follow, :method => :get, :remote => true do |f|
        = f.hidden_field :followable_id, :value => "{{id}}"
        = f.hidden_field :followable_type, :value => "Point"
        = f.submit "Follow this point", :title => 'Get notifications when the point is updated or someone comments on it. You can easily unsubscribe later.' #, :class => 'button'

    %div{ :class => "unfollow {{ unfollows_class }}"}
      = form_for :follows, :url => "{{ Routes.unfollow_path() }}", :as => :follow, :remote => true do |f|
        = f.hidden_field :user_id, :value => "{{ ConsiderIt.request('user:current').id }}"
        = f.hidden_field :followable_id, :value => "{{ id }}"
        = f.hidden_field :followable_type, :value => "Point"
        = f.submit "Unfollow this point" #, :class => 'button'

    (( } ))


  %script{ :type => "text/template", :id => "tpl_newcomment" }   
    .m-new-comment            

      %span.avatar.m-new-comment-avatar{ :id => "avatar-{{user.id}}", :alt => "{{user.get('name')}}'s profile picture"}

      .m-new-comment-body
        %textarea.m-new-comment-body-field.is_counted{ :name => :body, :placeholder => 'Type your comment here...', :title => 'Type your comment here...' }
        %span.count
          1000

        (( if( ConsiderIt.request('user:current:logged_in?') ) { ))
        .m-new-comment-submit-wrap
          %span.m-new-comment-civility-reminder
            Thanks for being civil!

          %button.m-new-comment-submit.button
            Add comment

        (( } else { ))
        .m-login
          You must be logged in to leave a comment.
          %a.m-login-signin{:'data-target' => 'login'}
            Sign In
          %a.m-login-signup{:'data-target' => 'create_account'}
            Create Account
        (( } ))


  %script{ :type => "text/template", :id => "tpl_comment" }   
    
    (( if( moderation_status == 0 ){ ))
    %i
      This comment has been hidden because it contains a personal attack, is inappropriate (e.g. advertising), or is wildly offtopic.
    ((} else { ))

    %a.avatar.m-comment-avatar{ :id => "avatar-{{user.id}}", :alt => "{{user.get('name')}}'s profile picture", :'data-id' => "{{user.id}}", :'data-target' => "user_profile_page"}

    .m-comment-body-wrap
      .m-comment-body
        {{body}}

      %span.m-comment-author
        &ndash; 
        %a{ :href => "{{Routes.profile_path(user.id)}}", :'data-id' => "{{user.id}}", :'data-target' => "user_profile_page"}
          {{ user.get('name') }}

    (( } ))

  %script{ :type => "text/template", :id => "tpl_proposal_strip" }
    (( if(published){ ))
    .m-proposal-connect.m-proposal-strip

      %ul
        %li.m-proposal-action-label
          Help spread the word
        %li.m-proposal-action-link
          .zocial.icon.facebook
        %li.m-proposal-action-link
          .zocial.icon.twitter
        %li.m-proposal-action-link
          .zocial.icon.permalink
        %li.m-proposal-action-label
          Link to this conversation
    (( } ))





  = render :partial => 'backbone/shared'
  = render :partial => 'backbone/root'
  = render :partial => 'backbone/point'
  = render :partial => 'backbone/points'
  = render :partial => 'backbone/homepage'
  = render :partial => 'backbone/position'
  = render :partial => 'backbone/proposals'
  = render :partial => 'backbone/proposal'
  = render :partial => 'backbone/footer'
  = render :partial => 'backbone/header'

  = render :partial => 'backbone/assessment/assessment_user_facing'

  = render :partial => 'backbone/auth'
  = render :partial => 'backbone/dash'