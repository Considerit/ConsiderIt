#!/usr/bin/env ~/Documents/code/castanaut/bin/castanaut

#####
# Uses castanaut to automate a screencast in safari. The robot voice sections, 
# as created via while_saying, help to space out the video for timing
# purposes. 
#
#
# Installation:
#   - must be installed on a mac
#   - Castanaut should be installed from https://github.com/tkriplean/castanaut
#
# Execution:
#   - must be run on a mac
#   - /path/to/castanaut/bin/castanaut /path/to/this/file
#   - can be invoked from bin/screencast, but the path to in bin/screencast is
#     hardcoded for Travis...talk to him if you can't get it to run.  

# TODO: 
#  - refactor into general methods so we can create other screencasts or tests
#    more easily
#  - find a way to automatically destroy any opinions created here. 


#####
# Prep for this screencast: 
# 
# > rake prep_deathstar

#####
# config

# By default, this script will only launch and control a safari instance. 
# Setting 'record_video' will also cause a screen recording to be created. 
record_video = true

export_to = File.absolute_path(File.join(File.dirname(screenplay), 'exports', File.basename(screenplay)))


# height of safari window bar + toolbar + apple menu
y_offset = 63

# shaves off rounded window corners
window_padding = 5 

# controls the size and location of the screencast main area
x, y, width, height = [window_padding, y_offset, 1280, 1280 * 9 / 21] 


#####
# Screencast guts

if record_video
  plugin "quicktime"
  start_recording(x, y, width, height)
  pause 2
end

plugin "safari"

launch "Safari", at(x - window_padding, y - y_offset, width + window_padding * 2, height + y_offset + window_padding + 200) 

perform "loading page" do
  url "http://localhost:3000/Housing?results=true&domain=seattle2035"
  pause 2
  wait_for_element('.histogram')
  pause 1
end

perform "Let's make sure we're logged in" do
  wait_for_element('#user_nav')
  move to_element('.profile_anchor.login'), {:speed => 1} rescue skip
  click
  wait_for_element('#user_email')
  move to_element('#user_email'), {:speed => 1}
  click
  type "test@test.dev.ghost", {:speed => 1}
  move to_element('#user_password'), {:speed => 1}
  click
  type "testtest", {:speed => 1}

  move to_element('.primary_button'), {:speed => 1}
  click
  wait_for_element('.histogram')
end

pause 2
wait_for_element('.cancel_opinion_button')
scroll_to('.cancel_opinion_button')
move to_element('.cancel_opinion_button')
click
pause 2




# hang out on results capture (5 sec)
scroll_to ".histogram", 0, -40
pause 4


# gently start probing

perform "Now you can explore patterns of thought!" do 
  move to_element('.histogram', {:area => ['center', 'top'], :edge_offset => 25}), {:speed => 6}
  click
  pause 1
  move to_element('.histogram', {:area => ['left', 'top'], :edge_offset => 25}), {:speed => 6}
  move to_element('.histogram', {:area => ['right', 'top'], :edge_offset => 25}), {:speed => 6}
end
move by(0, -5), {:speed => 0.5}
pause 1
click
pause 4

perform "See what a particular individual believes" do 
  move to_element('.histogram [data-user="/user/366889"]', {:area => ['bottom', 'center'], :edge_offset => 3}), {:speed => 6}
  click
  pause 4
  click
  move to_element('.histogram [data-user="/user/367781"]', {:area => ['bottom', 'center'], :edge_offset => 3}), {:speed => 6}
  click
  pause 2  
  click
  # move to_element('.histogram [data-user="/user/446868"]', {:area => ['bottom', 'center'], :edge_offset => 3}), {:speed => 6}
  # pause 1
  # click
  # pause 2
  # click
end

# pause 3

# perform "Figure out who has been persuaded by the top pro points." do 
#   move to_element(".pros_by_community .includers", {:area => ['bottom', 'center'], :edge_offset => 3}), {speed: 2}
#   pause 1.5
#   move to_element('[data-id="/point/7442"] .includers', {:area => ['bottom', 'center'], :edge_offset => 3})
#   pause 1.5
# end

pause 1


move to_element('.give_opinion_button'), {:speed => 2}  
pause 2
click
pause 5

perform "Write singular points that each describe a consideration" do
  move to_element(".write_cons"), {:speed => 4}
  click
  type "Real estate developers can take undue advantage of new housing types", {
    :speed => 50
  }
  restore_mouse(2)

  move to_element('[data-action="submit-point"]')
  click
end

perform "Learn and build from otherâ€™s thoughts" do 
  pause 1.5
  move to_element('[data-id="/point/8483"]')
  pause 2.5
  move to_element('[data-id="/point/8347"]')
  drag by(-280, -250), {:speed => 1}
  pause 1
end

loc = to_element('.the_handle')

loc[:to][:left] += 20
loc[:to][:top] += 10

move loc, {:speed => 0.1}
pause 2
drag by(-100, 0)
pause 1
drag by(220, 15)
pause 2
drag by(0, 0)
pause 1
click
pause 3

# scroll up to back button (5 seconds)
scroll_to_pos 0, 3000, 0
pause 3
move to_element('.back_to_homepage'), {:speed => 1}
click

pause 3 # we'll cut a lot here...

# look at homepage (10 sec)
pause 3
scroll_to_pos 0, 5000, 0
pause 1

# scroll back to proposal (5 sec)
scroll_to '#pHousing', 4000, 180
move to_element('#pHousing .proposal_homepage_name'), {:speed => 1}
click
pause 2

#add opinion (20 sec)
scroll_to ".histogram", 3000, -40









########
# cleanup

# while_saying "cleanup comments, points, inclusions" do

#   perform "clean up added comments" do 
#     scroll_to '[data-id="/point/5502"]', 0, 50
#     move to_element('[data-id="/point/5502"]'), {:speed => 0.1}
#     click
#     pause 1
#     while true
#       move to_element('[data-action="delete-comment"]'), {:speed => 0.1} rescue skip
#       click
#       pause 1
#       hit Enter
#     end
#     move to_element('[data-id="/point/5502"]')
#     click
#   end

# end

at_end_of_movie do
  if record_video
    puts "Exporting to #{export_to}"
    stop_recording(export_to)
  end
end
