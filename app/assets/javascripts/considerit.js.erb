var ConsiderIt; //global namespace for ConsiderIt js methods

(function($) {

$j = jQuery.noConflict();


ConsiderIt = {
  study : false,
  draggable_options : {
      helper: 'clone',
      cursor: 'move',
      start: function(evt, ui){
        $j(this).parents('.points_other').css('z-index', 100);
      }, stop: function(evt, ui) {
        $j(this).parents('.points_other').css('z-index', '');
      }
      //snap: '#drop-pro'
    },
  init : function() {

    ConsiderIt.delegators();

    ConsiderIt.update_unobtrusive_edit_heights($j(".unobtrusive_edit textarea"));

    ConsiderIt.per_request();

    $j(document).ajaxComplete(function(e, xhr, settings) {

      if ( settings.url.indexOf('reflect') == -1 ) {
        ConsiderIt.per_request();
      }
    });
    
    $j('a.smooth_anchor').click(function(){
      $j('html, body').animate({
        scrollTop: $j($j(this).attr('href')).offset().top}, 1000);
        return false;
    });

    $j('.autoResize, .pointform textarea, .pointform input[type="text"]').autoResize({extraSpace: 10, maxWidth: 'original'});
    $j('textarea#statement').autoResize({extraSpace: 5});
    
    $j("#points_other_pro, #points_other_con").each(function(){
      $j(this).infiniteCarousel({
        speed: 1000,
        vertical: true,
        total_items: parseInt($j(this).find('.total').filter(":first").text()),
        items_per_page: 3,
        loading_from_ajax: true, 
        dim: 550,
        resetSizePerPage: true,
        total_items_callback: function($carousel){
          if ($carousel.find('.total').filter(":first").length > 0) {
            return parseInt($carousel.find('.total').filter(":first").text());
          } else {
            return $carousel.find('li.point_in_list').length;
          }
        }
      });
    }); 

    // $j('#intro .proposals.horizontal').infiniteCarousel({
    //   speed: 1500,
    //   vertical: false,
    //   total_items: 8,
    //   items_per_page: 8,
    //   loading_from_ajax: false,
    //   dim: 900
    // });

    $j('.proposal_prompt .proposals.horizontal').infiniteCarousel({
      speed: 1500,
      vertical: false,
      total_items: 8,
      items_per_page: 8,
      loading_from_ajax: false,
      dim: 720
    });    

    var results_page = $j('#explore_proposal').length > 0;

    if (results_page && $j('.point_in_list').length > 0 ) {
      $j.get('/' + $j.trim($j('#proposal_long_id').text()) + '/results', function(data){
        $j('.explore#ranked_points').append( $j(data['segments']))
      });
    }

    ConsiderIt.positions.initialize_participants_block();

    // $j('.proposals.vertical').infiniteCarousel({
    //   speed: 1500,
    //   vertical: true,
    //   total_items: 5,
    //   items_per_page: 5,
    //   loading_from_ajax: false,
    //   dim: 250
    // });


    //ConsiderIt.points.create.initialize_counters('.newpointform, .editpointform');

    // google analytics
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
        
  },
  per_request : function() {
    
    $j('.point_in_list_margin.pro').draggable(ConsiderIt.draggable_options);

    $j('.point_in_list_margin.con').draggable(ConsiderIt.draggable_options);

    $j('#points_on_board_con').droppable( {
      hoverClass: 'drop_pending',
      drop: function( event, ui ) {
        var draggable = ui.draggable;
        $j('.inclusion_submit', draggable).trigger('click');
      },
      accept: '.con'
    } );

    $j('#points_on_board_pro').droppable( {
      hoverClass: 'drop_pending',
      drop: function( event, ui ) {
        var draggable = ui.draggable;
        $j('.inclusion_submit', draggable).trigger('click');
      },
      accept: '.pro'
    } );      
           
    $j('.has_example').each(function(){
      if($j(this).val() == '') {
        $j(this).example(function() {
          return $j(this).attr('title'); 
        });
      }
    });


    $j('.new_comment .is_counted, .pro_con_list .is_counted').each(function(){
      if( !$j(this).data('has_noblecount') ){        

        $j(this).NobleCount($j(this).siblings('.count'), {
          block_negative: true,
          max_chars : parseInt($j(this).siblings('.count').text())          
          //on_negative : ConsiderIt.noblecount.negative_count,
          //on_positive : ConsiderIt.noblecount.positive_count
        });
      }
    });  

    $j("#ranked_points .full_column").each(function(){
      $j(this).infiniteCarousel({
        speed: 1000,
        vertical: true,
        total_items: parseInt($j(this).find('.total').filter(":first").text()),
        items_per_page: 4,
        loading_from_ajax: true, 
        dim: 700,
        resetSizePerPage: true,
        total_items_callback: function($carousel){
          return parseInt($carousel.find('.total').filter(":first").text());
        }
      });
    });   

    $j('[placeholder]').inlined_labels();

    // $j('.participant_carousel .vertical_carousel').infiniteCarousel({
    //   speed: 1500,
    //   vertical: true,
    //   //total_items: 5,
    //   items_per_page: 20,
    //   loading_from_ajax: false,
    //   dim: 270,
    //   resetSizePerPage: false
    // });

    ConsiderIt.update_carousel_heights();
    $j('form.html5:not(.html5formified)').html5form();
  },

  delegators : function() {

    /////////////
    // ACCOUNTS
    /////////////
    $j("body") 
      .on('click', '.inputfileproxy', function(){
          $j(this).siblings('input["file"]').trigger('click');
        })
      .on('change', '.avatar_field input[type="file"]', function(){
          var mfile = $j(this).val().split('\\').pop();
          $j(this).siblings('.selected_file').text(mfile);
        })
      .on('click', '.proxy', function() {
          var email = $j('#user_email'), password = $j('#user_password'), $me = $j(this);
          if ( email.val().length == 0 || password.val == 0 ) {
            return;            
          } else {
            $j.post('<%= Rails.application.routes.url_helpers.users_check_login_info_path %>', {
                'user' : {
                  'email' : email.val(),
                  'password' : password.val()
                }
              }, function(data){

              if ( data.valid ) {
                $me.siblings('input[type="submit"]').trigger('click');
              } else {
                $j('#site_registration .password_field')
                  .append("<a class='error' href='<%= Rails.application.routes.url_helpers.new_user_password_path %>'>Forgot your password?</a>");
                return;
              }

            });
          }
        })
      .on('click', '#post_signup_form a.cancel', function(){
        $j.ajax({
          type: 'DELETE',
          url: "<%= Rails.application.routes.url_helpers.user_registration_path %>",
          data: {},
          success: function(data){
            location.reload(true);
          }, error: function(data){
            location.reload(true);
          }

          });
        });
      // .on('click', '.confirmation_required form', function(){
      //     $j(this).parents('.message').append('<span> [done]</span>');
      //   })

    $j(document)

      .delegate('#site_registration a.cancel', 'click', function(){
        $j('.user_dialog, #settings_dialog').dialog('close');
      })

      .delegate('#acknowledgment a', 'click', function(){
        show_tos(700, 700);  
      })

      .delegate('#zipcode_entered .reset a', 'click', function(){
        $j(this).siblings('.resetform').show();
      });

    //////////////
    // PROPOSALS
    //////////////
    $j(document)
      .delegate('.proposal_prompt a.show_proposal_description', 'click', function(){
        $j('.proposal_prompt').removeClass('hiding');
        $j(this).remove();
      })
      .delegate('.description_wrapper .prompt a', 'click', function(){
        if($j(this).hasClass('hidden')){
          $j(this).parents('.prompt').filter(":first").siblings('.full').slideDown();
          $j(this).text('hide');
        } else {
          $j(this).parents('.prompt').filter(":first").siblings('.full').slideUp();
          $j(this).text('show');
        }
        $j(this).toggleClass('hidden');
      })
      .delegate('.proposal_menu', 'hover', function(event){
        var $target = $j(this).children('ul');
        if ( event.type == 'mouseenter' ) {
          $target.slideDown('fast', 'linear');
        } else {
          $target.slideUp('fast', 'linear');
        }
      })
      .on('blur', 'input.my_name', function(){
        if ( $j(this).val().length > 3 ) {
          $j(this).addClass('hidden_edit');
          $j(this).autoGrowInput();
          var prompt = $j(this).parents('#nameplate');
          prompt.width( prompt.find('.my_name').outerWidth() + prompt.find('.prompt').outerWidth() + 40);

          //update the username of all points written by this user
          $j('.point_in_list.added_by_me').find('.nested_user .unknown').text($j(this).val());
        }
      })
      .on('click', '.edit_page a', function(){
        $j(this).toggleClass('edit_mode');
        $j('.unobtrusive_edit_form').toggleClass('implicit_edit_mode explicit_edit_mode');
        if ($j(this).hasClass('edit_mode')) {
          $j('.unobtrusive_edit_form textarea:first').focus();
        } else {
          $j('.unobtrusive_edit_form textarea').blur();
        }
      })      
      .on('keyup', '.unobtrusive_edit input[type="text"], .unobtrusive_edit textarea', function(){
        var save_block = $j(this).siblings('.save_block');
        save_block.find('input').show();
        save_block.find('.updated').hide();
      })
      .delegate('.unobtrusive_edit_form', 'ajax:success', function(data, response, xhr){
        var save_block = $j(this).find('.save_block');
        save_block.find('input').hide();
        save_block.find('.updated').show().delay(1200).fadeOut(); 
      })
      .on('focus', '.unobtrusive_edit input[type="text"], .unobtrusive_edit textarea', function(){
        var save_block = $j(this).siblings('.save_block');
        save_block.show();
      })      
      .on('blur', '.unobtrusive_edit input[type="text"], .unobtrusive_edit textarea', function(e){
        var save_block = $j(this).siblings('.save_block');
        save_block
          .find('.updated').hide();
        //if ( !$j(e.target).hasClass('.save_block') && !$j(e.target).parents('.save_block').length > 0 ) {
        //  save_block.hide();
        //}
      })
      .on('ajax:success', '.filter a', function(event, data){
        $j('.proposal_list').replaceWith($j(data.proposals));


        if ($j(this).parent().is('.tag.selected') ){
          $j(this).parent().removeClass('selected').siblings().removeClass('selected');
        } else{
          $j(this).parent()
            .addClass('selected')
            .siblings() 
              .removeClass('selected');          
        }

      });

    //////////////
    // POINTS
    //////////////

    // mouseover a point
    $j('.point_list').delegate('.point_in_list:not(.expanded)', 'hover', function( event ) {
      if ( $j('.point_in_list.expanded').length == 0 ){
        var el = $j(this).find('.operations');
        if ( event.type === 'mouseenter' ) {
          el.stop(true, false)
            .fadeTo('slow', 1.0, 'easeInQuart');
        } else if (!$j(this).hasClass('edit_mode')) {
          el.stop(true, false)
            .fadeOut('fast');
        }

        if ( $j(this).hasClass('point_in_list_board')) {
          $j('#user-' + $j(this).attr('user') + ' .view_statement img').toggleClass('author_of_hovered_point');
        }


      }
    });


    // mouseover read more button
    $j('.point_in_list_margin').delegate('.point_text_toggle.more:not(.expanded)', 'hover', function(event){
      if ( $j('.point_in_list.expanded').length == 0 ){
        var parent = $j(this).parents('.point_in_list_margin');
        if ( event.type === 'mouseenter' ) {
          parent.draggable( "disable" );
          parent.removeClass('ui-draggable-disabled ui-state-disabled');
        } else if ( !parent.hasClass('expanded') ) {
          parent.draggable( "enable" );
        }
      }
    });

    // new button clicked
    $j('.pro_con_list.dynamic').delegate('.newpoint .newpointbutton a.write_new', 'click', function(){
      $j('.droppable').fadeOut();
      $j(this).fadeOut(100, function(){
        $j(this).parents('.newpoint').find('.pointform')
          .fadeIn('fast')
          .find('.point-title-group input')
            .focus(); 

      });  
      //show_lightbox();
    });

    // edit point clicked
    $j('.pro_con_list.dynamic').delegate('a.editpoint', 'click', function(){
      $j('.droppable').fadeOut();
      $j(this).fadeOut(function(){
        var $point_form = $j(this).parents('.edit').find('.pointform');
        $j(this).parents('.point_in_list').addClass('edit_mode');
        $point_form.fadeIn('fast');    
      });  
      //show_lightbox();
    });

    // new/edit point cancel clicked
    $j('.pro_con_list.dynamic').delegate('.new_point_cancel', 'click', function(){
      var form = $j(this).parents('.pointform');
      form.find('.point_link_form').remove();
      form
        .fadeOut(function(){
          $j(this).parents('.newpoint').find('.write_new').fadeIn();  //hide_lightbox();
          $j('.droppable').fadeIn();
        })
        .find('textarea').val('');
      $j(this).parents('.point_in_list').removeClass('edit_mode');

    });

    // Create callback

    $j('.pro_con_list.dynamic').on('ajax:success', '.newpoint .newpointform form', function(data, response, xhr){
      var $new_point = $j(response['new_point']);
      $new_point.addClass('added_by_me');
      if ($new_point.find('.nested_user .unknown').length > 0 && $j('#nameplate input.my_name.hidden_edit').length > 0){
        var nameplate_name = $j('#nameplate input.my_name.hidden_edit').val();
        $new_point.find('.nested_user .unknown').text(nameplate_name);
      }

      $j(this).parents('.full_column').filter(":first").find('.point_list').filter(":first").append($new_point);
      $j(this).find('textarea').val('');
      $j(this).find('.point-title-group .count').html(140);
      $j(this).find('.point-description-group .count').html(2000);
      
      $j(this).find('.new_point_cancel').trigger('click');
    });

    // Update callback
    $j('.pro_con_list.dynamic').delegate('.editpointform form', 'ajax:success', function(data, response, xhr){
      $j(this).parents('.point_in_list').filter(":first").replaceWith(response['new_point']);
      hide_lightbox(); 
    });


    // Delete callback
    $j('.pro_con_list.dynamic').delegate('.deletepointform a', 'ajax:success', function(data, response, xhr){
      $j(this).parents('.point_in_list').filter(":first").fadeOut();
    });

    var close_point_click = function(e){
      if ( !$j(e.target).hasClass('expanded') && $j(e.target).parents('.point_in_list.expanded').length == 0  && $j('body > .ui-widget-overlay').length == 0 && $j(e.target).filter(':visible').length > 0) {
        $j('.point_in_list.expanded .toggle.less:visible').trigger('click');
      }
    };

    var close_point_key = function(e) { 
      if (e.keyCode == 27 && $j('body > .ui-widget-overlay').length == 0) {
        $j('.point_in_list.expanded .toggle.less:visible').trigger('click');
      }
    };

    // Toggle point details ON
    $j(document).delegate('.point_in_list .toggle.more', 'click', function(){
      var real_point = $j(this).parents('.point_in_list'),
          point_id = real_point.attr('id').substring(6);  
          
      real_point.draggable( "disable" );

      var placeholder = $j('<li>'); 
      placeholder
        .attr('id', real_point.attr('id'))
        .height(real_point.height())
        .addClass(real_point.attr('class'))
        .css('visibility', 'hidden');

      //close other open points...
      $j('.point_in_list.expanded .toggle.less:visible').trigger('click');

      real_point.after(placeholder);




      //start complex animation...
      var body = real_point.find('> .body'),
          full = body.find('> .full'),
          nutshell = real_point.find('.nutshell'),
          extra = real_point.find('.extra'),
          is_pro = real_point.hasClass('pro'),
          is_margin = real_point.hasClass('point_in_list_margin'),
          details_loaded = extra.find('> .ajax_loading').length == 0;
      
      real_point.data({
        'nutshell': {
          'width': nutshell.css('width'),
          'font-size': nutshell.css('font-size')
        },
        'container': placeholder.parent()
      });
      nutshell.css('width', nutshell.width());

      nutshell_animate_props = {
        'width': '650px',
        'font-size': '12pt'
      }

      var real_left = nutshell.offset().left, real_top = nutshell.offset().top - $j(document).scrollTop();

      real_point = real_point.detach();
      $j('body').append(real_point);      
      real_point
        .addClass('expanded')
        .css({
          'top': placeholder.offset().top, //- $j('#content').offset().top,
          'left': placeholder.offset().left
          //'width': parseInt(real_point.css('width')) - parseInt(real_point.css('margin-right')) - parseInt(real_point.css('margin-left'))
        })
        //.find('.operations').hide();

      if ( !is_pro ) {
        nutshell.css({'left': real_left, 'top': real_top, 'position': 'fixed'});

        if ( is_margin ) {
          nutshell_animate_props['left'] = '-=522px';
        } else {
          nutshell_animate_props['left'] = '-=290px';
        }
      }

      real_point.find('.bullet_point, .nutshell .nested_user').fadeOut();
      real_point.find('.toggle.more').hide();
      real_point.addClass('animation_state-expanded', 'slow', 'easeInOutQuad', function(){
        real_point.find('.avatar').fadeIn('slow');
        nutshell.animate(nutshell_animate_props, 
          {'duration': 'slow', 'easing': 'easeInOutQuad', 'complete': function(){
          $j(this).css({'left': '', 'top': '', 'position': ''});

          real_point.addClass('animation_state-finished', 'fast', 'easeInQuad', function(){
            
            full.slideDown(function(){

              if ( !details_loaded ) {
                var proposal_id = $j.trim($j('#proposal_long_id').text());

                $j.get('/' + proposal_id + '/points/' + point_id, {'origin' : is_margin ? 'margin' : 'self'}, function(data){
                  $j('.extra', real_point)
                    .html(data.details)
                    .find('textarea').autoResize({extraSpace:0});
                  
                  //real_point.animate(5000, {'height': '+=' + extra.height()}, function(){
                    //real_point.css('height', '');
                  //});      
                  //extra.slideDown(5000);
                });
              } else {
                //real_point.animate(5000, {'height': '+=' + extra.height()}, function(){
                  //real_point.css('height', '');
                //});      
                extra.slideDown();
              }
            });
          });
        }});

        $j(document)
          .click(close_point_click)
          .keyup(close_point_key);
      });


      
    });

    // Toggle point details OFF
    $j(document).delegate('.point_in_list .toggle.less', 'click', function(){

      var real_point = $j(this).parents('.point_in_list'), 
          placeholder = $j('#' + real_point.attr('id'), real_point.data('container')),
          nutshell = real_point.find('.nutshell');

      $j(document)
        .unbind('click', close_point_click)
        .unbind('keyup', close_point_key);

      //real_point.css({'height': 'auto'})
      real_point.find('.extra, > .body .full').fadeOut(500);

      real_point.find('> .body .avatar').fadeOut( 600, function(){
        if ( real_point.hasClass('animation_state-finished')) { 
          real_point.removeClass('animation_state-finished');

          nutshell.animate(real_point.data('nutshell'), 1000, 'easeInOutQuad', function(){
            nutshell.css({'width': '', 'font-size': ''});
          }); 
          real_point.removeClass('animation_state-expanded', 1000, 'easeInOutQuad', function(){        
            //nutshell.css({ 'display': '', 'position': '' });

            real_point
              .css({'left':'','top':'','height':'', 'width': ''})
              .removeClass('expanded');
            placeholder.replaceWith(real_point);

            if ( real_point.hasClass('point_in_list_margin') ) {
              real_point.draggable( "enable" );
            } else {
              real_point.find('.bullet_point').show();
            }
            real_point.find('>.body .nutshell .nested_user').fadeIn();
            //placeholder.remove();
            real_point.find('.operations').hide().find('.more').show();

          }); 
        }       
      });

    });

    //////////////
    // INCLUSIONS
    //////////////

    // Include in list
    $j(document).on('ajax:success', '.include .judgepointform form', function(data, response, xhr){
      var included_point = $j(this).parents('.point_in_list_margin'), 
          replacement_point = $j(response['new_point']);
    
      if ( included_point.hasClass('pro') ) {
        var user_point_list = $j('#points_on_board_pro .point_list');
        var other_point_list = $j('#points_other_pro .point_list');
      } else {
        var user_point_list = $j('#points_on_board_con .point_list');
        var other_point_list = $j('#points_other_con .point_list');
      }

      var carousel = other_point_list.parents('.infiniteCarousel').filter(":first"),
          replacement_point_already_in_list = other_point_list.find('#' + replacement_point.attr('id')).length > 0;

      included_point.fadeOut('slow', function() {
        // only use replacement point if it doesn't already exist in the list
        included_point = replacement_point && replacement_point.length > 0 && !replacement_point_already_in_list
           ? included_point.replaceWith(replacement_point) 
           : included_point.detach();

        replacement_point.draggable(ConsiderIt.draggable_options);
        user_point_list.append(included_point);
        included_point
          .removeClass('point_in_list_margin')
          .addClass('point_in_list_self')
          .fadeIn('slow', function(){
            $j('.pro_con_list .droppable').fadeOut('slow').remove();
            carousel.infiniteCarousel({'operation': 'refresh', 'total_items': parseInt(response['total_remaining'])});
          })
          .draggable( "destroy" );

        
      });
    });

    // Remove from list
    $j(document).delegate('.remove .judgepointform a', 'ajax:success', function(data, response, xhr){
      var old_point = $j(this).parents('.point_in_list_self'),
        margin_point_list = old_point.hasClass('pro') ? $j('#points_other_pro .point_list') : $j('#points_other_con .point_list'),
        carousel = margin_point_list.parents('.infiniteCarousel');

      old_point.fadeOut('slow', function(){
        old_point = old_point.detach(); 
        margin_point_list.append(old_point);
        old_point
          .removeClass('point_in_list_self')
          .addClass('point_in_list_margin')
          .draggable(ConsiderIt.draggable_options)
          .fadeIn('slow', function(){
            carousel.infiniteCarousel({'operation': 'refresh', 'total_items': parseInt(response['total_remaining'])});
          });

      });
    });

    //////////////
    //COMMENTS
    //////////////

    // post new comment
    $j(document).delegate('.new_comment form', 'ajax:success', function(data, response, xhr){
        
      var new_point = response['new_point'],
      $parent = $j(this).parents('.comment').filter(":first");
      //because we cloned the point in order to show an expanded version when the point in the list 
      // is contained in the carousel, need to add the comment in both places...
      $parent = $j('#' + $parent.attr('id'));
      if($parent.length > 0){
        $parent.find('.comment_children').filter(":first").prepend(new_point);
        $j('.new_comment textarea').val("");
        $parent.find('.reply_row a.cancel').trigger('click');
      } else {
        $j(this).parents('.new_comment').filter(":first").before(new_point);
        $j(this).find('textarea, .the_subject input').val("");
      }

      if ( response['is_following'] ) {
        var commentable = $j(this).parents('.commentable:first');
        commentable.find('.follow').hide();
        commentable.find('.unfollow').show();
      }


    });

    //////////////
    // POSITIONS
    //////////////

    // Toggle position statement clicked

    $j(".bar").delegate("&.selected .view_statement", 'mouseenter', function(event){
      $j(this).children('.details').show();
    });    

    $j(".bar").delegate("&.selected .view_statement", 'mouseout', function(event){
      $j(this).children('.details').hide();
    });    

    //////////////
    //HISTOGRAM
    //////////////

    var close_bar_click = function(e){
      if ( !$j(e.target).is('.bar.selected') && $j(e.target).parents('.bar.selected').length == 0 && $j('.point_in_list.expanded').length == 0 && !$j(e.target).hasClass('pro_con_list') && $j(e.target).parents('.pro_con_list').length == 0 ) {
        $j('.bar.selected').trigger('click');
      }
    };

    var close_bar_key = function(e) { 
      if (e.keyCode == 27 && $j('.point_in_list.expanded').length == 0 && $j('body > .ui-widget-overlay').length == 0) {
        $j('.bar.selected').trigger('click');
      }
    };

    $j('.histogram').delegate('.bar:not(.selected)', 'click', function(){

      var bucket = $j(this).attr('id').substring(7),
          $stored = $j('.domain_'+bucket);

      $j('.bar.selected').removeClass('selected');
      $j(this).addClass('selected');


      $j('.ranked_points .action').hide();

      $j('.pro_con_list')
        .addClass('segmented');

      var mouseover_callback = function(data){
        if(data) {
          $j('.results_narrative, #ranked_points').removeClass('loading');
          $j('#ranked_points').append(data['points']);
          $j('.statements').filter(":first").after(data['participants']);            
        } else {
          $stored.show();            
        }
        $j('#ranked_points .pro_con_list:not(.domain_' + bucket + '), .statements').hide();

        $j('.full_column', $stored).infiniteCarousel({'operation': 'refresh'});
      };

      mouseover_callback();

      $j(document)
        .click(close_bar_click)
        .keyup(close_bar_key);

    });

    $j('.histogram').delegate('.bar.selected', 'click', function(){
      
      $j('.domain_all')
        .show()
        .siblings('.pro_con_list').hide();
      
      $j('.pro_con_list')
        .removeClass('segmented');

      $j('.view_statement .details:visible', this).hide();
      
      $j(this).removeClass('selected');

      $j(document)
        .unbind('click', close_bar_click)
        .unbind('keyup', close_bar_key);

    });
        
    $j('body').delegate(".position_statement .important_points .show, .position_statement .important_points .hide", 'click', function(){
      $j(this).parent().children().fadeToggle(); 
    });

    //////////////
    //PROPOSAL
    //////////////

    $j('.proposal_results_description').on('click', '.head a.show_details', function(){
      $j('.proposal_results_description').find('.pic, .description_wrapper').slideDown('slow');
      $j(this).hide();
      $j(this).siblings('a').show();
    });

    $j('.proposal_results_description').on('click', '.head a.hide_details', function(){
      $j('.proposal_results_description').find('.pic, .description_wrapper').slideUp('slow');
      $j(this).hide();
      $j(this).siblings('a').show();
    });

  },

  positions : {

    initialize_participants_block : function( ) {

      var cur_low = null;
      for ( var bucket = 0; bucket<= 6; bucket+=1 ) {
        var container = $j('#bucket-' + bucket + '.bar'),
            p = $j('> .people_bar', container),
            participants = $j('> .statement img', p),            
            dim = get_tile_size(container.width(), container.height(), participants.length);
        
        if ( participants.length > 0 ) {
          cur_low = cur_low ? Math.min(dim, cur_low) : dim;
        }
      }

      for ( var bucket = 0; bucket<= 6; bucket+=1 ) {
        var container = $j('#bucket-' + bucket + '.bar'),
            p = $j('> .people_bar', container),
            participants = $j('> .statement img', p);

        var per_row = Math.floor( container.width() / cur_low);
        for ( var i = 0; participants.length % per_row != 0 && i < per_row - participants.length % per_row; i+=1 ) {
          p.prepend('<li style="visibility:hidden; float: right; height:' + cur_low + 'px; width:'+cur_low+'px;">')
        }
        participants
          .css({'width': cur_low, 'height': cur_low});
        //container.css('height', 'auto');
      }

      $j('.people_bar').show();
    },

    set_slider_value : function(new_value){
        
      var max_effect = 40, base = 85, value = new_value - 1;
      $j( '.slider_table .right').css('font-size', base + max_effect * value + '%' )
      $j( '.slider_table .left').css('font-size', base - max_effect * value + '%')
      
      $j('#stance-value').val( value );  
      ConsiderIt.update_unobtrusive_edit_heights($j(".slider_label .unobtrusive_edit textarea"));
    },
    
    close_segment_click : function(e){
      if ( $j(e.target).parents('.point_in_list.expanded').length == 0  && $j('body > .ui-widget-overlay').length == 0) {
        $j('.point_in_list.expanded .toggle.less:visible').trigger('click');
      }
    },

    close_segment_key : function(e) { 
      if (e.keyCode == 27) {
        $j('.point_in_list.expanded .toggle.less:visible').trigger('click');
      }
    },
    
    set_stance : function(bucket, dontadjust) {
      if (dontadjust) bucket = parseInt(bucket)
      $j('.stance_name').text(ConsiderIt.positions.stance_name(bucket));
    },
    
    stance_name : function(d) {
      switch (d) {
        case 0: 
          return "strong opposers"
        case 1: 
          return "opposers"
        case 2:
          return "mild opposers"
        case 3:
          return "neutral parties"
        case 4:
          return "mild supporters"
        case 5:
          return "supporters"
        case 6:
          return "strong supporters"
      }
    }  
    
  },

  update_unobtrusive_edit_heights : function (els) {
    els.each(function(){
        var lineHeight = parseFloat($j(this).css("line-height")) || parseFloat($j(this).css("font-size")) * 1.5;
        var lines = $j(this).attr("rows")*1 || $j(this).prop("rows")*1;
        $j(this).css("height", lines*lineHeight);
    });    
  },

  update_carousel_heights: function(){
    $j('.points_other .point_list').css({
      'height': $j('.pro_con_list').height()
    })
  },
  noblecount :  {
    positive_count : function( t_obj, char_area, c_settings, char_rem ) {
      
      if ( char_area.hasClass( 'too_many_chars' ) ) {
        var submit_button = t_obj.parents( 'form' ).find( 'input[type="submit"]' );

        char_area.removeClass( 'too_many_chars' ).css( {
          'font-weight' : 'normal',
          'font-size' : '125%'
        } );
    
        submit_button
            .animate( {
              opacity : 1,
              duration : 50
            } ).attr( 'disabled', false ).css( 'cursor', 'pointer' );
        t_obj.data( 'disabled', false );
      } else if ( char_rem < c_settings.max_chars && $j( t_obj ).data( 'disabled' ) ) {
        var submit_button = t_obj.parents( 'form' ).find( 'input[type="submit"]' );

        t_obj.data( 'disabled', false );
        submit_button
            .attr( 'disabled', false );
      } else if ( char_rem == c_settings.max_chars ) {

        var submit_button = t_obj.parents( 'form' ).find( 'input[type="submit"]' );

        t_obj.data( 'disabled', true );
        submit_button
            .attr( 'disabled', true );
      }
      
    },    
    negative_count : function( t_obj, char_area, c_settings, char_rem ) {
      if ( !char_area.hasClass( 'too_many_chars' ) ) {
        char_area.addClass( 'too_many_chars' ).css( {
          'font-weight' : 'bold',
          'font-size' : '175%'
        } );
    
        t_obj.parents( parent_selector ).find( submit_selector )
            .animate( {
              opacity : .25,
              duration : 50
            } ).attr( 'disabled', true ).css( 'cursor', 'default' );
        t_obj.data( 'disabled', true );
    
      } 
    }
  }
  
};

})(jQuery);


// TODO: integrate better into code

function show_lightbox(callback){
  $j('#lightbox').css({
    'background' : '#000000',
    'z-index' : 1000
  });
  if ( !$j.browser.msie ) {

    $j('#lightbox').fadeIn('slow', callback);
  } else {
    
  }
}

function hide_lightbox(callback){
  if ( !$j.browser.msie ) {
    $j('#lightbox').fadeOut('slow', callback);
  } else {
    $j('#lightbox').css({
      'background' : 'transparent',
      'z-index' : -100
    });    
  }
}

// FROM: https://github.com/ryanb/complex-form-examples/blob/master/public/javascripts/application.js
function remove_fields(link) {
  jQuery(link).parents('.point_link_form').remove();
}

function add_fields(link, association, content) {
  var new_id = new Date().getTime();
  var regexp = new RegExp("new_" + association, "g");
  var new_content = content.replace(regexp, new_id);
  jQuery(link).parent().prepend(new_content);
}

function show_tos(width, height) {
  var screenX     = typeof window.screenX != 'undefined' ? window.screenX : window.screenLeft,
      screenY     = typeof window.screenY != 'undefined' ? window.screenY : window.screenTop,
      outerWidth  = typeof window.outerWidth != 'undefined' ? window.outerWidth : document.body.clientWidth,
      outerHeight = typeof window.outerHeight != 'undefined' ? window.outerHeight : (document.body.clientHeight - 22),
      left        = parseInt(screenX + ((outerWidth - width) / 2), 10),
      top         = parseInt(screenY + ((outerHeight - height) / 2.5), 10),
      features    = ('width=' + width + ',height=' + height + ',left=' + left + ',top=' + top + ',scrollbars=yes');

      var tos = window.open('/home/terms-of-use', 'Terms of Use', features);

  if (tos.focus)
    tos.focus();

  return false;
}

function login(provider_url, width, height) {
  var screenX     = typeof window.screenX != 'undefined' ? window.screenX : window.screenLeft,
      screenY     = typeof window.screenY != 'undefined' ? window.screenY : window.screenTop,
      outerWidth  = typeof window.outerWidth != 'undefined' ? window.outerWidth : document.body.clientWidth,
      outerHeight = typeof window.outerHeight != 'undefined' ? window.outerHeight : (document.body.clientHeight - 22),
      left        = parseInt(screenX + ((outerWidth - width) / 2), 10),
      top         = parseInt(screenY + ((outerHeight - height) / 2.5), 10),
      features    = ('width=' + width + ',height=' + height + ',left=' + left + ',top=' + top + ',scrollbars=yes');

  newwindow = window.open(provider_url, '_blank', features);

  if (window.focus)
    newwindow.focus();

  return false;
}

function video_window(width, height, link, title) {
  var screenX     = typeof window.screenX != 'undefined' ? window.screenX : window.screenLeft,
      screenY     = typeof window.screenY != 'undefined' ? window.screenY : window.screenTop,
      outerWidth  = typeof window.outerWidth != 'undefined' ? window.outerWidth : document.body.clientWidth,
      outerHeight = typeof window.outerHeight != 'undefined' ? window.outerHeight : (document.body.clientHeight - 22),
      left        = parseInt(screenX + ((outerWidth - width) / 2), 10),
      top         = parseInt(screenY + ((outerHeight - height) / 2.5), 10),
      features    = ('width=' + width + ',height=' + height + ',left=' + left + ',top=' + top + ',scrollbars=no');

      var tos = window.open(link, title, features);

  if (tos.focus)
    tos.focus();

  return false;
}

function get_tile_size(width, height, tileCount){

  // come up with an initial guess
  var aspect = height/width, 
    xf = Math.sqrt(tileCount/aspect),
    yf = xf*aspect,
    x = Math.max(1.0, Math.floor(xf)),
    y = Math.max(1.0, Math.floor(yf)),
    x_size = Math.floor(width/x),
    y_size = Math.floor(height/y),
    tileSize = Math.min(x_size, y_size);

  // test our guess:
  x = Math.floor(width/tileSize);
  y = Math.floor(height/tileSize);
  if (x*y < tileCount) { // we guessed too high
  
    if (((x+1)*y < tileCount) && (x*(y+1) < tileCount)){
      // case 2: the upper bound is correct
      //         compute the tileSize that will
      //         result in (x+1)*(y+1) tiles
      x_size = Math.floor(width/(x+1));
      y_size = Math.floor(height/(y+1));
      tileSize = Math.min(x_size, y_size);
    } else {
      // case 3: solve an equation to determine
      //         the final x and y dimensions
      //         and then compute the tileSize
      //         that results in those dimensions
      var test_x = Math.ceil(tileCount/y),
          test_y = Math.ceil(tileCount/x);
      x_size = Math.min(Math.floor(width/test_x), Math.floor(height/y));
      y_size = Math.min(Math.floor(width/x), Math.floor(height/test_y));
      tileSize = Math.max(x_size, y_size);
    }
  }

  return tileSize;
}

(function($) {
$.fn.autoGrowInput = function(o) {

    o = $.extend({
        maxWidth: 1000,
        minWidth: 0,
        comfortZone: 10
    }, o);

    this.filter('input:text').each(function(){

        var minWidth = o.minWidth,
            val = '',
            input = $(this),
            testSubject = $('<tester/>').css({
                position: 'absolute',
                top: -9999,
                left: -9999,
                width: 'auto',
                fontSize: input.css('fontSize'),
                fontFamily: input.css('fontFamily'),
                fontWeight: input.css('fontWeight'),
                letterSpacing: input.css('letterSpacing'),
                whiteSpace: 'nowrap'
            }),
            check = function() {
                if (val === (val = input.val())) {return;}

                // Enter new content into testSubject
                var escaped = val.replace(/&/g, '&amp;').replace(/\s/g,' ').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                testSubject.html(escaped);

                // Calculate new width + whether to change
                var testerWidth = testSubject.width(),
                    newWidth = (testerWidth + o.comfortZone) >= minWidth ? testerWidth + o.comfortZone : minWidth,
                    currentWidth = input.width(),
                    isValidWidthChange = (newWidth < currentWidth && newWidth >= minWidth)
                                         || (newWidth > minWidth && newWidth < o.maxWidth);

                // Animate width
                if (isValidWidthChange) {
                    input.width(newWidth);
                }

            };

        testSubject.insertAfter(input);

        $(this).bind('keyup keydown blur update', check);

    });

    return this;

};
})(jQuery);

//http://blog.colin-gourlay.com/blog/2012/02/safely-using-ready-before-including-jquery/
(function($,d){$.each(readyQ,function(i,f){$(f)});$.each(bindReadyQ,function(i,f){$(d).bind("ready",f)})})(jQuery,document)
