.newpoint
  .newpointbutton
  
    - if is_pro
      %button.pro.write_new{ :onclick => "ConsiderIt.points.create.new_button_clicked('#{sel}')", :title => "Click to write your own pro point." }
    - else
      %button.con.write_new{ :onclick => "ConsiderIt.points.create.new_button_clicked('#{sel}')", :title => "Click to write your own con point." }
          
  .newpointform{ :id => "newpointform-#{is_pro}"}
    -# = render :partial => "shared/model_errors", :locals => { :obj => :point }
    = form_for Point.new(:option => @option), :url => option_points_path(@option), :remote => true do |f|
      =f.hidden_field :is_pro, :id => "point-current-is_pro", :value=>is_pro
      =f.hidden_field :option_id, :id => "point-current-initiative", :value=>@option.id
      =f.hidden_field :user_id, :id => "point-current-user", :value=>@user.id
      
      .point-title-group.form-group.inline.text_group
        = f.text_area :nutshell, :example => '(required) Your point in 140 characters or less...', :class => "input-text point-title"
        .count
          140
      
      .point-description-group.form-group.inline.text_group
        = f.text_area :text, :example => "(optional) A fuller description of the point in 500 characters or less...", :class => "input-textarea point-description", :rows => "7"
        .count
          500
      
      %p.note>
        %strong.alert<>
          Please keep it constructive!
      .point-submit
        = submit_tag 'Add point', :class => "submit_new_point #{{true => 'pro', false => 'con'}[is_pro]}"
        
      .point-cancel
        %a.new_point_cancel{ :onclick => "ConsiderIt.points.create.cancel_button_clicked('#{sel}')" }
          cancel
      .clear
        
:javascript
  var form_sel = '#newpointform-#{is_pro}';
  ConsiderIt.points.create.initialize_counters(form_sel);
  $j(form_sel).bind('ajax:success', function(data, status, xhr){
    ConsiderIt.points.create.post_callback(status, '#{sel}');
  });
    