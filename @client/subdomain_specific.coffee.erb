######################
# Default
window.DefaultHeader = ReactiveComponent
  displayName: 'DefaultHeader'

  render: ->
    subdomain = fetch '/subdomain'   

    masthead_style = 
      textAlign: 'center'
      backgroundColor: subdomain.branding.primary_color
      height: 45

    if subdomain.branding.masthead
      _.extend masthead_style, 
        height: 300
        backgroundPosition: 'center'
        backgroundSize: 'cover'
        backgroundImage: "url(#{subdomain.branding.masthead})"   
           
    DIV style: masthead_style,
      ProfileMenu()

      if subdomain.branding.masthead_header_text
        DIV style: {color: 'white', margin: 'auto', fontSize: 60, fontWeight: 700, position: 'relative', top: 50}, 
          if subdomain.external_project_url
            A href: "#{subdomain.external_project_url}", target: '_blank',
              subdomain.branding.masthead_header_text
          else
            subdomain.branding.masthead_header_text

window.DefaultFooter = ReactiveComponent
  displayName: 'DefaultFooter'
  render: ->
    subdomain = fetch '/subdomain'
    DIV null,

      A href: "#{subdomain.external_project_url}", target: '_blank', style: {display: 'inline-block', margin: 'auto'},
        if subdomain.branding.logo
          IMG src: "#{subdomain.branding.logo}", style: {width: 300}

      DIV style: {marginTop: 30, fontSize: '70%'},
        TechnologyByConsiderit()
        DIV style: {color: 'rgb(131,131,131)', marginTop: 5},
          'Bug to report? Want to use this technology in your organization? '
          A style: {textDecoration: 'none', fontWeight: 700}, href: "mailto:admin@consider.it", 'Email us'


#####################
# Tigard
window.tigardHeader = ReactiveComponent
  displayName: 'tigardHeader'

  render: ->
    DIV style: {textAlign: 'center'},
      STYLE null, 
        '.banner_link {color: #78d18b; font-weight: 600; text-decoration: underline;}'

      ProfileMenu()
        
      DIV style: {color: '#707070', fontSize: 32, margin: '20px auto 0 auto', fontWeight: 800, textTransform: 'uppercase', position: 'relative', top: -20}, 
        'Help plan '
        A className: 'banner_link', href: 'http://riverterracetigard.com/', 'River Terrace'
        ', Tigard\'s newest neighborhood' 

window.tigardFooter = ReactiveComponent
  displayName: 'tigardFooter'
  render: ->
    DIV style: {marginTop: 20},
      A href: 'http://riverterracetigard.com/', target: '_blank', style: {display: 'inline-block', margin: 'auto'},
        IMG className: 'logo', src: "<%= asset_path 'tigard/logo.jpg' %>", style: {height: 80}         

      DIV style: {margin: '20px 0'},
        FBShare()
        Tweet
          hashtags: 'RiverTerrace'
          referer: 'https%3A%2F%2Ftigard.consider.it%2F'
          text: 'Help plan River Terrace.'
          url: 'https%3A%2F%2Ftigard.consider.it%2F'        

      DIV style: {padding: 9, fontSize: '70%'},
        TechnologyByConsiderit()



#####################
# City of Tigard
window.cityoftigardHeader = ReactiveComponent
  displayName: 'cityoftigardHeader'

  render: -> 
    logo_style = {height: 117, backgroundColor: 'white', borderRight: '2px solid white'}
    DIV style: {backgroundColor: '#253967'},
      ProfileMenu()

      DIV style: {height: 24},
        A href: '/', onClick: clickInternalLink, style: {position: 'absolute', top:0, zIndex: 999999},
          IMG className: 'logo', src: "<%= asset_path 'cityoftigard/logo.png' %>", style: logo_style 
        # SPAN style: {color: 'white', fontSize: 28, display: 'inline-block', margin: '20px 0 0 110px'}, 
        #   'Engage with the '
        #   A href: 'http://www.tigard-or.gov', style: {color: 'white', fontWeight: 600}, 'City of Tigard'
      # DIV style: {backgroundColor: color.proposal_header, width: '100%', height: 50}

####################
# Bitcoin demo
window['bitcoin-demoHeader'] = ReactiveComponent
  displayName: 'bitcoin-demoHeader'

  render: -> 
    # Background image box
    DIV
      style:
        height: 300
        backgroundImage: "url(<%= asset_path 'bitcoin/bg.jpg' %>)"
        backgroundPosition: 'center'
        backgroundSize: 'cover'

      ProfileMenu()

      # Logo
      IMG
        style: { display: 'block'; margin: 'auto'; height: 150; paddingTop: 45 }
        src: "<%= asset_path 'bitcoin/logo.svg' %>"

      # The word "Demo"
      DIV
        style:
          textAlign: 'center'
          fontWeight: 600
          margin: 'auto'
          fontSize: 24
          color: 'white'
          padding: "10px 0px 0px 60px"
        'demo'

####################
# Bitcoin Election

window['bitcoin-electionHeader'] = ReactiveComponent
  displayName: 'bitcoin-electionHeader'

  render: ->
    homepage = @root.page_name == 'homepage'
    window.lefty = true

    # Entire header (the grey area)
    DIV
      style:
        backgroundColor: '#676766'
        height: if not homepage then 63
      onMouseEnter: => @local.hover=true;  save(@local)
      onMouseLeave: => @local.hover=false; save(@local)

      STYLE null,
        '''.profile_anchor.login {font-size: 26px; padding-top: 16px;}
           p {margin-bottom: 1em}'''

      # The top bar with the logo
      DIV
        style:
          cursor: if not homepage then 'pointer'
          paddingTop: if homepage then 18 else 17
        onClick: if not homepage then => window.app_router.navigate("/", {trigger: true})

        # Back arrow
        if not homepage
          DIV
            style:
              position: 'absolute'
              left: 20
              top: 0
              color: '#eee'
              fontSize: 43
              fontWeight: 400
              paddingLeft: 25 # Make the clickable target bigger
              width: 180      # Make the clickable target bigger
            '<'

        # Logo
        A
          href: if homepage then 'https://bitcoinfoundation.org'
          IMG
            style:
              height: if homepage then 40 else 26
              marginLeft: if homepage then 82 else 106
            src: "<%= asset_path 'bitcoin/logo.svg' %>"

        if not homepage
          SPAN
            style:
              color: 'cyan'
              fontSize: 26
              fontWeight: 500
              marginLeft: 40
            'Distributed Deliberation'

        # Text
        if homepage
          election_day = new Date('02/13/2015')
          today = new Date()
          _second = 1000
          _minute = _second * 60
          _hour = _minute * 60
          _day = _hour * 24
          days_remaining = Math.ceil((election_day - today) / _day)

          DIV
            style:
              paddingLeft: 200
              color: 'white'
              fontSize: 22
              fontWeight: 300
              paddingTop: 23
              paddingBottom: 45
              maxWidth: 900

            DIV
              style:
                color: 'cyan'
                fontSize: 63
                fontWeight: 500
                marginBottom: 20
              'Distributed Deliberation'

            'We are choosing two new board members. '
            A
              href: 'https://blog.bitcoinfoundation.org/elections-update/'
              style: textDecoration: 'underline'
              "Voting opens in #{days_remaining} days!"

            P
              style: marginTop: 20
              'This deliberation website is open to the public.'
              ' But to vote, you must '
              A
                href: 'https://bitcoinfoundation.org/join/#individual-membership'
                style: textDecoration: 'underline'
                'become a member'
              ' of the Bitcoin Foundation.'

      ProfileMenu()



##########################
# Bitcoin Election

# For elections (where a proposal's cluster name is "candidate"), a
# proposal's "candidate" is the first editor.
window.proposal_candidate = (proposal) ->
  candidate = proposal.roles.editor.length > 0 and proposal.roles.editor[0]
  return candidate != '-' and candidate

window.ProposalSubheading = ReactiveComponent
  displayName: 'ProposalSubheading'
  render : ->
    subdomain = fetch('/subdomain')
    proposals = fetch('/proposals')
    heading_fontsize = 45

    # Determine the next proposal
    next_proposal =
      if proposals.clusters  # In case /proposals isn't loaded
        curr_cluster = _.findWhere proposals.clusters, {name: @proposal.cluster}
        if curr_cluster?.proposals.length > 1
          # Now find the current proposal in the cluster, and return the next one
          for proposal, index in curr_cluster.proposals
            if @proposal == proposal
              break
          next_index = (index + 1) % curr_cluster.proposals.length
          curr_cluster.proposals[next_index]

    DIV
      style:
        paddingBottom: 15
        marginLeft: 300
        marginTop: 30
        width: 560
        position: 'relative'

      # Next button
      if next_proposal
        A
          style:
            position: 'absolute'
            right: 0
          onClick: do (url = proposal_url(next_proposal)) =>
            => window.app_router.navigate(url, {trigger: true})
          'Next >'

      # Candidate photo
      if @proposal.cluster == 'Candidates'
        candidate = proposal_candidate(@proposal)
        if candidate
          Avatar
            key: candidate
            user: candidate
            img_style: 'large'
            style:
              position: 'absolute'
              height: 70
              width: 70
              marginLeft: -70 - 20
              borderRadius: 0
              backgroundColor: 'transparent'

      # Cluster name
      DIV
        style:
          fontStyle: 'italic'
        @proposal.cluster

      # Proposal name
      DIV
        style:
          lineHeight: 1.2
          fontWeight: 700
          fontSize: heading_fontsize
        @proposal.name


window.net_support = (proposal) ->
  opinions = fetch('/page/' + proposal.slug).opinions
  if not opinions
    return null
  sum = 0
  for o in opinions
    sum += o.stance
  return sum

window.ElectionHomepage = ReactiveComponent
  displayName: 'Homepage'
  render : ->
    subdomain = fetch('/subdomain')
    proposals = fetch('/proposals')
    line_height = '1.8em'

    DIV
      style: {fontSize: 22}

      STYLE null,
        '''a.proposal:hover {border-bottom: 1px solid grey}'''

      # List all clusters
      for cluster, index in proposals.clusters or []
        if cluster.proposals?.length > 0
          first_column =
            width: 350
            marginLeft: 200
            display: 'inline-block'
            verticalAlign: 'top'

          secnd_column =
            width: 300
            display: 'inline-block'
            verticalAlign: 'top'
            marginLeft: 50

          first_header =
            fontSize: 30
            marginBottom: 40
            fontWeight: 600
          _.extend(first_header, first_column)

          secnd_header =
            fontSize: 30
            marginBottom: 45
            fontWeight: 600
            position: 'relative'
            whiteSpace: 'nowrap'
          _.extend(secnd_header, secnd_column)

          special_secnd_headers =
            'Debate': "Candidates' Opinions"

          # Sort
          sorted_proposals = _.clone(cluster.proposals).sort((a,b) ->
            (net_support(b) or -10000) - (net_support(a) or -10000))

          # 
          # Cluster of proposals
          DIV
            style: margin: '45px 0'

            # Header of cluster
            H1
              style: first_header
              cluster.name
            H1
              style: secnd_header
              SPAN
                style:
                  position: 'absolute'
                  bottom: -43
                  fontSize: 21
                  color: '#444'
                  fontWeight: 300
                'Oppose'
              SPAN
                style:
                  position: 'absolute'
                  bottom: -43
                  fontSize: 21
                  color: '#444'
                  right: 0
                  fontWeight: 300
                'Support'
              special_secnd_headers[cluster.name] or 'Members\' Opinions'

            for proposal in sorted_proposals
              is_candidates = cluster.name.toLowerCase() == 'candidates'

              # Proposal
              DIV
                key: proposal.key
                style:
                  minHeight: 70

                DIV style: first_column,

                  if is_candidates
                    candidate = proposal_candidate(proposal)

                    # Person's icon
                    A
                      href: proposal_url(proposal)
                      onClick: clickInternalLink
                      Avatar
                        key: candidate
                        user: candidate
                        style:
                          height: 50
                          width: 50
                          borderRadius: 0
                          backgroundColor: '#ddd'

                  # Name of Proposal
                  DIV
                    style:
                      display: 'inline-block'
                      fontWeight: 400
                      marginLeft: if is_candidates then 18
                      paddingBottom: 20
                      width: first_column.width - 50 + (if is_candidates then -18 else 0)
                      marginTop: if is_candidates then 9
                    A
                      className: 'proposal'
                      style: if not is_candidates then {borderBottom: '1px solid grey'}
                      onClick: clickInternalLink
                      href: proposal_url(proposal)
                      proposal.name

                # Histogram for Proposal
                A
                  href: proposal_url(proposal)
                  onClick: clickInternalLink
                  DIV
                    style: secnd_column
                    MiniHisto(proposal: proposal, width: 300, height: 50)


MiniHisto = ReactiveComponent
  displayName: 'mini_histo'
  render: ->
    @opinions = fetch('/page/' + @props.proposal.slug).opinions
    icons = for opinion in @opinions
      # id = arest.key_id(user.key)
      #"/system/avatars/#{id}/small/#{user.avatar_file_name}"
      neutral = Math.abs(opinion.stance) < .1
      Avatar
        key: opinion.user
        user: opinion.user
        style:
          position: 'absolute'
          backgroundColor: '#d3d3d3'
          # filter:           if not @local.hover then 'grayscale(1)'
          # '-webkit-filter': if not @local.hover then 'grayscale(1)'
          # opacity:          if not @local.hover then .5
          # border:  if neutral then 'solid 1px black'
          # opacity: if neutral then .2
    DIV
      style:
        height: @props.height
        width: @props.width
        position: 'relative'
        borderBottom: '1px solid #999'
        display: if icons.length == 0 then 'none'
      # onMouseEnter: => @local.hover = true;  save(@local)
      # onMouseLeave: => @local.hover = false; save(@local)
      SPAN
        style:
          position: 'absolute'
          left: -21
          bottom: -12
          fontSize: 19
          fontWeight: 500
          color: '#444'
        '–'
      SPAN
        style:
          position: 'absolute'
          right: -21
          bottom: -13
          fontSize: 19
          fontWeight: 500
          color: '#444'
        '+'
      DIV
        ref: 'histo'
        icons

  attach_mini_histo: ->
    if @refs and @refs.histo and not @mounted
      page = fetch('/page/' + @props.proposal.slug)
      histo = @refs.histo.getDOMNode()
      icons = histo.childNodes
      opinions = for opinion, i in page.opinions
        {stance: opinion.stance, icon: icons[i]}
      mini_histo(@props.width, @props.height-1, histo, opinions)
      @mounted = true
  componentDidMount: ->
    @attach_mini_histo()
  componentDidUpdate: ->
    @attach_mini_histo()
  componentWillUnmount: ->
    @mounted = false


# MiniHisto2 = ReactiveComponent
#   displayName: 'mini_histo'
#   render: ->
#     # Virtual component computes the data... until I fix this
#     h = HistogramData
#           proposal_slug: @props.proposal.slug
#           width: @props.width
#           height: @props.height
#           max_avatar_size: 40
#     histogram_data = fetch('histogramdata/' + @props.proposal.slug)
#     if not histogram_data.columns
#       return DIV null, h, loading_indicator

#     columns = histogram_data.columns
#     num_columns = columns.length
#     avatar_size = histogram_data.avatar_size

#     effective_histogram_width = num_columns * avatar_size + 2
#     margin_adjustment = -(effective_histogram_width - HISTOGRAM_WIDTH) / 2

#     DIV
#       style:
#         height: @props.height
#         width: @props.width
#         backgroundColor: '#eee'
#         position: 'relative'
#       h
#       for bar, i in columns
#         for opinion, j in bar
#           user = opinion.user
#           Avatar 
#             key: user
#             user: user
#             style:
#               position: 'absolute'
#               height: avatar_size
#               width: avatar_size
#               left: i * avatar_size
#               bottom: j * avatar_size


window['bitcoin-electionHomepage'] = ElectionHomepage
window['bitcoin-election-proposal-subheader'] = ProposalSubheading

# For testing only:
#window['livingvotersguideHomepage'] = ElectionHomepage
#window['bitcoin-demoHomepage'] = ElectionHomepage
#window['bitcoinHomepage'] = ElectionHomepage
#window['usHomepage'] = ElectionHomepage






#####################
# Living Voters Guide

window.ThanksAndShareStrip = ReactiveComponent
  displayName: 'ThanksAndShareStrip'

  render: ->

    if @proposal.category && @proposal.designator
      tweet = "Flex your civic muscle on #{@proposal.category.substring(0,1)}-#{@proposal.designator}! Learn about the issue and decide here: "
    else 
      tweet = "Learn and decide whether you will support \'#{@proposal.name}\' on your Washington ballot here:"
    DIV 
      style: 
        position: 'fixed'
        left: 0
        bottom: 0
        width: '100%'
        backgroundColor: 'rgb(0,182,236)'
        padding: '5px 10px'
        color: 'white'
        zIndex: 999
        textAlign: 'center'
        fontWeight: 600
        fontSize: 18

      'Thanks for your opinion! Invite your friends and family: '
      SPAN style: {position: 'relative', top: 5, marginLeft: 5},
        FBShare()
        Tweet
          text: tweet
          url: "https://livingvotersguide.org/#{@proposal.slug}?results=true"


window.livingvotersguideHeader = ReactiveComponent
  displayName: 'livingvotersguideHeader'

  render: ->
    logo_style =
      position: 'absolute'
      left: 40
      top: 11
      width: 252
      zIndex: 1

    DIV className: 'header', 
      STYLE null, 
        """
        .header { height: 275px; background-image: url(<%= asset_path 'livingvotersguide/bg.jpg' %>); background-position: center; background-size: cover; }
        """

      DIV
        style:
          position: 'absolute'
          right: 17
          top: 17
        ProfileMenu({style: {height: 69, left: 0; top: 0, position: 'relative', display: 'inline-block'}})
        SPAN style: {color: 'white'}, '   |   '
        A href:'/about', onClick: clickInternalLink, style: {color: 'white', cursor: 'pointer'},
          'About'
        

      # Logo
      A href: (if @root.page_name == 'homepage' then '/about' else '/'), onClick: clickInternalLink,
        IMG className: 'logo', src: "<%= asset_path 'livingvotersguide/logo.png' %>", style: logo_style

      DIV
        style:
          color: 'white'
          height: 137
          #marginBottom: 10
          clear: 'both'
          paddingTop: 69

        # Online Intelligence for Washington Voters
        DIV
          style:
            fontSize: 32
            padding: '22px 40px 0 332px'
            width: 838
            height: '100%'
            float: 'left'
            fontWeight: 600
          SPAN null, 'Created by the people '
          'and for the people of Washington state'
          DIV
            style: 
              marginBottom: 15
              marginTop: 10
              fontSize: 18
              fontWeight: 300
            "Thanks Washington! We'll see you again in 2015."



        DIV
          style:
            fontSize: 18
            padding: '14px 40px 0 36px'
            float: 'left'
            width: 290
            height: '100%'
          DIV null, 'Hosted by'
          A {href: 'http://seattlecityclub.org'}, B(style:{fontWeight:'bold', color: 'white'}, 'Seattle CityClub')
          DIV style: {marginTop: 8}, 'with fact-checks from'
          A {href: 'http://spl.org'}, B(style:{fontWeight:'bold', color: 'white'}, 'The Seattle Public Library')


window.ZipcodeBox = ReactiveComponent
  displayName: 'ZipcodeBox'
  render: ->
    c = fetch('/current_user')
    extra_text = if Modernizr.input.placeholder then '' else ' Zip Code'
    onChange = (event) =>
      if event.target.value.match(/\d\d\d\d\d/)
        c.tags.zip = event.target.value
        save(c)

      else if event.target.value.length == 0
        c.tags.zip = undefined
        @local.stay_around = true
        save(c)
        save(@local)

    onBlur = =>
      @local.stay_around = false
      save(@local)

    if c.tags.zip or @local.stay_around
      STYLE null,
        """
        .filled_zip:hover input, .filled_zip input:focus{
          border: 1px solid #767676;
          background-color: white;}
        """

      # Render the completed zip code box
      DIV 
        className: 'filled_zip'
        style: 
          padding: '13px 23px'
          backgroundColor: '#F5F4ED'
          fontSize: 18
          fontWeight: 400
          width: 245
          margin: 'auto'

        'Customized for:'
        INPUT
          style: 
            fontSize: 18
            fontWeight: 600
            border: '1px solid transparent'
            backgroundColor: 'transparent'
            width: 60
            marginLeft: 7
          type: 'text'
          key: 'zip_input'
          defaultValue: c.tags.zip or ''
          onChange: onChange
          onBlur: onBlur

    else
      # Render the ragged input box
      DIV style: {margin: '55px 0'},
        DIV 
          style: 
            backgroundImage: 'url(<%= asset_path("greytriangle_up.png") %>)'
            backgroundRepeat: '(repeat-x)'
            backgroundSize: '18px 9px'
            height: 9

        DIV style: {backgroundColor: '#93928E' },
          DIV
            style:
              fontSize: 24
              width: PAGE_WIDTH
              color: 'white'
              margin: 'auto'
              padding: '35px 0'
              paddingLeft: '170px'
            'Customize this guide for your' + extra_text
            INPUT
              type: 'text'
              key: 'zip_input'
              placeholder: 'Zip Code'
              style: {margin: '0 0 0 12px', fontSize: 24, height: 42, width: 152, padding: '4px 20px'}
              onChange: onChange
            BR null
            SPAN style: {fontSize: 18}, 'Your local congressional race and measures will be revealed!'

        DIV 
          style: 
            backgroundImage: 'url(<%= asset_path("greytriangle_down.png") %>)'
            backgroundRepeat: '(repeat-x)'
            backgroundSize: '18px 9px'
            height: 9


window.livingvotersguideFooter = ReactiveComponent
  displayName: 'livingvotersguideFooter'
  render: ->
    DIV null,
      DIV style: {color: 'white', backgroundColor: '#93928E', marginTop: 48, padding: 18},
        DIV style: {fontSize: 18, fontStyle: 'italic', textAlign: 'left', width: 690, fontStyle: 'italic', margin: 'auto'},
          'Unlike voter guides generated by government, newspapers or advocacy organizations, Living Voters Guide is created '
          SPAN style: {fontWeight: 600}, 'by the people'
          ' and '
          SPAN style: {fontWeight: 600}, 'for the people'
          ' of Washington State. It’s your platform to learn about candidate and ballot measures, decide how to vote and express your ideas. We believe that sharing our diverse opinions leads to making wiser decisions together. '
          A style: {color: 'white', textDecoration: 'underline', fontWeight: 'normal'}, href: '/about', onClick: clickInternalLink, 'Learn more'
          '.'

        DIV style: {marginTop: 20},
          FBLike()
          Tweet
            hashtags: 'lvguide'
            referer: 'https%3A%2F%2Flivingvotersguide.org%2F'
            related: 'lvguide'
            text: 'I%20flexed%20my%20civic%20muscle%20%40lvguide.'
            url: 'https%3A%2F%2Flivingvotersguide.org%2F'


      DIV style: {paddingTop: 24, paddingBottom: 12, fontSize: 18, fontWeight: 500, color: 'rgb(77,76,71)'},
        'Bug to report? Have a comment? Confused? '
        A href: "mailto:admin@livingvotersguide.org", style: {color: 'rgb(77,76,71)'},
          'Email us'

      DIV style: {paddingBottom: 18},

        DIV style: {textAlign: 'left', padding: '0 12px', color: 'rgb(131,131,131)', display: 'inline-block', fontSize: 15},
          A href: "http://seattlecityclub.org", style: {position: 'relative', top: 3, fontWeight: 400},
            IMG src: "<%= asset_path 'livingvotersguide/cityclub.svg' %>"

        DIV style: {textAlign: 'left', padding: '0 12px', display: 'inline-block', fontSize: 11, position: 'relative', top: -5},
          #"Fact-checking by "
          A href: 'http://spl.org', style: {textTransform: 'uppercase', textDecoration: 'none', color: 'rgb(6, 61, 114)', display: 'block', fontWeight: 600, width: 100}, target: '_blank', 
            'The Seattle Public Library'

      DIV style: {padding: 9},
        TechnologyByConsiderit()

styles += """
[subdomain="livingvotersguide"] td.summary_measure_designator {
  padding-top: 4px;
  width: 50px;
  display: inline-block;
  font-size: 15px; }
[subdomain="livingvotersguide"] .endorser_group {
  width: 305px;
  display: inline-block;
  margin-bottom: 1em;
  vertical-align: top; }
  [subdomain="livingvotersguide"] .endorser_group.oppose {
    margin-left: 60px; }
  [subdomain="livingvotersguide"] .endorser_group li, [subdomain="livingvotersguide"] .endorser_group a {
    font-size: 12px; }
  [subdomain="livingvotersguide"] .endorser_group ul {
    margin-left: 0px;
    padding-left: 10px; }
[subdomain="livingvotersguide"] .total_money_raised {
  font-weight: 600;
  float: right; }
[subdomain="livingvotersguide"] .funders li {
  list-style: none; }
  [subdomain="livingvotersguide"] .funders li .funder_amount {
    float: right; }
[subdomain="livingvotersguide"] .news {
  padding-left: 0; }
  [subdomain="livingvotersguide"] .news li {
    font-size: 13px;
    list-style: none;
    padding-bottom: 6px; }
[subdomain="livingvotersguide"] .editorials ul {
  padding-left: 10px; }
  [subdomain="livingvotersguide"] .editorials ul li {
    list-style: none;
    padding-top: 6px; }

"""
