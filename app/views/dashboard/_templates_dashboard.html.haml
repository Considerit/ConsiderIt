

- cache [current_tenant] do 

  = theme_stylesheet_link_tag 'admin'

  = javascript_include_tag 'admin'

  #c-admin-template-loaded


  %script{ :type => "text/template", :id => "tpl_dashboard_app_settings"}

    .m-dashboard-heading
      %h2
        Application Settings

      .m-dashboard-subheading
        System-wide configuration changes

    = form_for :account, :url => account_path, :remote => true, :method => :put, :html => { :class => 'm-dashboard-edit-account'} do |f|

      .field
        = f.label :app_title, 'Application Title'
        = f.text_field :app_title, :value => "{{account.app_title}}"
        .sublabel
          A short title that is displayed in emails and in the browser window. 

      .field
        = f.label :contact_email, 'Contact Email'
        = f.text_field :contact_email, :value => "{{account.contact_email}}"
        .sublabel
          The email from which notification emails are set. 

      .field  
        = f.check_box :enable_moderation
        = f.label :enable_moderation, 'Enable Moderation'
        .sublabel
          Whether you wish to moderate user contributed content like comments and pro and con points. 

      .field
        = f.check_box :enable_position_statement

        = f.label :enable_position_statement, 'Enable Position Statement'
        .sublabel
          Allow users to write a summary of their position, in addition to their pro/con list and stance. 


      %fieldset
        %legend
          Wording

        %table
          %tr
            %td
              .field
                = f.label :pro_label, 'Supporting point label'
                = f.text_field :pro_label, :value => "{{account.pro_label}}"
                .sublabel
                  Default is "pro"              
            %td
              .field
                = f.label :con_label, 'Opposing point label'
                = f.text_field :con_label, :value => "{{account.con_label}}"
                .sublabel
                  Default is "con"
          %tr
            %td
              .field
                = f.label :slider_left, 'Supporting slider label'
                = f.text_field :slider_left, :value => "{{account.slider_left}}"
                .sublabel
                  Default is "support"
            %td
              .field
                = f.label :slider_right, 'Opposing slider label'
                = f.text_field :slider_right, :value => "{{account.slider_right}}"
                .sublabel
                  Default is "oppose"
        .field
          = f.label :considerations_prompt, 'Header for pro/con list'
          = f.text_field :considerations_prompt, :value => "{{account.considerations_prompt}}"
          .sublabel
            Default is "What are the most important pros and cons to you?"
        .field
          = f.label :slider_prompt, 'Header for stance slider'
          = f.text_field :slider_prompt, :value => "{{account.slider_prompt}}"
          .sublabel
            Default is  "Do you support this proposal?"

      .save_block
        = f.submit 'Save', :class => 'button'

  %script{ :type => "text/template", :id => "tpl_dashboard_manage_proposals"}
    
    .m-dashboard-heading
      %h2
        Manage proposals

      .m-dashboard-subheading
        Access and edit all proposals, active and inactive  

    .active
      %h3
        Active proposals

      (( if( active_proposals.length > 0 ){ )) 
      %table.table.table-condensed.table-striped
        %tbody
          (( _.each( active_proposals, function(proposal) { ))
          %tr.position
            %td.proposal
              {{ proposal.get('name') ? proposal.get('name').slice(0, 50) : 'Untitled' }}
            %td.action
              %a{ :href => "{{ Routes.new_position_proposal_path(proposal.get('long_id')) }}", :target => '_blank' }
                Edit

          (( }); ))
      (( } else { ))
      There are no active proposals.
      (( } ))

    .inactive
      %h3
        Inactive proposals

      (( if( inactive_proposals.length > 0 ){ )) 
      %table.table.table-condensed.table-striped
        %tbody
          (( _.each( inactive_proposals, function(proposal) { ))
          %tr.position
            %td.proposal
              {{ proposal.get('name') ? proposal.get('name').slice(0, 50) : 'Untitled' }}
            %td.action
              %a{ :href => "{{ Routes.new_position_proposal_path(proposal.get('long_id')) }}", :target => '_blank' }
                Edit
          (( }); ))

      (( } else { ))
      There are no inactive proposals.
      (( } ))




  %script{ :type => "text/template", :id => "tpl_dashboard_user_roles"}
    .m-dashboard-heading
      %h2
        Manage user roles

      .m-dashboard-subheading
        Change the system privileges for any user

    %table.table.table-condensed.table-striped
      %tbody
        (( users_by_roles_mask.each( function(user){ ))  

        %tr
          %td.user
            {{ user.get('name') }}
          %td.email
            (( if( user.get('email') && user.get('email').length > 0 ) { ))
            {{ user.get('email').length > 50 ? user.get('email').slice(0,50) + '...' : user.get('email') }}
            (( } ))

          %td.action
            .role_settings.dialog
              %a.m-user_roles-invoke_role_change{ :'data-id' => "{{ user.id }}"}
                Roles:
                %span
                  {{ user.role_list() }}
                %span.m-user_roles-roles_triangle
                  &#x25BE;

        (( }) ))  

  %script{ :type => "text/template", :id => "tpl_dashboard_user_roles_edit"}
    = form_for :user, :url => "{{Routes.update_role_path(user.id)}}", :remote => true, :method => :post, :html => { :class => 'm-user_roles-edit_form detachable' } do |f|
      %h1
        Authorized roles for {{ user.get('name') && user.get('name').length > 0 ? user.get('name') : user.get('email') }}

      .radio_block
        .option
          = f.radio_button :role, 'admin'
          = f.label :role, 'Admin', :value => 'admin'
          .sublabel
            Grants all permissions to this user.
        .option.specific
          = f.radio_button :role, 'specific'
          = f.label :role, 'Specific roles', :value => 'specific'
          .sublabel
            Choose amongst the available roles.

            .suboption
              = f.check_box 'manager'
              = f.label 'manager', 'Manager'
              .sublabel
                Can create and edit all proposals.

            - if current_tenant.enable_moderation
              .suboption
                = f.check_box 'moderator'
                = f.label 'moderator', 'Moderator'
                .sublabel
                  Can approve/disapprove user contributed content.

            .suboption
              = f.check_box 'evaluator'
              = f.label 'evaluator', 'Evaluator'
              .sublabel
                Create official responses (like fact-checks) to pro/con points.

            .suboption
              = f.check_box 'analyst'
              = f.label 'analyst', 'Analyst'
              .sublabel
                Can explore data trends.


        .option
          = f.radio_button :role, 'user'
          = f.label :role, 'User', :value => 'user'
          .sublabel
            Has no special permissions.

      .save_block
        = f.submit 'Save'
        %a.cancel
          cancel  

  - if current_tenant.enable_moderation
    = render :partial => "moderatable/templates"

  // TODO: add account switch for assessments
  = render :partial => "assessable/templates"
