-#*********************************************
  For the ConsiderIt project.
  Copyright (C) 2010 - 2012, University of Washington
  Author: Travis Kriplean
  Licensed under the AGPL
  See https://github.com/tkriplean/ConsiderIt/ for details.
  *********************************************

-# TODO: Cache this partial as per http://broadcastingadam.com/2011/05/advanced_caching_in_rails/

- point_creator = (current_user && point.user_id == current_user.id) || point.published == false

= cache [point, point.user_id, point_creator, origin, Digest::MD5.hexdigest(point.includers || '')] do

  - has_details = point.text && point.text.length > 0

  %li.point_in_list{ :id => "point-#{point.id}", :class => "point_in_list_#{origin} point_in_list #{point.is_pro ? 'pro' : 'con'} commentable #{point_creator ? 'added_by_me' : ''}", :point => point.id,  :user => point.hide_name ? nil : point.user_id, :includers => point.includers }
        
    %a.toggle.less.hide.point_text_toggle
      x

    %ul.header
      %li.type.first
        = "#{point.is_pro ? 'Pro' : 'Con'}" 
      %li.proposal
        = "#{point.proposal.title.length > 70 ? "#{point.proposal.title[0..70]}..." : point.proposal.title}"
      %li.permalink
        = link_to( 'permalink', proposal_point_path(@proposal,point) )

    .body

      - if !point.hide_name && point.user
        = image_tag point.user.avatar.url(true ? :medium_dark : :medium), :class => 'avatar', :alt => "#{h point.user}'s profile picture"

      .bullet_point
        &#8226;
            
      %p.point_text.nutshell{:class => "#{point_creator ? 'author' : 'reader'}"}
        %span.text
          - if point.nutshell.length > 140
            = point.nutshell[0,140]
            - point.text = point.nutshell[140, point.nutshell.length] + point.text
          - elsif point.nutshell.length > 0
            = point.nutshell
          - else
            = point.text.length > 137 ? point.text[0,137] : point.text

          - if has_details
            %span.details_indicator
              (&#8230;)
        
        %span.nested_user
          - if point.hide_name
            anonymous
          - elsif point.user
            = point.user.username
          - else
            %span.unknown
              unknown
      
      - if point_creator
        .point_text.nutshell.nutshell_edit
          = render :partial => 'points/make_editable', :locals => { :point => point, :field => :nutshell, :sync_with => "#expanded .point_text.nutshell span.text", :validations => {:required => true, :maxlength => 140} }

      .point_text.full

        .details
          - if has_details 
            - full_text = simple_format(point.text.gsub(/\r\n/,""))

            - if point_creator
              = render :partial => 'points/make_editable', :locals =>  { :point => point, :field => :text, :wysiwyg => true }

            - else
              = full_text


        -#.link
          - if point.point_link_count > 0
            %ul
              = render :partial => 'point_links/show', :collection => point.point_links, :as => :point_link

        .nested_user
          - if point.hide_name
            anonymous
          - elsif point.user
            = point.user.username
          - else
            unknown

    .operations


      .read_more
        - num_comments = point.comment_count
        %a.toggle.more.point_text_toggle.point_operation

          //- if has_details
          //  &#8230;
          
          #{ num_comments == 1 ? "1 comment" : "#{num_comments} comments"}

          //#{ num_comments == 1 ? "1 comment" : num_comments > 1 ? "#{num_comments} comments" : has_details ? "more" : "0 comments"}

          //#{has_details ? 'details & ' : ''} discussion#{num_comments > 0 ? "(" + num_comments.to_s + ")" : ''}          

      - if point_creator
        .edit

          %a.editpoint.point_operation
            edit
          -# = render :partial => 'points/form', :locals => {:point => point, :is_pro => point.is_pro, :action => 'edit' }

    .point_operations
      - if point.published
        = render :partial => 'acts_as_followable/follow', :locals => {:followable => point, :obj => [@proposal, point], :title => 'Get notifications when the point is updated or someone comments on it. You can easily unsubscribe later.'}

      .remove            
        - if point_creator

          = link_to "Delete this point", proposal_point_path(@proposal.long_id, point, :authenticity_token => form_authenticity_token), :remote => true, :confirm => "Are you sure?", :method=>:delete, :class => 'button point_operation delete_point'


        - elsif !@results_page

          = form_for [@proposal, point], :remote => true, :url => proposal_point_inclusions_path(@proposal.long_id, point, :page => @page, :delete => true),  :method=>:post, :html => {:class => 'uninclude_point_form'} do |f|
            = f.submit 'Remove from your pro/con list', :class => 'button point_operation uninclude_point', :title => 'Remove this point from your pro/con list'

      .include
        - if !@results_page

          = form_for [@proposal, point], :remote => true, :method => :post, :url => proposal_point_inclusions_path(@proposal.long_id, point, :page => @page) do |f|
            = f.submit 'Add to your pro/con list', :class => 'button inclusion_submit', :title => 'Add this point to your pro/con list.'


    .extra  
      .ajax_loading
      
    .clear