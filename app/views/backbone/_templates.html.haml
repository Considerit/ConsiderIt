
- cache ['templates', current_tenant] do



  %script{ :type => "text/template", :id => "tpl_breadcrumbs"}
    (( _.each(crumbs, function(crumb,idx) {  ))
    (( var name=crumb[0], loc=crumb[1]; ))

    %li.l-navigate-crumb
      %a{:href => "{{loc}}"}
        {{name}}
      (( if( idx != crumbs.length - 1) { ))
      &#x27e9;
      (( } ))
    (( }); ))

  %script{ :type => "text/template", :id => "tpl_point_follows"}
    (( if( published && ConsiderIt.current_user.is_logged_in() ) { ))

    (( var follows_class = already_follows ? 'hide' : ''; ))
    (( var unfollows_class = already_follows ? '' : 'hide'; ))
    %div{ :class => "follow {{ follows_class }}"}
      = form_for :follows, :url => "{{ Routes.follow_path() }}", :as => :follow, :method => :get, :remote => true do |f|
        = f.hidden_field :followable_id, :value => "{{id}}"
        = f.hidden_field :followable_type, :value => "Point"
        = f.submit "Follow this point", :title => 'Get notifications when the point is updated or someone comments on it. You can easily unsubscribe later.' #, :class => 'button'

    %div{ :class => "unfollow {{ unfollows_class }}"}
      = form_for :follows, :url => "{{ Routes.unfollow_path() }}", :as => :follow, :remote => true do |f|
        = f.hidden_field :user_id, :value => "{{ ConsiderIt.current_user.id }}"
        = f.hidden_field :followable_id, :value => "{{ id }}"
        = f.hidden_field :followable_type, :value => "Point"
        = f.submit "Unfollow this point" #, :class => 'button'

    (( } ))


  %script{ :type => "text/template", :id => "tpl_point" }   

    (( if (hide_name || user.name == 'Anonymous' ) { ))
    %span.avatar.m-point-author-avatar.m-avatar-anonymous{:style => "background-image: url(/system/default_avatar/small_default-profile-pic.png)", :title => "This user has requested to remain anonymous"}
    .m-point-author-name
      by Anonymous
    (( } else if (user) { ))

    %a.avatar.m-point-author-avatar{ :id => "avatar-{{user.id}}", :alt => "{{user.name}}'s profile", :'data-id' => "{{user.id}}", :'data-target' => "user_profile_page" }
    .m-point-author-name{:'data-id' => "{{user.id}}", :'data-target' => "user_profile_page" }
      by {{user.name}}
    (( } ))

    .m-point-wrap{ :'data-target' => "m-point-details", :'data-id' => "{{id}}" }

      .m-point-nutshell-wrap
        .m-point-nutshell
          {{ adjusted_nutshell }}

      .m-point-details-description 
        {{ text }}

      .m-point-operations

        .m-point-follow

        %a.m-point-read-more 
          //{ :href => "{{Routes.proposal_point_path(proposal.long_id, id)}}" }        
          {{ comment_count == 1 ? "1 comment" : comment_count + " comments"}}
        %a.m-point-remove{ :'data-target' => 'point-remove', :'data-id' => "{{id}}"}
          Remove

        .m-point-assess

      .m-point-include-wrap
        %a.m-point-include{ :'data-target' => 'point-include', :'data-id' => "{{id}}"}
          Add to your list
          %span.list_connector



  %script{ :type => "text/template", :id => "tpl_newpoint" }      
    
    .m-newpoint

      %a.m-newpoint-new
        Write a new {{is_pro ? ConsiderIt.current_tenant.get_pro_label({capitalize: true}) : ConsiderIt.current_tenant.get_con_label({capitalize: true}) }}

      .m-newpoint-form
        = hidden_field_tag :is_pro, "{{is_pro}}", :class => 'm-newpoint-is_pro'

        .m-newpoint-nutshell-wrap
          = text_area_tag :nutshell, nil, :placeholder => 'Summarize your point (required)', :cols => 28, :class => "m-newpoint-nutshell is_counted", :required=>true, :maxlength => 140, :pattern => "^.{3,}"
          %span.count
            140

        .m-newpoint-description-wrap
          = text_area_tag :text, nil, :placeholder => "Write a longer description (optional)", :title => "Write a longer description (optional)", :cols => 28, :class => "m-newpoint-description"

        (( var type_label = is_pro ? 'pro' : 'con', label = "hide_name-" + type_label; ))

        .m-newpoint-anonymous-wrap
          %label{ :for => "{{label}}", :title => 'We encourage you not to hide your name from other users. Signing your point with your name lends it more weight to other participants.'}
            conceal your name

          %input.m-newpoint-anonymous{ :id => "{{label}}", :name => "{{label}}", :type => "checkbox"}

        .m-newpoint-submit

          %a.m-newpoint-cancel
            cancel

          %input.m-newpoint-create.button{ :type => 'submit', :value => 'Done'}
          
  %script{ :type => "text/template", :id => "tpl_pointlist_empty" }
    .m-pointlist-empty
      none recognized

  %script{ :type => "text/template", :id => "tpl_pointlistbrowse_header" }
    .m-pointlist-browse-header-close

      %a.m-pointlist-browse-toggle
        {{ pros ? '&laquo;' : '' }} stop browsing points {{ pros ? '' : '&raquo;' }}
    %h3.m-pointlist-browse-heading
      {{ pros ? 'Pro' : 'Con' }} considerations by other participants


    - ranks = [ { :name => 'persuasiveness', :title => 'Considerations that are proportionately better at convincing other people to add them to their pro/con list are rated higher. Newer considerations that have been seen by fewer people may be ranked higher than the most popular considerations.', :target => 'persuasiveness'}, { :name => 'Popularity', :title => 'Considerations that have been added to the most pro/con lists are ranked higher.', :target => 'popularity'}, { :name => "Newest", :title => 'Newest considerations shown first', :target => 'created_at' } ]


    - #{ :name => 'Common Ground', :selected => false, :title => 'Considerations that tend to be added by both supporters and opposers are ranked higher. Low ranked considerations are more divisive.', :target => '-divisiveness'}]

    .m-pointlist-browse-sort
      %span.m-pointlist-browse-sort-label
        sort by: 
      %ul
        - ranks.each do |rank|
          %li.m-pointlist-sort-option
            (( var selected_class = selected == "#{rank[:target]}" ? 'selected' : ''; ))
            %a{ :title => rank[:title], :class => "{{selected_class}}", :'data-target' => rank[:target] }
              = rank[:name]


  %script{ :type => "text/template", :id => "tpl_pointlistbrowse" }
    %a.m-pointlist-browse-toggle
      View all {{cnt}} {{ pros ? ConsiderIt.current_tenant.get_pro_label({capitalize: true, plural: true}) : ConsiderIt.current_tenant.get_con_label({capitalize: true, plural: true}) }}

  %script{ :type => "text/template", :id => "tpl_pointlistpagination" }
    %a.m-pointlist-backward
      (( if(start_record > 1){ ))
      &#9650;
      (( } ))

    .m-pointlist-status

      %span.m-pointlist-start
        {{start_record}}
      %span &ndash;
      %span.m-pointlist-end
        {{end_record}}
      %span
        = surround ' ' do
          of
      %span.m-pointlist-total
        {{total_records}}

    %a.m-pointlist-forward
      (( if(end_record != total_records){ ))
      &#9660;
      (( } ))




  %script{ :type => "text/template", :id => "tpl_newcomment" }   
    .m-new-comment            

      %span.avatar.m-new-comment-avatar{ :id => "avatar-{{user.id}}", :alt => "{{user.get('name')}}'s profile picture"}

      .m-new-comment-body
        %textarea.m-new-comment-body-field.is_counted{ :name => :body, :placeholder => 'Type your comment here...', :title => 'Type your comment here...' }
        %span.count
          1000

        (( if( ConsiderIt.current_user.is_logged_in() ) { ))
        .m-new-comment-submit-wrap
          %span.m-new-comment-civility-reminder
            Thanks for being civil!

          %button.m-new-comment-submit.button
            Add comment

        (( } else { ))
        .m-login
          You must be logged in to leave a comment.
          %a.m-login-signin{:'data-target' => 'login'}
            Sign In
          %a.m-login-signup{:'data-target' => 'create_account'}
            Create Account
        (( } ))


  %script{ :type => "text/template", :id => "tpl_comment" }   
    
    (( if( moderation_status == 0 ){ ))
    %i
      This comment has been hidden because it contains a personal attack, is inappropriate (e.g. advertising), or is wildly offtopic.
    ((} else { ))

    %a.avatar.m-comment-avatar{ :id => "avatar-{{user.id}}", :alt => "{{user.get('name')}}'s profile picture", :'data-id' => "{{user.id}}", :'data-target' => "user_profile_page"}

    .m-comment-body-wrap
      .m-comment-body
        {{body}}

      %span.m-comment-author
        &ndash; 
        %a{ :href => "{{Routes.profile_path(user.id)}}", :'data-id' => "{{user.id}}", :'data-target' => "user_profile_page"}
          {{ user.get('name') }}

    - if false && can_update
      .m-comment-edit-wrap
        %a.m-comment-edit
          edit
        .m-comment-edit-form.hide
          -#= render :partial => 'commentable/make_editable', :locals => { :comment => comment, :validations => {:maxlength => 1000} }
          %a
            cancel
    (( } ))


  %script{ :type => "text/template", :id => "tpl_proposal_list_new_conversation"}

    .m-proposals-new{:'data-domain' => 'homepage'}
      %button.m-new-proposal-submit
        Start a new conversation

  %script{ :type => "text/template", :id => "tpl_proposal_list_header"}
    .m-proposals-list-header{:'data-domain' => 'homepage'}
      .m-proposals-heading
        - sortable = [ {:name => 'Most active', :target => 'activity'}, {:name => 'Newness', :target => 'created_at'} ]
        .m-proposals-sort-container
          .title
            Sort by: 
          - sortable.each do |sort|
            (( var selected_class = selected_sort == "#{sort[:target]}" ? 'selected': '';))
            %a{:'data-target' => sort[:target], :'data-type' => 'sort', :class => "m-proposallist-sort {{selected_class}}"}
              = sort[:name]

        / - filterable = [ {:name => 'All', :target => 'all'}, {:name => 'Open', :target => 'active'}, {:name => 'Completed', :target => '-active'} ]

        / .m-proposals-filter-container
        /   .title
        /     Filter to: 
        /   - filterable.each do |fil|
        /     (( var selected_class = selected_filter == "#{fil[:target]}" ? 'selected': '';))
        /     %a{:'data-target' => fil[:target], :'data-type' => 'filter', :class => "m-proposallist-filter {{selected_class}}"}
        /       = fil[:name]

  %script{ :type => "text/template", :id => "tpl_proposal_list_pagination"}
    .m-proposals-list-pagination{:'data-domain' => 'homepage'}
      .m-proposals-list-pagination-wrap
        (( if (data_loaded) { ))
        %span.m-proposals-list-pagination-pages
          (( if (currentPage != 1) { ))
          %span.m-proposals-list-pagination-jump-left
            %a.m-proposals-list-pagination-jump{:'data-target'=> 'proposallist:first'}
              &laquo; First
            %a.m-proposals-list-pagination-jump{:'data-target'=> 'proposallist:prev'}
              &laquo;
          (( } ))
          (( _.each (pageSet, function (p) { ))
          (( if (currentPage == p) { ))
          %span.selected
            {{ p }}
          (( } else { ))
          %a.m-proposals-list-pagination-page{:'data-target' => 'proposallist:page', :'data-page' => "{{p}}"}
            {{ p }} 
          (( } ))
          (( }); ))
          (( if (lastPage != currentPage && lastPage != 0) { ))
          %span.m-proposals-list-pagination-jump-right
            %a.m-proposals-list-pagination-jump{:'data-target'=> 'proposallist:next'}
              &raquo;
            %a.m-proposals-list-pagination-jump{:'data-target'=> 'proposallist:last'}
              Last &raquo;

          (( } ))

        .m-proposals-list-pagination-current
          %span.current
            {{ startRecord }}
          &ndash;
          %span.perpage
            {{ endRecord }} 
          of
          %span.total
            {{ totalRecords }} 
          shown.
        (( } else { ))
        %button.m-pointlist-pagination-showmore
          {{ prompt }} 
        (( } ))



  %script{ :type => "text/template", :id => "tpl_unexpanded_proposal" }
    .l-content-wrap

      .l-message.m-proposal-message.m-proposal-introduction
        .l-message-speaker.left.l-message-initiator
          %a{ :'data-id' => "{{user_id}}", :'data-target' => "user_profile_page" }
            %img{:src => "{{ avatar }}"}
        .l-message-body.left.down.m-proposal-description
          = render :partial => "shared/bubble", :locals => {:left => true, :down => false}

          .l-message-title.m-proposal-description-title
            {{title}}
          %span.m-proposal-description-title-readmore
            [read more]
          .l-message-details.m-proposal-description-body
            {{description}}
          .m-proposal-description-details

            (( _.each(description_detail_fields, function(field) {  ))

            (( if( field[2] != '') { ))
            .m-proposal-description-detail-field
              .m-proposal-description-detail-field-heading
                {{ field[1] }}
                %a.hidden
                  show
              .m-proposal-description-detail-field-full.hide
                %div{ :class => "m-proposal-description-detail-field-{{field[0]}}" }
                  {{ field[2] }}
                %a.hidden
                  show
            (( } ))

            (( }); ))


        .l-message-recipient




      (( if(!published){ ))

      .m-proposal-strip_publish
        = form_for :proposal, :url => "{{Routes.proposal_path(long_id)}}", :method => :put, :remote => true, :html => {:class => 'm-proposal-publish-form'} do |f|
          = f.hidden_field :published, :value => true

          = f.submit 'Publish this new conversation', :class => 'm-proposal-publish'

        -# = link_to "cancel", "{{Routes.proposal_path(long_id)}}", :confirm => "Canceling will permanently delete this conversation. Are you sure?", :method => :delete, :remote => true, :class => 'm-delete_proposal'

      (( } ))

  %script{ :type => "text/template", :id => "tpl_proposal_strip" }
    (( if(published){ ))
    .m-proposal-connect.m-proposal-strip

      %ul
        / (( if( ConsiderIt.current_user.is_logged_in() ) { ))
        / (( var selected_class = ConsiderIt.current_user.is_following('Proposal', id) ? 'selected' : ''; ))
        / %li.m-proposal-action-label
        /   Follow this conversation:
        / %li
        /   %button{ :class => "{{ selected_class }} m-proposal-follow_conversation" }
        /     Get email updates

        / (( } ))

        %li.m-proposal-action-label
          Help spread the word
        %li.m-proposal-action-link
          .zocial.icon.facebook
        %li.m-proposal-action-link
          .zocial.icon.twitter
        %li.m-proposal-action-link
          .zocial.icon.permalink
        %li.m-proposal-action-label
          Link to this conversation
    (( } ))

  %script{ :type => "text/template", :id => "tpl_initiator_response" }

    (( if(published){ ))
    .l-message.m-proposal-message.m-proposal-leader-response
      .l-message-speaker.left.l-message-initiator.small
        %a{ :'data-id' => "{{user_id}}", :'data-target' => "user_profile_page" }
          %img{:src => "{{ avatar }}"}


      .l-message-body.left.down.m-proposal-description
        = render :partial => "shared/bubble", :locals => {:left => true}

        (( var r = Math.floor(Math.random()*3); ))

        .rep_statement
          (( if(r==0){ ))
          I've not yet taken a stance
          (( } else if(r==1){ ))
          I hope to hear from more of you. Meanwhile, these are 
          %a{ :style => "text-decoration: underline; cursor: pointer;"}
            my thoughts so far. 
          (( } else{ ))
          Based on your input and my considerations, I've decided that I support. Read my 
          = surround '', '.' do
            %a{ :style => "text-decoration: underline; cursor: pointer;"}
              full report
          Thanks!
          (( } ))  

      .l-message-recipient      
    (( } ))



  %script{ :type => "text/template", :id => "tpl_your_action_craft"}
    .l-message-recipient

    .l-message-body
      %a.m-position-your-action-body.join{ :href => "{{Routes.new_position_proposal_path( long_id )}}"}
        {{ call }}

    .l-message-speaker


  %script{ :type => "text/template", :id => "tpl_your_action_save"}
    .l-message-recipient

    .l-message-body.m-position-your-action-body-wrap
      %a.m-position-your-action-body.submit
        (( if(updating){ ))
        Update your position
        (( } else { ))
        Save your position
        (( } ))

      .m-position-submit-footer-wrap
        .notifications

          = label_tag :follow_proposal, '', :title => 'We\'ll send periodic email notifications summarizing activity on the proposal, as well as alerts about new pro and con points. You can easily unsubscribe later.' do
            
            (( if (follows) { )) 
            = check_box_tag :follow_proposal, 'true', true
            (( } else { ))
            = check_box_tag :follow_proposal, 'true'
            (( }))

            %span
              Get email updates about new activity

        %a.m-position-cancel
          cancel


    .l-message-speaker


  %script{ :type => "text/template", :id => "tpl_position" }      
    .l-message-recipient
    .l-message-body.right.m-position-message-body
      //= render :partial => "shared/bubble", :locals => {:left => true}

      %h2.m-position-heading.m-position-heading-points
        {{ ConsiderIt.current_tenant.get('considerations_prompt') }}

      .m-reasons
        .m-reasons-peer-points.m-reasons-peer-points-pros

          .m-reasons-peer-pros
            %ul.m-point-list

        .m-reasons-pro-con-list
          .m-pro-con-list-propoints
           
            %ul.m-point-list

          .m-pro-con-list-conpoints
            %ul.m-point-list

        .m-reasons-peer-points.m-reasons-peer-points-cons

          .m-reasons-peer-cons
            %ul.m-point-list


      .m-stance
        %h2.m-position-heading.m-position-heading-stance
          {{ ConsiderIt.current_tenant.get('slider_prompt') }}
        %table
          %tr
            %td.m-stance-label-support
              %div
                {{ ConsiderIt.current_tenant.get('slider_left') }}


            %td.m-stance-slider-container
              
            %td.m-stance-label-oppose
              %div
                {{ ConsiderIt.current_tenant.get('slider_right') }}
          %tr
            %td.m-stance-label-neutral{ :colspan => 3 }
              Neutral / Undecided



      .stance.position_statement.hide
        %label{ :name => :explanation }
          Optional statement that summarizes your thoughts
        %textarea.m-position-statement{ :name => :explanation}

    .l-message-speaker.right

  %script{ :type => "text/template", :id => "tpl_summary" }      
    .l-message-recipient

    .l-message-body.right.m-results-responders.summary 
      = render :partial => "shared/bubble", :locals => {:left => false}


      %h3.m-results-pro-con-list-who
        .m-results-pro-con-list-who-others
        .m-results-pro-con-list-who-all    
          The most compelling considerations we've covered so far

      .m-results-summary-pro-con-list

        .m-pro-con-list-propoints             
          .m-top-point.m-top-pro
            (( if(!top_pro) { ))
            We haven't thought of any {{ ConsiderIt.current_tenant.get_pro_label() }} arguments yet.
            (( } else { ))

            %span.m-top-point-header
              Our Top {{ ConsiderIt.current_tenant.get('pro_label') }} is 
            %span.m-top-point-content
              &ldquo;{{ top_pro.nutshell }}&rdquo; 
            %span.m-top-point-user
              &ndash; {{ConsiderIt.users[top_pro.user_id].get('name')}}       
            (( } ))
  
        .m-pro-con-list-conpoints

          .m-top-point.m-top-con
            (( if(!top_con) { ))
            We haven't thought of any {{ ConsiderIt.current_tenant.get_pro_label() }} arguments yet.
            (( } else { ))

            %span.m-top-point-header
              Our Top {{ ConsiderIt.current_tenant.get('con_label') }} is
            %span.m-top-point-content
              &ldquo;{{ top_con.nutshell }}&rdquo;  
            %span.m-top-point-user
              &ndash; {{ConsiderIt.users[top_con.user_id].get('name')}}               

            (( } ))


    .l-message-speaker.right
      .l-group-container
        (( _.each(participants, function(p){ ))
        %span.avatar{ :'data-target' => "user_profile_page",  :'data-id' => "{{p}}", :alt => "{{ConsiderIt.users[p].get('name')}}'s profile picture", :id => "avatar-{{p}}", :class => "participant", :style => "height:{{tile_size}}px; width:{{tile_size}}px;"}
        (( }); ))

      %a.m-results-summary-button{:href => "{{Routes.proposal_path( long_id )}}"}
        View full results

  %script{ :type => "text/template", :id => "tpl_results" }      
    .l-message-recipient



    .m-histogram

      / .m-histogram-label-support
      /   Supporters

      (( _.each(histogram.breakdown, function(bar, bucket){ ))


      .m-histogram-bar{ :style => "height: {{bar.full_size}}px;", :bucket => "{{bucket}}", :id => "bucket-{{bucket}}"}

        = render :partial => "shared/bubble_equilateral", :locals => {:left => false}

        / .m-bar-percentage
        /   %span.m-bar-percentage-number
        /     {{ (Math.ceil(bar.positions.length / participants.length * 1000)/10).toFixed(1) }}% 
        /   %span.m-bar-percentage-group
        /     {{ ConsiderIt.Position.stance_name_for_bar(6-bucket) }}

        (( if (bar.positions.length > 0) { ))
        %ul.m-bar-people

          (( _.each(bar.positions, function(position) { ))
          (( var user = ConsiderIt.users[position.get('user_id')]; ))
          (( if (user){ ))

          (( var has_explanation = position.get('explanation') && position.get('explanation').length > 0, expl_clss = has_explanation ? 'm-person-has-explanation' : 'm-person-has-no-explanation'; ))

          %li.m-bar-person.avatar{:class=>"bucket-{{bucket}} {{expl_clss}}", :'data-target' => "user_profile_page", :'data-id' => "{{user.id}}", :id => "avatar-{{user.id}}", :alt => "{{user.get('name')}}'s profile picture", :style => "height:{{bar.tile_size}}px; width:{{bar.tile_size}}px;"}

          (( } ))
          (( }); ))
        (( } ))

      (( }); ))

      .m-histogram-base
        .m-histogram-base-label.m-histogram-base-label-support
          Supporters
        .m-histogram-base-label.m-histogram-base-label-oppose
          Opposers

    .l-message-body.right.m-results-responders
      = render :partial => "shared/bubble", :locals => {:left => false}

      %h3.m-results-pro-con-list-who
        .m-results-pro-con-list-who-others
        .m-results-pro-con-list-who-all    
          The most compelling considerations we've covered so far



      .m-results-pro-con-list


        .m-pro-con-list-propoints             
          .m-pro-con-list-header
            Pros
            / - if theme_image_path('pro_header.png') && File.exists?(theme_image_path('pro_header.png'))
            /   = theme_image_tag('pro_header.png')
            / - else
            /   = image_tag('chalk/pros.png') 
          %ul.m-point-list
     

        .m-pro-con-list-conpoints

          .m-pro-con-list-header
            Cons
            / - if theme_image_path('con_header.png') && File.exists?(theme_image_path('con_header.png'))
            /   = theme_image_tag('con_header.png')
            / - else
            /   = image_tag('chalk/cons.png') 

          %ul.m-point-list



    .l-message-speaker.right

      .l-group-container
        (( _.each( participants, function(p){ ))
        %span.avatar{ :'data-target' => "user_profile_page", :'data-id' => "{{p}}", :id => "avatar-{{p}}", :alt => "{{ConsiderIt.users[p].get('name')}}'s profile picture", :class => "participant", :style => "height:{{tile_size}}px; width:{{tile_size}}px;"}
        (( }); ))
      / %a.m-results-summary-button{:'data-action' => "results-explode-participants"}
      /   Show their preferences

      / %a.m-results-summary-button{:'data-action' => "results-implode-participants"}
      /   Hide their preferences


  %script{ :type => "text/template", :id => "tpl_static_position" }
    .l-dialog-detachable.m-static-position

      .l-dialog-title.m-static-position-stance
        {{ user.get('name') }} {{stance_label}} this proposal.
        
        %a.l-dialog-close.cancel{ :'data-target' => 'static-position-close'}
          close

      .l-dialog-body.m-static-position-reasons.m-static-position-reasons-supporting
        (( if(supporting_points.length > 0){ ))
        .m-static-position-reasons-label
          ((if (stance != 3) { ))
          Their reasons include: 
          (( } else {  ))
          They recognize these Pros:
          (( } ))
        %ul.m-static-position-reasons-list          
          (( _.each(supporting_points, function(pnt){ ))

          %li.m-static-position-point
            {{ pnt.get('nutshell') }} 
            %span.m-point-user
              &ndash; {{ConsiderIt.users[pnt.get('user_id')].get('name')}}
          (( }); ))

        (( } else { ))
        .m-static-position-reasons-none
          {{ user.get('name') }} does not give any supporting reasons.
        (( } ))
      .l-dialog-body.m-static-position-reasons.m-static-position-reasons-opposing
        (( if(opposing_points.length > 0){ ))
        .m-static-position-reasons-label
          At the same time, {{ user.get('name') }} recognizes these tradeoffs:          
        %ul.m-static-position-reasons-list          
          (( _.each(opposing_points, function(pnt){ ))
          %li.m-static-position-point
            {{ pnt.get('nutshell') }} 
            %span.m-point-user
              &ndash; {{ConsiderIt.users[pnt.get('user_id')].get('name')}}
          (( }) ))

        (( } else { ))
        .m-static-position-reasons-none
          {{ user.get('name') }} does not recognize any tradeoffs. 
        (( } ))




  %script{ :type => "text/template", :id => "tpl_proposal_admin_strip_edit_publicity" }
    .l-dialog-detachable
      %h1.l-dialog-title
        Who can view and participate?  

      .l-dialog-body
        = form_for :proposal, :url => "{{Routes.proposal_path(long_id)}}", :method => :put, :remote => true, :html => {:class => 'm-proposal-admin_operations-settings-form'} do |f|
          .radio_block
            .option
              (( if(publicity == 2) { ))
              = f.radio_button :publicity, '2', :value => '2', :checked => true
              (( } else { ))
              = f.radio_button :publicity, '2', :value => '2'
              (( } ))

              = f.label :publicity, 'Public', :value => '2'
              .sublabel
                It will be accessible on the homepage.

            .option
              (( if(publicity == 1) { ))
              = f.radio_button :publicity, '1', :value => '1', :checked => true
              (( } else { ))
              = f.radio_button :publicity, '1', :value => '1'
              (( } ))

              = f.label :publicity, 'Anyone with a link', :value => '1'
              .sublabel
                Only people that have a link to this proposal will be able to access it.

            .option
              (( if(publicity == 0) { ))
              = f.radio_button :publicity, '0', :value => '0', :checked => true
              (( } else { ))
              = f.radio_button :publicity, '0', :value => '0'
              (( } ))

              = f.label :publicity, 'Private', :value => '0'
              .sublabel
                Restrict access to the following invited participants.

              .access_list
                .label
                  Comma-separated email list of invited users:
                = f.text_area :access_list, :rows => 2, :class => "autoResize"

          .save_block
            = f.submit 'save'
            %a.cancel
              cancel

  %script{ :type => "text/template", :id => "tpl_proposal_admin_strip_edit_active"}
    .l-dialog-detachable
      %h1.l-dialog-title
        Set the status of this proposal.  

      .l-dialog-body
        = form_for :proposal, :url => "{{ Routes.proposal_path(long_id) }}", :method => :put, :remote => true, :html => {:class => 'm-proposal-admin_operations-settings-form'} do |f|
          .radio_block
            .option
              (( if(active) { ))
              = f.radio_button :active, true, :value => true, :checked => true
              (( } else { ))
              = f.radio_button :active, true, :value => true
              (( } ))
              = f.label :active, 'Active', :value => true
              .sublabel
                Contributions are open. People with access to this proposal can contribute to it.
            .option
              (( if(active) { ))
              = f.radio_button :active, false, :value => false
              (( } else { ))
              = f.radio_button :active, false, :value => false, :checked => true
              (( } ))
              = f.label :active, 'Inactive', :value => false
              .sublabel
                Contributions are closed. People with access to this proposal will only be able to view it. 

          .save_block
            = f.submit 'save'
            %a.cancel
              cancel

  %script{ :type => "text/template", :id => "tpl_proposal_admin_strip" }

    %span.m-proposal-admin_label
      Conversation settings:

    .m-proposal-admin-publicity.l-dialog-prompt
      %a.m-proposal-admin_operations-publicity.l-dialog-prompt-label
        //Sharing is 
        %span
          (( if(publicity == 2) { ))
          publicly accessible
          (( } else if(publicity == 1){ ))
          accessible by link only
          (( } else { ))
          private
          (( } ))

    .m-proposal-admin-status.l-dialog-prompt
      %a.m-proposal-admin_operations-status.l-dialog-prompt-label
        //Status is 
        %span
          (( if(active){ ))
          active
          (( } else { ))
          inactive
          (( } ))


    = link_to "Delete conversation", "{{Routes.proposal_path(long_id)}}", :confirm => "Are you sure you wish to permanently delete this conversation?", :method => :delete, :remote => true, :class => 'm-delete_proposal'


  = render :partial => 'assessable/templates_user_facing'

  = render :partial => 'backbone/templates_user'