== ConsiderIt

(this document is only partly fleshed out)

ConsiderIt is an open source deliberation platform that allows people to
collaboratively create pro/con lists of the key points around any complex issue. 

ConsiderIt works by drawing on the wisdom of crowds to generate a set of key
considerations for decision-making: helping organizations identify the pro and con 
points that matter most to their users, readers or constituents. 

ConsiderIt helps individuals make sense of complex issues by letting them create 
pro/con lists of the key points that matter to them. ConsiderIt makes it easy to 
endorse points made by others who share your views, or to add new points of your 
own. 

ConsiderIt also helps create common ground among people with different views. 
ConsiderIt prioritizes the pro and con points that are endorsed by people from 
across the decision spectrum, decreasing polarization and helping decision-makers 
move towards solutions with broad appeal.

ConsiderIt is open source, a Ruby on Rails project. It is licensed under the AGPL.


== Getting Started

1. manage ruby / rails installs with RVM (https://rvm.beginrescueend.com/gemsets/). After installing rvm, install ruby 1.92 (rvm install 1.9.2)
  - good mac install directions at http://www.cowboycoded.com/2010/12/04/setting-up-rails-3-on-mac-osx-snow-leopard-10-6-4/

2. Clone from git repository into your workspace. note that you will have to setup your ssh keys with github first (see e.g. http://help.github.com/linux-set-up-git/)
      <tt>git clone git@github.com:tkriplean/ConsiderIt.git</tt>

3. <tt>cd ConsiderIt</tt>. Note that an RVM project file (.rvmrc) already exists in the project. When you first cd into the directory, RVM should recognize this and ask if you trust it. You should say yes. 

4. install gems
   <tt>gem install rails</tt>
   <tt>bundle install</tt>
   <tt>rake gems:install</tt>

4a. (for mac) when installing mysql gem:
  - sudo env ARCHFLAGS="-arch x86_64" gem install mysql -with-mysql-config=/usr/local/mysql/bin/mysql_config
  - OR with MAMP: sudo env ARCHFLAGS="-arch x86_64" gem install mysql -with-mysql-config=/Applications/MAMP/Library/bin/mysql_config
  - accessing MAMP mysql via terminal: mysql --socket=/Applications/MAMP/tmp/mysql/mysql.sock -u root -p

4b. Imagemagick is required: http://www.imagemagick.org/script/index.php

5. update config/database.yml as necessary

6. create the database
   <tt>rake db:create</tt>
   <tt>rake db:migrate</tt>

5. Start the web server:
       <tt>rails server</tt> (run with --help for options)

6. (optional) Deployment
- when creating app on heroku, specify 1.9.2 stack: http://devcenter.heroku.com/articles/stack
- you can have multiple remote sites for git, such as github and heroku: http://devcenter.heroku.com/articles/git


== Description of Contents

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   `-- tasks
  |-- log
  |-- public
  |   |-- images
  |   |-- javascripts
  |   `-- stylesheets
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   |-- cache
  |   |-- pids
  |   |-- sessions
  |   `-- sockets
  `-- vendor
      `-- plugins

app
  Holds all the code that's specific to this particular application.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from
  ApplicationController which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb. Models descend from
  ActiveRecord::Base by default.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use
  eRuby syntax by default.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the
  common header/footer method of wrapping views. In your views, define a layout
  using the <tt>layout :default</tt> and create a file named default.html.erb.
  Inside default.html.erb, call <% yield %> to render the view using this
  layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are
  generated for you automatically when using generators for controllers.
  Helpers can be used to wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when
  generated using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers. This directory is in
  the load path.

public
  The directory available for the web server. Contains subdirectories for
  images, stylesheets, and javascripts. Also contains the dispatchers and the
  default HTML files. This should be set as the DOCUMENT_ROOT of your web
  server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate
  command, template test files will be generated for you and placed in this
  directory.

vendor
  External libraries that the application depends on. Also includes the plugins
  subdirectory. If the app has frozen rails, those gems also go here, under
  vendor/rails/. This directory is in the load path.
