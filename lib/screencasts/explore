#!/usr/bin/env ~/Documents/code/castanaut/bin/castanaut

#####
# Uses castanaut to automate a screencast in safari. The robot voice sections, 
# as created via while_saying, help to space out the video for timing
# purposes. 
#
#
# Installation:
#   - must be installed on a mac
#   - Castanaut should be installed from https://github.com/tkriplean/castanaut
#
# Execution:
#   - must be run on a mac
#   - /path/to/castanaut/bin/castanaut /path/to/this/file
#   - can be invoked from bin/screencast, but the path to in bin/screencast is
#     hardcoded for Travis...talk to him if you can't get it to run.  

# TODO: 
#  - refactor into general methods so we can create other screencasts or tests
#    more easily
#  - find a way to automatically destroy any opinions created here. 


#####
# Prep for this screencast: 
# 
# > rake prep_deathstar

#####
# config

# By default, this script will only launch and control a safari instance. 
# Setting 'record_video_with' to "camtasia" or "quicktime" will also launch
# cause a screen recording to be created. 
record_video = true

export_to = File.absolute_path(File.join(File.dirname(screenplay), 'exports', File.basename(screenplay)))


# height of safari window bar + toolbar + apple menu
y_offset = 63

# shaves off rounded window corners
window_padding = 15 

# controls the size and location of the screencast main area
x, y, width, height = [window_padding, y_offset, 1280, 720] 

#####
# Screencast guts

if record_video
  plugin "quicktime"
  start_recording(x, y, width, height)
  pause 2
end


plugin "safari"

launch "Safari", at(x - window_padding, y - y_offset, width + window_padding * 2, height + y_offset + window_padding) 

while_saying "loading page" do
  url "http://localhost:3000/Death_Star?domain=galacticfederation"
  wait_for_element('.proposal_header')
  pause 1
  pause 2
  wait_for_element('.cancel_opinion_button')
  scroll_to('.cancel_opinion_button')
  move to_element('.cancel_opinion_button')
  click
end

pause 2

while_saying "Sometimes an issue comes up that requires some thought" do   
  scroll_to ".proposal_header", 0, 0
  move to_element('.proposal_header'), {:speed => 0.01}  
  pause 4
end

scroll_to ".proposal_header", 0, 0

wait_for_element('.histogram')
scroll_to ".histogram", 1000, 0

pause 1.5

while_saying "Now you can explore patterns of thought!" do 
  move to_element('.histogram', {:area => ['center', 'top'], :edge_offset => 25})
  click
  pause 1
  move to_element('.histogram', {:area => ['right', 'top'], :edge_offset => 25}), {:speed => 3}
  move to_element('.histogram', {:area => ['left', 'top'], :edge_offset => 25}), {:speed => 6}
end

move by(0, -5), {:speed => 0.5}
pause 1
click
pause 1

while_saying "See what a particular individual believes" do 
  move to_element('.histogram [data-user="/user/282314"]', {:area => ['bottom', 'center'], :edge_offset => 3})
  click
  pause 4
  move to_element('.histogram [data-user="/user/282161"]', {:area => ['bottom', 'center'], :edge_offset => 3}), {:speed => 2}
  click
  pause 3.5  
  click
end

pause 2

while_saying "Figure out who has been persuaded by the top pro points." do 
  perform 'tricky' do 
    move to_element(".pros_by_community .includers", {:area => ['bottom', 'center'], :edge_offset => 3}), {speed: 2}
    pause 1.5
    move to_element('[data-id="/point/5505"] .includers', {:area => ['bottom', 'center'], :edge_offset => 3})
    pause 1.5
    move to_element('[data-id="/point/5513"] .includers', {:area => ['bottom', 'center'], :edge_offset => 3})
    pause 1.5
  end
end

pause 1



at_end_of_movie do
  if record_video
    stop_recording(export_to)
  end
end
